
UART_ocm_mem_test.elf:     file format elf32-littlenios2
UART_ocm_mem_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020224

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00001e50 memsz 0x00001e50 flags r-x
    LOAD off    0x00002e70 vaddr 0x00021e70 paddr 0x00022524 align 2**12
         filesz 0x000006b4 memsz 0x000006b4 flags rw-
    LOAD off    0x00000bd8 vaddr 0x00022bd8 paddr 0x00022bd8 align 2**12
         filesz 0x00000000 memsz 0x00000118 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001c28  00020224  00020224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000024  00021e4c  00021e4c  00002e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000006b4  00021e70  00022524  00002e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000118  00022bd8  00022bd8  00003bd8  2**2
                  ALLOC, SMALL_DATA
  6 .on_chip_mem  00000000  00022cf0  00022cf0  00003524  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00003524  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000510  00000000  00000000  00003558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00006b88  00000000  00000000  00003a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000028b6  00000000  00000000  0000a5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00001bc3  00000000  00000000  0000cea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  000009ac  00000000  00000000  0000ea6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    0000124e  00000000  00000000  0000f418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000010  00000000  00000000  00010668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  00010678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line_str 00000c73  00000000  00000000  000106e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000b8  00000000  00000000  0001135b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loclists 00000355  00000000  00000000  00011413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  00012fb9  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  00012fbc  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  00012fc8  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  00012fc9  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000006  00000000  00000000  00012fca  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000006  00000000  00000000  00012fd0  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000006  00000000  00000000  00012fd6  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000009  00000000  00000000  00012fdc  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000057  00000000  00000000  00012fe5  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000301db  00000000  00000000  0001303c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020224 l    d  .text	00000000 .text
00021e4c l    d  .rodata	00000000 .rodata
00021e70 l    d  .rwdata	00000000 .rwdata
00022bd8 l    d  .bss	00000000 .bss
00022cf0 l    d  .on_chip_mem	00000000 .on_chip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    df *ABS*	00000000 crt0.o
0002025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
0002031c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00020484 l     F .text	00000034 alt_dev_reg
00021e70 l     O .rwdata	000000c4 uart_0
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
000206f8 l     F .text	0000009c altera_avalon_uart_irq
00020794 l     F .text	000000e0 altera_avalon_uart_rxirq
00020874 l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00020a0c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00020c30 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_close.c
00020e20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00020f58 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00020f84 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000213e8 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00021538 l     F .text	0000003c alt_get_errno
00021574 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
000220dc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00022be8 g     O .bss	00000004 alt_instruction_exception_handler
00020408 g     F .text	0000007c alt_main
00022bf0 g     O .bss	00000100 alt_irq
00022524 g       *ABS*	00000000 __flash_rwdata_start
00021820 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00022bec g     O .bss	00000004 errno
00020000 g       *ABS*	00000000 __alt_mem_on_chip_mem
00022bdc g     O .bss	00000004 alt_argv
0002a500 g       *ABS*	00000000 _gp
00021f5c g     O .rwdata	00000180 alt_fd_list
00021844 g     F .text	00000090 alt_find_dev
000214bc g     F .text	0000007c alt_io_redirect
00021e4c g       *ABS*	00000000 __DTOR_END__
00021a94 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00022510 g     O .rwdata	00000004 alt_max_fd
0002251c g     O .rwdata	00000004 _global_impure_ptr
00022cf0 g       *ABS*	00000000 __bss_end
00021300 g     F .text	000000e8 alt_iic_isr_register
0002064c g     F .text	000000ac altera_avalon_uart_init
000212b4 g     F .text	0000004c alt_ic_irq_enabled
00022be4 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000c8 alt_irq_handler
00021f34 g     O .rwdata	00000028 alt_dev_null
00020f38 g     F .text	00000020 alt_dcache_flush_all
00022524 g       *ABS*	00000000 __ram_rwdata_end
00022508 g     O .rwdata	00000008 alt_dev_list
00021e70 g       *ABS*	00000000 __ram_rodata_end
00022cf0 g       *ABS*	00000000 end
00020c6c g     F .text	000001b4 altera_avalon_uart_write
000201c4 g     F .exceptions	00000060 alt_instruction_exception_entry
00021e4c g       *ABS*	00000000 __CTOR_LIST__
00031800 g       *ABS*	00000000 __alt_stack_pointer
0002059c g     F .text	00000060 altera_avalon_uart_write_fd
000205fc g     F .text	00000050 altera_avalon_uart_close_fd
00021cf0 g     F .text	00000120 __call_exitprocs
00020224 g     F .text	0000003c _start
000204f4 g     F .text	00000048 alt_sys_init
00021c60 g     F .text	00000090 __register_exitproc
00021e70 g       *ABS*	00000000 __ram_rwdata_start
00021e4c g       *ABS*	00000000 __ram_rodata_start
000219dc g     F .text	000000b8 alt_get_fd
00021b50 g     F .text	00000078 memcmp
00022cf0 g       *ABS*	00000000 __alt_stack_base
000218d4 g     F .text	00000108 alt_find_file
00020fc0 g     F .text	000000a8 alt_dev_llist_insert
00022bd8 g       *ABS*	00000000 __bss_start
00020260 g     F .text	000000bc main
00022be0 g     O .bss	00000004 alt_envp
00022514 g     O .rwdata	00000004 alt_errno
00021e4c g       *ABS*	00000000 __CTOR_END__
00021e4c g       *ABS*	00000000 __flash_rodata_start
00021e4c g       *ABS*	00000000 __DTOR_LIST__
000204b8 g     F .text	0000003c alt_irq_init
000217b0 g     F .text	00000070 alt_release_fd
00021b08 g     F .text	00000014 atexit
00022520 g     O .rwdata	00000004 _impure_ptr
00022bd8 g     O .bss	00000004 alt_argc
000210cc g     F .text	00000064 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00022500 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00021150 g     F .text	00000050 alt_ic_isr_register
00022524 g       *ABS*	00000000 _edata
0002053c g     F .text	00000060 altera_avalon_uart_read_fd
00022cf0 g       *ABS*	00000000 _end
00020224 g       *ABS*	00000000 __ram_exceptions_end
00021228 g     F .text	0000008c alt_ic_irq_disable
00021b1c g     F .text	00000034 exit
00031800 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
000209b8 g     F .text	00000054 altera_avalon_uart_close
00021e10 g     F .text	0000003c _exit
00021bc8 g     F .text	00000098 strlen
00021650 g     F .text	00000160 open
00021130 g     F .text	00000020 alt_icache_flush_all
00022518 g     O .rwdata	00000004 alt_priority_mask
000211a0 g     F .text	00000088 alt_ic_irq_enable
00020a48 g     F .text	000001e8 altera_avalon_uart_read
00021068 g     F .text	00000064 _do_ctors
00020e5c g     F .text	000000dc close
00020384 g     F .text	00000084 alt_load



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408914 	ori	at,at,548
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
   20094:	e93fff04 	addi	r4,ea,-4
   20098:	00201c40 	call	201c4 <alt_instruction_exception_entry>
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>
   200a0:	ebffff04 	addi	r15,ea,-4
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffc15 	stw	r2,-16(fp)

  return active;
   20118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0ffff17 	ldw	r3,-4(fp)
   20130:	e0bffe17 	ldw	r2,-8(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001126 	beq	r2,zero,20180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	e0bffd17 	ldw	r2,-12(fp)
   20140:	100690fa 	slli	r3,r2,3
   20144:	008000b4 	movhi	r2,2
   20148:	1885883a 	add	r2,r3,r2
   2014c:	10cafc17 	ldw	r3,11248(r2)
   20150:	e0bffd17 	ldw	r2,-12(fp)
   20154:	100890fa 	slli	r4,r2,3
   20158:	008000b4 	movhi	r2,2
   2015c:	2085883a 	add	r2,r4,r2
   20160:	108afd17 	ldw	r2,11252(r2)
   20164:	1009883a 	mov	r4,r2
   20168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   2016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
   20170:	0005313a 	rdctl	r2,ipending
   20174:	e0bffb15 	stw	r2,-20(fp)
  return active;
   20178:	e0bffb17 	ldw	r2,-20(fp)
   2017c:	00000706 	br	2019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
   20180:	e0bffe17 	ldw	r2,-8(fp)
   20184:	1085883a 	add	r2,r2,r2
   20188:	e0bffe15 	stw	r2,-8(fp)
      i++;
   2018c:	e0bffd17 	ldw	r2,-12(fp)
   20190:	10800044 	addi	r2,r2,1
   20194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
   20198:	003fe406 	br	2012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
   2019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   201a0:	e0bfff17 	ldw	r2,-4(fp)
   201a4:	103fde1e 	bne	r2,zero,20120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201a8:	0001883a 	nop
}
   201ac:	0001883a 	nop
   201b0:	e037883a 	mov	sp,fp
   201b4:	dfc00117 	ldw	ra,4(sp)
   201b8:	df000017 	ldw	fp,0(sp)
   201bc:	dec00204 	addi	sp,sp,8
   201c0:	f800283a 	ret

000201c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201c4:	defffb04 	addi	sp,sp,-20
   201c8:	dfc00415 	stw	ra,16(sp)
   201cc:	df000315 	stw	fp,12(sp)
   201d0:	df000304 	addi	fp,sp,12
   201d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201d8:	00bfffc4 	movi	r2,-1
   201dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
   201e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201e4:	d0a1ba17 	ldw	r2,-31000(gp)
   201e8:	10000726 	beq	r2,zero,20208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201ec:	d0a1ba17 	ldw	r2,-31000(gp)
   201f0:	e0ffff17 	ldw	r3,-4(fp)
   201f4:	e1bffe17 	ldw	r6,-8(fp)
   201f8:	e17ffd17 	ldw	r5,-12(fp)
   201fc:	1809883a 	mov	r4,r3
   20200:	103ee83a 	callr	r2
   20204:	00000206 	br	20210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2020c:	0005883a 	mov	r2,zero
}
   20210:	e037883a 	mov	sp,fp
   20214:	dfc00117 	ldw	ra,4(sp)
   20218:	df000017 	ldw	fp,0(sp)
   2021c:	dec00204 	addi	sp,sp,8
   20220:	f800283a 	ret

Disassembly of section .text:

00020224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20224:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20228:	dec60014 	ori	sp,sp,6144
    movhi gp, %hi(_gp)
   2022c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   20230:	d6a94014 	ori	gp,gp,42240
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20234:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20238:	108af614 	ori	r2,r2,11224

    movhi r3, %hi(__bss_end)
   2023c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   20240:	18cb3c14 	ori	r3,r3,11504

    beq r2, r3, 1f
   20244:	10c00326 	beq	r2,r3,20254 <_start+0x30>

0:
    stw zero, (r2)
   20248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20250:	10fffd36 	bltu	r2,r3,20248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20254:	00203840 	call	20384 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20258:	00204080 	call	20408 <alt_main>

0002025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2025c:	003fff06 	br	2025c <alt_after_alt_main>

00020260 <main>:

#include <stdio.h>
#include "system.h"

int main()
{
   20260:	defffd04 	addi	sp,sp,-12
   20264:	df000215 	stw	fp,8(sp)
   20268:	df000204 	addi	fp,sp,8
  //printf("Hello from Nios II!\n");
	volatile uint32_t * ocm_base = (uint32_t *) ON_CHIP_MEM_BASE;
   2026c:	008000b4 	movhi	r2,2
   20270:	e0bfff15 	stw	r2,-4(fp)
	volatile uint32_t value = 0xDEAD;
   20274:	00b7ab54 	movui	r2,57005
   20278:	e0bffe15 	stw	r2,-8(fp)

	//writing to ocm to see if it works:
	*(ocm_base) = value;
   2027c:	e0fffe17 	ldw	r3,-8(fp)
   20280:	e0bfff17 	ldw	r2,-4(fp)
   20284:	10c00015 	stw	r3,0(r2)
	*(ocm_base+2) = value;
   20288:	e0bfff17 	ldw	r2,-4(fp)
   2028c:	10800204 	addi	r2,r2,8
   20290:	e0fffe17 	ldw	r3,-8(fp)
   20294:	10c00015 	stw	r3,0(r2)
	*(ocm_base+4) = value;
   20298:	e0bfff17 	ldw	r2,-4(fp)
   2029c:	10800404 	addi	r2,r2,16
   202a0:	e0fffe17 	ldw	r3,-8(fp)
   202a4:	10c00015 	stw	r3,0(r2)
	*(ocm_base+6) = value;
   202a8:	e0bfff17 	ldw	r2,-4(fp)
   202ac:	10800604 	addi	r2,r2,24
   202b0:	e0fffe17 	ldw	r3,-8(fp)
   202b4:	10c00015 	stw	r3,0(r2)
	*(ocm_base+7) = value;
   202b8:	e0bfff17 	ldw	r2,-4(fp)
   202bc:	10800704 	addi	r2,r2,28
   202c0:	e0fffe17 	ldw	r3,-8(fp)
   202c4:	10c00015 	stw	r3,0(r2)
	*(ocm_base+8) = value;
   202c8:	e0bfff17 	ldw	r2,-4(fp)
   202cc:	10800804 	addi	r2,r2,32
   202d0:	e0fffe17 	ldw	r3,-8(fp)
   202d4:	10c00015 	stw	r3,0(r2)
	*(ocm_base+9) = value;
   202d8:	e0bfff17 	ldw	r2,-4(fp)
   202dc:	10800904 	addi	r2,r2,36
   202e0:	e0fffe17 	ldw	r3,-8(fp)
   202e4:	10c00015 	stw	r3,0(r2)
	*(ocm_base+10) = value;
   202e8:	e0bfff17 	ldw	r2,-4(fp)
   202ec:	10800a04 	addi	r2,r2,40
   202f0:	e0fffe17 	ldw	r3,-8(fp)
   202f4:	10c00015 	stw	r3,0(r2)
	*(ocm_base+11) = value;
   202f8:	e0bfff17 	ldw	r2,-4(fp)
   202fc:	10800b04 	addi	r2,r2,44
   20300:	e0fffe17 	ldw	r3,-8(fp)
   20304:	10c00015 	stw	r3,0(r2)
  return 0;
   20308:	0005883a 	mov	r2,zero
}
   2030c:	e037883a 	mov	sp,fp
   20310:	df000017 	ldw	fp,0(sp)
   20314:	dec00104 	addi	sp,sp,4
   20318:	f800283a 	ret

0002031c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2031c:	defffc04 	addi	sp,sp,-16
   20320:	df000315 	stw	fp,12(sp)
   20324:	df000304 	addi	fp,sp,12
   20328:	e13fff15 	stw	r4,-4(fp)
   2032c:	e17ffe15 	stw	r5,-8(fp)
   20330:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   20334:	e0fffe17 	ldw	r3,-8(fp)
   20338:	e0bfff17 	ldw	r2,-4(fp)
   2033c:	18800c26 	beq	r3,r2,20370 <alt_load_section+0x54>
  {
    while( to != end )
   20340:	00000806 	br	20364 <alt_load_section+0x48>
    {
      *to++ = *from++;
   20344:	e0ffff17 	ldw	r3,-4(fp)
   20348:	18800104 	addi	r2,r3,4
   2034c:	e0bfff15 	stw	r2,-4(fp)
   20350:	e0bffe17 	ldw	r2,-8(fp)
   20354:	11000104 	addi	r4,r2,4
   20358:	e13ffe15 	stw	r4,-8(fp)
   2035c:	18c00017 	ldw	r3,0(r3)
   20360:	10c00015 	stw	r3,0(r2)
    while( to != end )
   20364:	e0fffe17 	ldw	r3,-8(fp)
   20368:	e0bffd17 	ldw	r2,-12(fp)
   2036c:	18bff51e 	bne	r3,r2,20344 <alt_load_section+0x28>
    }
  }
}
   20370:	0001883a 	nop
   20374:	e037883a 	mov	sp,fp
   20378:	df000017 	ldw	fp,0(sp)
   2037c:	dec00104 	addi	sp,sp,4
   20380:	f800283a 	ret

00020384 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   20384:	defffe04 	addi	sp,sp,-8
   20388:	dfc00115 	stw	ra,4(sp)
   2038c:	df000015 	stw	fp,0(sp)
   20390:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   20394:	018000b4 	movhi	r6,2
   20398:	31894904 	addi	r6,r6,9508
   2039c:	014000b4 	movhi	r5,2
   203a0:	29479c04 	addi	r5,r5,7792
   203a4:	010000b4 	movhi	r4,2
   203a8:	21094904 	addi	r4,r4,9508
   203ac:	002031c0 	call	2031c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   203b0:	018000b4 	movhi	r6,2
   203b4:	31808904 	addi	r6,r6,548
   203b8:	014000b4 	movhi	r5,2
   203bc:	29400804 	addi	r5,r5,32
   203c0:	010000b4 	movhi	r4,2
   203c4:	21000804 	addi	r4,r4,32
   203c8:	002031c0 	call	2031c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   203cc:	018000b4 	movhi	r6,2
   203d0:	31879c04 	addi	r6,r6,7792
   203d4:	014000b4 	movhi	r5,2
   203d8:	29479304 	addi	r5,r5,7756
   203dc:	010000b4 	movhi	r4,2
   203e0:	21079304 	addi	r4,r4,7756
   203e4:	002031c0 	call	2031c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   203e8:	0020f380 	call	20f38 <alt_dcache_flush_all>
  alt_icache_flush_all();
   203ec:	00211300 	call	21130 <alt_icache_flush_all>
}
   203f0:	0001883a 	nop
   203f4:	e037883a 	mov	sp,fp
   203f8:	dfc00117 	ldw	ra,4(sp)
   203fc:	df000017 	ldw	fp,0(sp)
   20400:	dec00204 	addi	sp,sp,8
   20404:	f800283a 	ret

00020408 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   20408:	defffd04 	addi	sp,sp,-12
   2040c:	dfc00215 	stw	ra,8(sp)
   20410:	df000115 	stw	fp,4(sp)
   20414:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   20418:	0009883a 	mov	r4,zero
   2041c:	00204b80 	call	204b8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   20420:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   20424:	00204f40 	call	204f4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   20428:	018000b4 	movhi	r6,2
   2042c:	31879304 	addi	r6,r6,7756
   20430:	014000b4 	movhi	r5,2
   20434:	29479304 	addi	r5,r5,7756
   20438:	010000b4 	movhi	r4,2
   2043c:	21079304 	addi	r4,r4,7756
   20440:	00214bc0 	call	214bc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   20444:	00210680 	call	21068 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   20448:	010000b4 	movhi	r4,2
   2044c:	21043304 	addi	r4,r4,4300
   20450:	0021b080 	call	21b08 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   20454:	d0a1b617 	ldw	r2,-31016(gp)
   20458:	d0e1b717 	ldw	r3,-31012(gp)
   2045c:	d121b817 	ldw	r4,-31008(gp)
   20460:	200d883a 	mov	r6,r4
   20464:	180b883a 	mov	r5,r3
   20468:	1009883a 	mov	r4,r2
   2046c:	00202600 	call	20260 <main>
   20470:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   20474:	01000044 	movi	r4,1
   20478:	0020e5c0 	call	20e5c <close>
  exit (result);
   2047c:	e13fff17 	ldw	r4,-4(fp)
   20480:	0021b1c0 	call	21b1c <exit>

00020484 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   20484:	defffd04 	addi	sp,sp,-12
   20488:	dfc00215 	stw	ra,8(sp)
   2048c:	df000115 	stw	fp,4(sp)
   20490:	df000104 	addi	fp,sp,4
   20494:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   20498:	d1600204 	addi	r5,gp,-32760
   2049c:	e13fff17 	ldw	r4,-4(fp)
   204a0:	0020fc00 	call	20fc0 <alt_dev_llist_insert>
}
   204a4:	e037883a 	mov	sp,fp
   204a8:	dfc00117 	ldw	ra,4(sp)
   204ac:	df000017 	ldw	fp,0(sp)
   204b0:	dec00204 	addi	sp,sp,8
   204b4:	f800283a 	ret

000204b8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   204b8:	defffd04 	addi	sp,sp,-12
   204bc:	dfc00215 	stw	ra,8(sp)
   204c0:	df000115 	stw	fp,4(sp)
   204c4:	df000104 	addi	fp,sp,4
   204c8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   204cc:	00218200 	call	21820 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   204d0:	00800044 	movi	r2,1
   204d4:	1001703a 	wrctl	status,r2
}
   204d8:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
   204dc:	0001883a 	nop
   204e0:	e037883a 	mov	sp,fp
   204e4:	dfc00117 	ldw	ra,4(sp)
   204e8:	df000017 	ldw	fp,0(sp)
   204ec:	dec00204 	addi	sp,sp,8
   204f0:	f800283a 	ret

000204f4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   204f4:	defffe04 	addi	sp,sp,-8
   204f8:	dfc00115 	stw	ra,4(sp)
   204fc:	df000015 	stw	fp,0(sp)
   20500:	d839883a 	mov	fp,sp
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
   20504:	000d883a 	mov	r6,zero
   20508:	000b883a 	mov	r5,zero
   2050c:	010000b4 	movhi	r4,2
   20510:	2107a604 	addi	r4,r4,7832
   20514:	002064c0 	call	2064c <altera_avalon_uart_init>
   20518:	010000b4 	movhi	r4,2
   2051c:	21079c04 	addi	r4,r4,7792
   20520:	00204840 	call	20484 <alt_dev_reg>
}
   20524:	0001883a 	nop
   20528:	e037883a 	mov	sp,fp
   2052c:	dfc00117 	ldw	ra,4(sp)
   20530:	df000017 	ldw	fp,0(sp)
   20534:	dec00204 	addi	sp,sp,8
   20538:	f800283a 	ret

0002053c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2053c:	defffa04 	addi	sp,sp,-24
   20540:	dfc00515 	stw	ra,20(sp)
   20544:	df000415 	stw	fp,16(sp)
   20548:	df000404 	addi	fp,sp,16
   2054c:	e13ffe15 	stw	r4,-8(fp)
   20550:	e17ffd15 	stw	r5,-12(fp)
   20554:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   20558:	e0bffe17 	ldw	r2,-8(fp)
   2055c:	10800017 	ldw	r2,0(r2)
   20560:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   20564:	e0bfff17 	ldw	r2,-4(fp)
   20568:	10c00a04 	addi	r3,r2,40
   2056c:	e0bffe17 	ldw	r2,-8(fp)
   20570:	10800217 	ldw	r2,8(r2)
   20574:	100f883a 	mov	r7,r2
   20578:	e1bffc17 	ldw	r6,-16(fp)
   2057c:	e17ffd17 	ldw	r5,-12(fp)
   20580:	1809883a 	mov	r4,r3
   20584:	0020a480 	call	20a48 <altera_avalon_uart_read>
      fd->fd_flags);
}
   20588:	e037883a 	mov	sp,fp
   2058c:	dfc00117 	ldw	ra,4(sp)
   20590:	df000017 	ldw	fp,0(sp)
   20594:	dec00204 	addi	sp,sp,8
   20598:	f800283a 	ret

0002059c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2059c:	defffa04 	addi	sp,sp,-24
   205a0:	dfc00515 	stw	ra,20(sp)
   205a4:	df000415 	stw	fp,16(sp)
   205a8:	df000404 	addi	fp,sp,16
   205ac:	e13ffe15 	stw	r4,-8(fp)
   205b0:	e17ffd15 	stw	r5,-12(fp)
   205b4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   205b8:	e0bffe17 	ldw	r2,-8(fp)
   205bc:	10800017 	ldw	r2,0(r2)
   205c0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   205c4:	e0bfff17 	ldw	r2,-4(fp)
   205c8:	10c00a04 	addi	r3,r2,40
   205cc:	e0bffe17 	ldw	r2,-8(fp)
   205d0:	10800217 	ldw	r2,8(r2)
   205d4:	100f883a 	mov	r7,r2
   205d8:	e1bffc17 	ldw	r6,-16(fp)
   205dc:	e17ffd17 	ldw	r5,-12(fp)
   205e0:	1809883a 	mov	r4,r3
   205e4:	0020c6c0 	call	20c6c <altera_avalon_uart_write>
      fd->fd_flags);
}
   205e8:	e037883a 	mov	sp,fp
   205ec:	dfc00117 	ldw	ra,4(sp)
   205f0:	df000017 	ldw	fp,0(sp)
   205f4:	dec00204 	addi	sp,sp,8
   205f8:	f800283a 	ret

000205fc <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   205fc:	defffc04 	addi	sp,sp,-16
   20600:	dfc00315 	stw	ra,12(sp)
   20604:	df000215 	stw	fp,8(sp)
   20608:	df000204 	addi	fp,sp,8
   2060c:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   20610:	e0bffe17 	ldw	r2,-8(fp)
   20614:	10800017 	ldw	r2,0(r2)
   20618:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   2061c:	e0bfff17 	ldw	r2,-4(fp)
   20620:	10c00a04 	addi	r3,r2,40
   20624:	e0bffe17 	ldw	r2,-8(fp)
   20628:	10800217 	ldw	r2,8(r2)
   2062c:	100b883a 	mov	r5,r2
   20630:	1809883a 	mov	r4,r3
   20634:	00209b80 	call	209b8 <altera_avalon_uart_close>
}
   20638:	e037883a 	mov	sp,fp
   2063c:	dfc00117 	ldw	ra,4(sp)
   20640:	df000017 	ldw	fp,0(sp)
   20644:	dec00204 	addi	sp,sp,8
   20648:	f800283a 	ret

0002064c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   2064c:	defff804 	addi	sp,sp,-32
   20650:	dfc00715 	stw	ra,28(sp)
   20654:	df000615 	stw	fp,24(sp)
   20658:	df000604 	addi	fp,sp,24
   2065c:	e13ffd15 	stw	r4,-12(fp)
   20660:	e17ffc15 	stw	r5,-16(fp)
   20664:	e1bffb15 	stw	r6,-20(fp)
  void* base = sp->base;
   20668:	e0bffd17 	ldw	r2,-12(fp)
   2066c:	10800017 	ldw	r2,0(r2)
   20670:	e0bfff15 	stw	r2,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   20674:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   20678:	1000041e 	bne	r2,zero,2068c <altera_avalon_uart_init+0x40>
   2067c:	0005883a 	mov	r2,zero
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   20680:	1000021e 	bne	r2,zero,2068c <altera_avalon_uart_init+0x40>
   20684:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   20688:	10000226 	beq	r2,zero,20694 <altera_avalon_uart_init+0x48>
   2068c:	00800044 	movi	r2,1
   20690:	00000106 	br	20698 <altera_avalon_uart_init+0x4c>
   20694:	0005883a 	mov	r2,zero
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   20698:	e0bffe15 	stw	r2,-8(fp)
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   2069c:	e0bffe17 	ldw	r2,-8(fp)
   206a0:	10000f1e 	bne	r2,zero,206e0 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   206a4:	e0bffd17 	ldw	r2,-12(fp)
   206a8:	00c32004 	movi	r3,3200
   206ac:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   206b0:	e0bfff17 	ldw	r2,-4(fp)
   206b4:	10800304 	addi	r2,r2,12
   206b8:	e0fffd17 	ldw	r3,-12(fp)
   206bc:	18c00117 	ldw	r3,4(r3)
   206c0:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   206c4:	d8000015 	stw	zero,0(sp)
   206c8:	e1fffd17 	ldw	r7,-12(fp)
   206cc:	018000b4 	movhi	r6,2
   206d0:	3181be04 	addi	r6,r6,1784
   206d4:	e17ffb17 	ldw	r5,-20(fp)
   206d8:	e13ffc17 	ldw	r4,-16(fp)
   206dc:	00211500 	call	21150 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   206e0:	0001883a 	nop
   206e4:	e037883a 	mov	sp,fp
   206e8:	dfc00117 	ldw	ra,4(sp)
   206ec:	df000017 	ldw	fp,0(sp)
   206f0:	dec00204 	addi	sp,sp,8
   206f4:	f800283a 	ret

000206f8 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   206f8:	defffa04 	addi	sp,sp,-24
   206fc:	dfc00515 	stw	ra,20(sp)
   20700:	df000415 	stw	fp,16(sp)
   20704:	df000404 	addi	fp,sp,16
   20708:	e13ffc15 	stw	r4,-16(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   2070c:	e0bffc17 	ldw	r2,-16(fp)
   20710:	e0bfff15 	stw	r2,-4(fp)
  void* base               = sp->base;
   20714:	e0bfff17 	ldw	r2,-4(fp)
   20718:	10800017 	ldw	r2,0(r2)
   2071c:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   20720:	e0bffe17 	ldw	r2,-8(fp)
   20724:	10800204 	addi	r2,r2,8
   20728:	10800037 	ldwio	r2,0(r2)
   2072c:	e0bffd15 	stw	r2,-12(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   20730:	e0bffe17 	ldw	r2,-8(fp)
   20734:	10800204 	addi	r2,r2,8
   20738:	0007883a 	mov	r3,zero
   2073c:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   20740:	e0bffe17 	ldw	r2,-8(fp)
   20744:	10800204 	addi	r2,r2,8
   20748:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   2074c:	e0bffd17 	ldw	r2,-12(fp)
   20750:	1080200c 	andi	r2,r2,128
   20754:	10000326 	beq	r2,zero,20764 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   20758:	e17ffd17 	ldw	r5,-12(fp)
   2075c:	e13fff17 	ldw	r4,-4(fp)
   20760:	00207940 	call	20794 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   20764:	e0bffd17 	ldw	r2,-12(fp)
   20768:	1081100c 	andi	r2,r2,1088
   2076c:	10000326 	beq	r2,zero,2077c <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   20770:	e17ffd17 	ldw	r5,-12(fp)
   20774:	e13fff17 	ldw	r4,-4(fp)
   20778:	00208740 	call	20874 <altera_avalon_uart_txirq>
  }
  

}
   2077c:	0001883a 	nop
   20780:	e037883a 	mov	sp,fp
   20784:	dfc00117 	ldw	ra,4(sp)
   20788:	df000017 	ldw	fp,0(sp)
   2078c:	dec00204 	addi	sp,sp,8
   20790:	f800283a 	ret

00020794 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   20794:	defffc04 	addi	sp,sp,-16
   20798:	df000315 	stw	fp,12(sp)
   2079c:	df000304 	addi	fp,sp,12
   207a0:	e13ffe15 	stw	r4,-8(fp)
   207a4:	e17ffd15 	stw	r5,-12(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   207a8:	e0bffd17 	ldw	r2,-12(fp)
   207ac:	108000cc 	andi	r2,r2,3
   207b0:	10002b1e 	bne	r2,zero,20860 <altera_avalon_uart_rxirq+0xcc>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   207b4:	e0bffe17 	ldw	r2,-8(fp)
   207b8:	10800317 	ldw	r2,12(r2)
   207bc:	e0bffe17 	ldw	r2,-8(fp)
   207c0:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   207c4:	e0bffe17 	ldw	r2,-8(fp)
   207c8:	10800317 	ldw	r2,12(r2)
   207cc:	10800044 	addi	r2,r2,1
   207d0:	10800fcc 	andi	r2,r2,63
   207d4:	e0bfff15 	stw	r2,-4(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   207d8:	e0bffe17 	ldw	r2,-8(fp)
   207dc:	10800017 	ldw	r2,0(r2)
   207e0:	10c00037 	ldwio	r3,0(r2)
   207e4:	e0bffe17 	ldw	r2,-8(fp)
   207e8:	10800317 	ldw	r2,12(r2)
   207ec:	1809883a 	mov	r4,r3
   207f0:	e0fffe17 	ldw	r3,-8(fp)
   207f4:	1885883a 	add	r2,r3,r2
   207f8:	11000705 	stb	r4,28(r2)

  sp->rx_end = next;
   207fc:	e0bffe17 	ldw	r2,-8(fp)
   20800:	e0ffff17 	ldw	r3,-4(fp)
   20804:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   20808:	e0bffe17 	ldw	r2,-8(fp)
   2080c:	10800317 	ldw	r2,12(r2)
   20810:	10800044 	addi	r2,r2,1
   20814:	10800fcc 	andi	r2,r2,63
   20818:	e0bfff15 	stw	r2,-4(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   2081c:	e0bffe17 	ldw	r2,-8(fp)
   20820:	10800217 	ldw	r2,8(r2)
   20824:	e0ffff17 	ldw	r3,-4(fp)
   20828:	18800e1e 	bne	r3,r2,20864 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   2082c:	e0bffe17 	ldw	r2,-8(fp)
   20830:	10c00117 	ldw	r3,4(r2)
   20834:	00bfdfc4 	movi	r2,-129
   20838:	1886703a 	and	r3,r3,r2
   2083c:	e0bffe17 	ldw	r2,-8(fp)
   20840:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   20844:	e0bffe17 	ldw	r2,-8(fp)
   20848:	10800017 	ldw	r2,0(r2)
   2084c:	10800304 	addi	r2,r2,12
   20850:	e0fffe17 	ldw	r3,-8(fp)
   20854:	18c00117 	ldw	r3,4(r3)
   20858:	10c00035 	stwio	r3,0(r2)
   2085c:	00000106 	br	20864 <altera_avalon_uart_rxirq+0xd0>
    return;
   20860:	0001883a 	nop
  }   
}
   20864:	e037883a 	mov	sp,fp
   20868:	df000017 	ldw	fp,0(sp)
   2086c:	dec00104 	addi	sp,sp,4
   20870:	f800283a 	ret

00020874 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   20874:	defffd04 	addi	sp,sp,-12
   20878:	df000215 	stw	fp,8(sp)
   2087c:	df000204 	addi	fp,sp,8
   20880:	e13fff15 	stw	r4,-4(fp)
   20884:	e17ffe15 	stw	r5,-8(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   20888:	e0bfff17 	ldw	r2,-4(fp)
   2088c:	10c00417 	ldw	r3,16(r2)
   20890:	e0bfff17 	ldw	r2,-4(fp)
   20894:	10800517 	ldw	r2,20(r2)
   20898:	18803126 	beq	r3,r2,20960 <altera_avalon_uart_txirq+0xec>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   2089c:	e0bfff17 	ldw	r2,-4(fp)
   208a0:	10800617 	ldw	r2,24(r2)
   208a4:	1080008c 	andi	r2,r2,2
   208a8:	10000326 	beq	r2,zero,208b8 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   208ac:	e0bffe17 	ldw	r2,-8(fp)
   208b0:	1082000c 	andi	r2,r2,2048
    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   208b4:	10001c26 	beq	r2,zero,20928 <altera_avalon_uart_txirq+0xb4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   208b8:	e0bfff17 	ldw	r2,-4(fp)
   208bc:	10800417 	ldw	r2,16(r2)
   208c0:	e0bfff17 	ldw	r2,-4(fp)
   208c4:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   208c8:	e0bfff17 	ldw	r2,-4(fp)
   208cc:	10800017 	ldw	r2,0(r2)
   208d0:	10800104 	addi	r2,r2,4
   208d4:	e0ffff17 	ldw	r3,-4(fp)
   208d8:	18c00417 	ldw	r3,16(r3)
   208dc:	e13fff17 	ldw	r4,-4(fp)
   208e0:	20c7883a 	add	r3,r4,r3
   208e4:	18c01703 	ldbu	r3,92(r3)
   208e8:	18c03fcc 	andi	r3,r3,255
   208ec:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   208f0:	e0bfff17 	ldw	r2,-4(fp)
   208f4:	10800417 	ldw	r2,16(r2)
   208f8:	10800044 	addi	r2,r2,1
   208fc:	e0ffff17 	ldw	r3,-4(fp)
   20900:	18800415 	stw	r2,16(r3)
   20904:	10c00fcc 	andi	r3,r2,63
   20908:	e0bfff17 	ldw	r2,-4(fp)
   2090c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   20910:	e0bfff17 	ldw	r2,-4(fp)
   20914:	10800117 	ldw	r2,4(r2)
   20918:	10c01014 	ori	r3,r2,64
   2091c:	e0bfff17 	ldw	r2,-4(fp)
   20920:	10c00115 	stw	r3,4(r2)
   20924:	00000e06 	br	20960 <altera_avalon_uart_txirq+0xec>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   20928:	e0bfff17 	ldw	r2,-4(fp)
   2092c:	10800017 	ldw	r2,0(r2)
   20930:	10800204 	addi	r2,r2,8
   20934:	10800037 	ldwio	r2,0(r2)
   20938:	e0bffe15 	stw	r2,-8(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   2093c:	e0bffe17 	ldw	r2,-8(fp)
   20940:	1082000c 	andi	r2,r2,2048
   20944:	1000061e 	bne	r2,zero,20960 <altera_avalon_uart_txirq+0xec>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   20948:	e0bfff17 	ldw	r2,-4(fp)
   2094c:	10c00117 	ldw	r3,4(r2)
   20950:	00bfefc4 	movi	r2,-65
   20954:	1886703a 	and	r3,r3,r2
   20958:	e0bfff17 	ldw	r2,-4(fp)
   2095c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   20960:	e0bfff17 	ldw	r2,-4(fp)
   20964:	10c00417 	ldw	r3,16(r2)
   20968:	e0bfff17 	ldw	r2,-4(fp)
   2096c:	10800517 	ldw	r2,20(r2)
   20970:	1880061e 	bne	r3,r2,2098c <altera_avalon_uart_txirq+0x118>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   20974:	e0bfff17 	ldw	r2,-4(fp)
   20978:	10c00117 	ldw	r3,4(r2)
   2097c:	00beefc4 	movi	r2,-1089
   20980:	1886703a 	and	r3,r3,r2
   20984:	e0bfff17 	ldw	r2,-4(fp)
   20988:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2098c:	e0bfff17 	ldw	r2,-4(fp)
   20990:	10800017 	ldw	r2,0(r2)
   20994:	10800304 	addi	r2,r2,12
   20998:	e0ffff17 	ldw	r3,-4(fp)
   2099c:	18c00117 	ldw	r3,4(r3)
   209a0:	10c00035 	stwio	r3,0(r2)
}
   209a4:	0001883a 	nop
   209a8:	e037883a 	mov	sp,fp
   209ac:	df000017 	ldw	fp,0(sp)
   209b0:	dec00104 	addi	sp,sp,4
   209b4:	f800283a 	ret

000209b8 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   209b8:	defffd04 	addi	sp,sp,-12
   209bc:	df000215 	stw	fp,8(sp)
   209c0:	df000204 	addi	fp,sp,8
   209c4:	e13fff15 	stw	r4,-4(fp)
   209c8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   209cc:	00000506 	br	209e4 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   209d0:	e0bffe17 	ldw	r2,-8(fp)
   209d4:	1090000c 	andi	r2,r2,16384
   209d8:	10000226 	beq	r2,zero,209e4 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   209dc:	00bffd44 	movi	r2,-11
   209e0:	00000606 	br	209fc <altera_avalon_uart_close+0x44>
  while (sp->tx_start != sp->tx_end) {
   209e4:	e0bfff17 	ldw	r2,-4(fp)
   209e8:	10c00417 	ldw	r3,16(r2)
   209ec:	e0bfff17 	ldw	r2,-4(fp)
   209f0:	10800517 	ldw	r2,20(r2)
   209f4:	18bff61e 	bne	r3,r2,209d0 <altera_avalon_uart_close+0x18>
    }
  }

  return 0;
   209f8:	0005883a 	mov	r2,zero
}
   209fc:	e037883a 	mov	sp,fp
   20a00:	df000017 	ldw	fp,0(sp)
   20a04:	dec00104 	addi	sp,sp,4
   20a08:	f800283a 	ret

00020a0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   20a0c:	defffe04 	addi	sp,sp,-8
   20a10:	dfc00115 	stw	ra,4(sp)
   20a14:	df000015 	stw	fp,0(sp)
   20a18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20a1c:	d0a00517 	ldw	r2,-32748(gp)
   20a20:	10000326 	beq	r2,zero,20a30 <alt_get_errno+0x24>
   20a24:	d0a00517 	ldw	r2,-32748(gp)
   20a28:	103ee83a 	callr	r2
   20a2c:	00000106 	br	20a34 <alt_get_errno+0x28>
   20a30:	d0a1bb04 	addi	r2,gp,-30996
}
   20a34:	e037883a 	mov	sp,fp
   20a38:	dfc00117 	ldw	ra,4(sp)
   20a3c:	df000017 	ldw	fp,0(sp)
   20a40:	dec00204 	addi	sp,sp,8
   20a44:	f800283a 	ret

00020a48 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   20a48:	defff204 	addi	sp,sp,-56
   20a4c:	dfc00d15 	stw	ra,52(sp)
   20a50:	df000c15 	stw	fp,48(sp)
   20a54:	df000c04 	addi	fp,sp,48
   20a58:	e13ff715 	stw	r4,-36(fp)
   20a5c:	e17ff615 	stw	r5,-40(fp)
   20a60:	e1bff515 	stw	r6,-44(fp)
   20a64:	e1fff415 	stw	r7,-48(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   20a68:	e03fffc5 	stb	zero,-1(fp)
  int             count = 0;
   20a6c:	e03ffe15 	stw	zero,-8(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   20a70:	e0bff417 	ldw	r2,-48(fp)
   20a74:	1090000c 	andi	r2,r2,16384
   20a78:	1005003a 	cmpeq	r2,r2,zero
   20a7c:	10803fcc 	andi	r2,r2,255
   20a80:	e0bffd15 	stw	r2,-12(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   20a84:	00001306 	br	20ad4 <altera_avalon_uart_read+0x8c>
    {
      count++;
   20a88:	e0bffe17 	ldw	r2,-8(fp)
   20a8c:	10800044 	addi	r2,r2,1
   20a90:	e0bffe15 	stw	r2,-8(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   20a94:	e0bff717 	ldw	r2,-36(fp)
   20a98:	10800217 	ldw	r2,8(r2)
   20a9c:	e0fff717 	ldw	r3,-36(fp)
   20aa0:	1885883a 	add	r2,r3,r2
   20aa4:	11000703 	ldbu	r4,28(r2)
   20aa8:	e0bff617 	ldw	r2,-40(fp)
   20aac:	10c00044 	addi	r3,r2,1
   20ab0:	e0fff615 	stw	r3,-40(fp)
   20ab4:	2007883a 	mov	r3,r4
   20ab8:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   20abc:	e0bff717 	ldw	r2,-36(fp)
   20ac0:	10800217 	ldw	r2,8(r2)
   20ac4:	10800044 	addi	r2,r2,1
   20ac8:	10c00fcc 	andi	r3,r2,63
   20acc:	e0bff717 	ldw	r2,-36(fp)
   20ad0:	10c00215 	stw	r3,8(r2)
    while ((count < len) && (sp->rx_start != sp->rx_end))
   20ad4:	e0fffe17 	ldw	r3,-8(fp)
   20ad8:	e0bff517 	ldw	r2,-44(fp)
   20adc:	1880050e 	bge	r3,r2,20af4 <altera_avalon_uart_read+0xac>
   20ae0:	e0bff717 	ldw	r2,-36(fp)
   20ae4:	10c00217 	ldw	r3,8(r2)
   20ae8:	e0bff717 	ldw	r2,-36(fp)
   20aec:	10800317 	ldw	r2,12(r2)
   20af0:	18bfe51e 	bne	r3,r2,20a88 <altera_avalon_uart_read+0x40>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   20af4:	e0bffe17 	ldw	r2,-8(fp)
   20af8:	1000271e 	bne	r2,zero,20b98 <altera_avalon_uart_read+0x150>
   20afc:	e0bff717 	ldw	r2,-36(fp)
   20b00:	10c00217 	ldw	r3,8(r2)
   20b04:	e0bff717 	ldw	r2,-36(fp)
   20b08:	10800317 	ldw	r2,12(r2)
   20b0c:	1880221e 	bne	r3,r2,20b98 <altera_avalon_uart_read+0x150>
    {
      if (!block)
   20b10:	e0bffd17 	ldw	r2,-12(fp)
   20b14:	1000071e 	bne	r2,zero,20b34 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   20b18:	0020a0c0 	call	20a0c <alt_get_errno>
   20b1c:	1007883a 	mov	r3,r2
   20b20:	008002c4 	movi	r2,11
   20b24:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   20b28:	00800044 	movi	r2,1
   20b2c:	e0bfffc5 	stb	r2,-1(fp)
        break;
   20b30:	00001d06 	br	20ba8 <altera_avalon_uart_read+0x160>
  NIOS2_READ_STATUS (context);
   20b34:	0005303a 	rdctl	r2,status
   20b38:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20b3c:	e0fffa17 	ldw	r3,-24(fp)
   20b40:	00bfff84 	movi	r2,-2
   20b44:	1884703a 	and	r2,r3,r2
   20b48:	1001703a 	wrctl	status,r2
  return context;
   20b4c:	e0bffa17 	ldw	r2,-24(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   20b50:	e0bffc15 	stw	r2,-16(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   20b54:	e0bff717 	ldw	r2,-36(fp)
   20b58:	10800117 	ldw	r2,4(r2)
   20b5c:	10c02014 	ori	r3,r2,128
   20b60:	e0bff717 	ldw	r2,-36(fp)
   20b64:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   20b68:	e0bff717 	ldw	r2,-36(fp)
   20b6c:	10800017 	ldw	r2,0(r2)
   20b70:	10800304 	addi	r2,r2,12
   20b74:	e0fff717 	ldw	r3,-36(fp)
   20b78:	18c00117 	ldw	r3,4(r3)
   20b7c:	10c00035 	stwio	r3,0(r2)
   20b80:	e0bffc17 	ldw	r2,-16(fp)
   20b84:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   20b88:	e0bffb17 	ldw	r2,-20(fp)
   20b8c:	1001703a 	wrctl	status,r2
}
   20b90:	0001883a 	nop
   20b94:	0001883a 	nop
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   20b98:	e0bffe17 	ldw	r2,-8(fp)
   20b9c:	1000021e 	bne	r2,zero,20ba8 <altera_avalon_uart_read+0x160>
   20ba0:	e0bff517 	ldw	r2,-44(fp)
   20ba4:	103fcb1e 	bne	r2,zero,20ad4 <altera_avalon_uart_read+0x8c>
  NIOS2_READ_STATUS (context);
   20ba8:	0005303a 	rdctl	r2,status
   20bac:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20bb0:	e0fff817 	ldw	r3,-32(fp)
   20bb4:	00bfff84 	movi	r2,-2
   20bb8:	1884703a 	and	r2,r3,r2
   20bbc:	1001703a 	wrctl	status,r2
  return context;
   20bc0:	e0bff817 	ldw	r2,-32(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   20bc4:	e0bffc15 	stw	r2,-16(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   20bc8:	e0bff717 	ldw	r2,-36(fp)
   20bcc:	10800117 	ldw	r2,4(r2)
   20bd0:	10c02014 	ori	r3,r2,128
   20bd4:	e0bff717 	ldw	r2,-36(fp)
   20bd8:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   20bdc:	e0bff717 	ldw	r2,-36(fp)
   20be0:	10800017 	ldw	r2,0(r2)
   20be4:	10800304 	addi	r2,r2,12
   20be8:	e0fff717 	ldw	r3,-36(fp)
   20bec:	18c00117 	ldw	r3,4(r3)
   20bf0:	10c00035 	stwio	r3,0(r2)
   20bf4:	e0bffc17 	ldw	r2,-16(fp)
   20bf8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   20bfc:	e0bff917 	ldw	r2,-28(fp)
   20c00:	1001703a 	wrctl	status,r2
}
   20c04:	0001883a 	nop
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   20c08:	e0bfffc3 	ldbu	r2,-1(fp)
   20c0c:	10000226 	beq	r2,zero,20c18 <altera_avalon_uart_read+0x1d0>
    return -EWOULDBLOCK;
   20c10:	00bffd44 	movi	r2,-11
   20c14:	00000106 	br	20c1c <altera_avalon_uart_read+0x1d4>
  }
  else {
    return count;
   20c18:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   20c1c:	e037883a 	mov	sp,fp
   20c20:	dfc00117 	ldw	ra,4(sp)
   20c24:	df000017 	ldw	fp,0(sp)
   20c28:	dec00204 	addi	sp,sp,8
   20c2c:	f800283a 	ret

00020c30 <alt_get_errno>:
{
   20c30:	defffe04 	addi	sp,sp,-8
   20c34:	dfc00115 	stw	ra,4(sp)
   20c38:	df000015 	stw	fp,0(sp)
   20c3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20c40:	d0a00517 	ldw	r2,-32748(gp)
   20c44:	10000326 	beq	r2,zero,20c54 <alt_get_errno+0x24>
   20c48:	d0a00517 	ldw	r2,-32748(gp)
   20c4c:	103ee83a 	callr	r2
   20c50:	00000106 	br	20c58 <alt_get_errno+0x28>
   20c54:	d0a1bb04 	addi	r2,gp,-30996
}
   20c58:	e037883a 	mov	sp,fp
   20c5c:	dfc00117 	ldw	ra,4(sp)
   20c60:	df000017 	ldw	fp,0(sp)
   20c64:	dec00204 	addi	sp,sp,8
   20c68:	f800283a 	ret

00020c6c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   20c6c:	defff204 	addi	sp,sp,-56
   20c70:	dfc00d15 	stw	ra,52(sp)
   20c74:	df000c15 	stw	fp,48(sp)
   20c78:	df000c04 	addi	fp,sp,48
   20c7c:	e13ff715 	stw	r4,-36(fp)
   20c80:	e17ff615 	stw	r5,-40(fp)
   20c84:	e1bff515 	stw	r6,-44(fp)
   20c88:	e1fff415 	stw	r7,-48(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   20c8c:	e0bff517 	ldw	r2,-44(fp)
   20c90:	e0bfff15 	stw	r2,-4(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   20c94:	e0bff417 	ldw	r2,-48(fp)
   20c98:	1090000c 	andi	r2,r2,16384
   20c9c:	e0bffe15 	stw	r2,-8(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   20ca0:	00003d06 	br	20d98 <altera_avalon_uart_write+0x12c>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   20ca4:	e0bff717 	ldw	r2,-36(fp)
   20ca8:	10800517 	ldw	r2,20(r2)
   20cac:	10800044 	addi	r2,r2,1
   20cb0:	10800fcc 	andi	r2,r2,63
   20cb4:	e0bffd15 	stw	r2,-12(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   20cb8:	e0bff717 	ldw	r2,-36(fp)
   20cbc:	10800417 	ldw	r2,16(r2)
   20cc0:	e0fffd17 	ldw	r3,-12(fp)
   20cc4:	1880241e 	bne	r3,r2,20d58 <altera_avalon_uart_write+0xec>
    {
      if (no_block)
   20cc8:	e0bffe17 	ldw	r2,-8(fp)
   20ccc:	10000526 	beq	r2,zero,20ce4 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   20cd0:	0020c300 	call	20c30 <alt_get_errno>
   20cd4:	1007883a 	mov	r3,r2
   20cd8:	008002c4 	movi	r2,11
   20cdc:	18800015 	stw	r2,0(r3)
        break;
   20ce0:	00002f06 	br	20da0 <altera_avalon_uart_write+0x134>
  NIOS2_READ_STATUS (context);
   20ce4:	0005303a 	rdctl	r2,status
   20ce8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20cec:	e0fffa17 	ldw	r3,-24(fp)
   20cf0:	00bfff84 	movi	r2,-2
   20cf4:	1884703a 	and	r2,r3,r2
   20cf8:	1001703a 	wrctl	status,r2
  return context;
   20cfc:	e0bffa17 	ldw	r2,-24(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   20d00:	e0bffc15 	stw	r2,-16(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   20d04:	e0bff717 	ldw	r2,-36(fp)
   20d08:	10800117 	ldw	r2,4(r2)
   20d0c:	10c11014 	ori	r3,r2,1088
   20d10:	e0bff717 	ldw	r2,-36(fp)
   20d14:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   20d18:	e0bff717 	ldw	r2,-36(fp)
   20d1c:	10800017 	ldw	r2,0(r2)
   20d20:	10800304 	addi	r2,r2,12
   20d24:	e0fff717 	ldw	r3,-36(fp)
   20d28:	18c00117 	ldw	r3,4(r3)
   20d2c:	10c00035 	stwio	r3,0(r2)
   20d30:	e0bffc17 	ldw	r2,-16(fp)
   20d34:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   20d38:	e0bffb17 	ldw	r2,-20(fp)
   20d3c:	1001703a 	wrctl	status,r2
}
   20d40:	0001883a 	nop
   20d44:	0001883a 	nop
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   20d48:	e0bff717 	ldw	r2,-36(fp)
   20d4c:	10800417 	ldw	r2,16(r2)
   20d50:	e0fffd17 	ldw	r3,-12(fp)
   20d54:	18bffb26 	beq	r3,r2,20d44 <altera_avalon_uart_write+0xd8>
      }
    }

    count--;
   20d58:	e0bfff17 	ldw	r2,-4(fp)
   20d5c:	10bfffc4 	addi	r2,r2,-1
   20d60:	e0bfff15 	stw	r2,-4(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   20d64:	e0bff617 	ldw	r2,-40(fp)
   20d68:	10c00044 	addi	r3,r2,1
   20d6c:	e0fff615 	stw	r3,-40(fp)
   20d70:	10c00003 	ldbu	r3,0(r2)
   20d74:	e0bff717 	ldw	r2,-36(fp)
   20d78:	10800517 	ldw	r2,20(r2)
   20d7c:	1809883a 	mov	r4,r3
   20d80:	e0fff717 	ldw	r3,-36(fp)
   20d84:	1885883a 	add	r2,r3,r2
   20d88:	11001705 	stb	r4,92(r2)
    sp->tx_end = next;
   20d8c:	e0bff717 	ldw	r2,-36(fp)
   20d90:	e0fffd17 	ldw	r3,-12(fp)
   20d94:	10c00515 	stw	r3,20(r2)
  while (count)
   20d98:	e0bfff17 	ldw	r2,-4(fp)
   20d9c:	103fc11e 	bne	r2,zero,20ca4 <altera_avalon_uart_write+0x38>
  NIOS2_READ_STATUS (context);
   20da0:	0005303a 	rdctl	r2,status
   20da4:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20da8:	e0fff817 	ldw	r3,-32(fp)
   20dac:	00bfff84 	movi	r2,-2
   20db0:	1884703a 	and	r2,r3,r2
   20db4:	1001703a 	wrctl	status,r2
  return context;
   20db8:	e0bff817 	ldw	r2,-32(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   20dbc:	e0bffc15 	stw	r2,-16(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   20dc0:	e0bff717 	ldw	r2,-36(fp)
   20dc4:	10800117 	ldw	r2,4(r2)
   20dc8:	10c11014 	ori	r3,r2,1088
   20dcc:	e0bff717 	ldw	r2,-36(fp)
   20dd0:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   20dd4:	e0bff717 	ldw	r2,-36(fp)
   20dd8:	10800017 	ldw	r2,0(r2)
   20ddc:	10800304 	addi	r2,r2,12
   20de0:	e0fff717 	ldw	r3,-36(fp)
   20de4:	18c00117 	ldw	r3,4(r3)
   20de8:	10c00035 	stwio	r3,0(r2)
   20dec:	e0bffc17 	ldw	r2,-16(fp)
   20df0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   20df4:	e0bff917 	ldw	r2,-28(fp)
   20df8:	1001703a 	wrctl	status,r2
}
   20dfc:	0001883a 	nop
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   20e00:	e0fff517 	ldw	r3,-44(fp)
   20e04:	e0bfff17 	ldw	r2,-4(fp)
   20e08:	1885c83a 	sub	r2,r3,r2
}
   20e0c:	e037883a 	mov	sp,fp
   20e10:	dfc00117 	ldw	ra,4(sp)
   20e14:	df000017 	ldw	fp,0(sp)
   20e18:	dec00204 	addi	sp,sp,8
   20e1c:	f800283a 	ret

00020e20 <alt_get_errno>:
{
   20e20:	defffe04 	addi	sp,sp,-8
   20e24:	dfc00115 	stw	ra,4(sp)
   20e28:	df000015 	stw	fp,0(sp)
   20e2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20e30:	d0a00517 	ldw	r2,-32748(gp)
   20e34:	10000326 	beq	r2,zero,20e44 <alt_get_errno+0x24>
   20e38:	d0a00517 	ldw	r2,-32748(gp)
   20e3c:	103ee83a 	callr	r2
   20e40:	00000106 	br	20e48 <alt_get_errno+0x28>
   20e44:	d0a1bb04 	addi	r2,gp,-30996
}
   20e48:	e037883a 	mov	sp,fp
   20e4c:	dfc00117 	ldw	ra,4(sp)
   20e50:	df000017 	ldw	fp,0(sp)
   20e54:	dec00204 	addi	sp,sp,8
   20e58:	f800283a 	ret

00020e5c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   20e5c:	defffb04 	addi	sp,sp,-20
   20e60:	dfc00415 	stw	ra,16(sp)
   20e64:	df000315 	stw	fp,12(sp)
   20e68:	df000304 	addi	fp,sp,12
   20e6c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   20e70:	e0bffd17 	ldw	r2,-12(fp)
   20e74:	10000916 	blt	r2,zero,20e9c <close+0x40>
   20e78:	e0fffd17 	ldw	r3,-12(fp)
   20e7c:	1805883a 	mov	r2,r3
   20e80:	1085883a 	add	r2,r2,r2
   20e84:	10c5883a 	add	r2,r2,r3
   20e88:	100490ba 	slli	r2,r2,2
   20e8c:	00c000b4 	movhi	r3,2
   20e90:	18c7d704 	addi	r3,r3,8028
   20e94:	10c5883a 	add	r2,r2,r3
   20e98:	00000106 	br	20ea0 <close+0x44>
   20e9c:	0005883a 	mov	r2,zero
   20ea0:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   20ea4:	e0bfff17 	ldw	r2,-4(fp)
   20ea8:	10001926 	beq	r2,zero,20f10 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   20eac:	e0bfff17 	ldw	r2,-4(fp)
   20eb0:	10800017 	ldw	r2,0(r2)
   20eb4:	10800417 	ldw	r2,16(r2)
   20eb8:	10000626 	beq	r2,zero,20ed4 <close+0x78>
   20ebc:	e0bfff17 	ldw	r2,-4(fp)
   20ec0:	10800017 	ldw	r2,0(r2)
   20ec4:	10800417 	ldw	r2,16(r2)
   20ec8:	e13fff17 	ldw	r4,-4(fp)
   20ecc:	103ee83a 	callr	r2
   20ed0:	00000106 	br	20ed8 <close+0x7c>
   20ed4:	0005883a 	mov	r2,zero
   20ed8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   20edc:	e13ffd17 	ldw	r4,-12(fp)
   20ee0:	00217b00 	call	217b0 <alt_release_fd>
    if (rval < 0)
   20ee4:	e0bffe17 	ldw	r2,-8(fp)
   20ee8:	1000070e 	bge	r2,zero,20f08 <close+0xac>
    {
      ALT_ERRNO = -rval;
   20eec:	0020e200 	call	20e20 <alt_get_errno>
   20ef0:	1007883a 	mov	r3,r2
   20ef4:	e0bffe17 	ldw	r2,-8(fp)
   20ef8:	0085c83a 	sub	r2,zero,r2
   20efc:	18800015 	stw	r2,0(r3)
      return -1;
   20f00:	00bfffc4 	movi	r2,-1
   20f04:	00000706 	br	20f24 <close+0xc8>
    }
    return 0;
   20f08:	0005883a 	mov	r2,zero
   20f0c:	00000506 	br	20f24 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   20f10:	0020e200 	call	20e20 <alt_get_errno>
   20f14:	1007883a 	mov	r3,r2
   20f18:	00801444 	movi	r2,81
   20f1c:	18800015 	stw	r2,0(r3)
    return -1;
   20f20:	00bfffc4 	movi	r2,-1
  }
}
   20f24:	e037883a 	mov	sp,fp
   20f28:	dfc00117 	ldw	ra,4(sp)
   20f2c:	df000017 	ldw	fp,0(sp)
   20f30:	dec00204 	addi	sp,sp,8
   20f34:	f800283a 	ret

00020f38 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   20f38:	deffff04 	addi	sp,sp,-4
   20f3c:	df000015 	stw	fp,0(sp)
   20f40:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   20f44:	0001883a 	nop
   20f48:	e037883a 	mov	sp,fp
   20f4c:	df000017 	ldw	fp,0(sp)
   20f50:	dec00104 	addi	sp,sp,4
   20f54:	f800283a 	ret

00020f58 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   20f58:	defffc04 	addi	sp,sp,-16
   20f5c:	df000315 	stw	fp,12(sp)
   20f60:	df000304 	addi	fp,sp,12
   20f64:	e13fff15 	stw	r4,-4(fp)
   20f68:	e17ffe15 	stw	r5,-8(fp)
   20f6c:	e1bffd15 	stw	r6,-12(fp)
  return len;
   20f70:	e0bffd17 	ldw	r2,-12(fp)
}
   20f74:	e037883a 	mov	sp,fp
   20f78:	df000017 	ldw	fp,0(sp)
   20f7c:	dec00104 	addi	sp,sp,4
   20f80:	f800283a 	ret

00020f84 <alt_get_errno>:
{
   20f84:	defffe04 	addi	sp,sp,-8
   20f88:	dfc00115 	stw	ra,4(sp)
   20f8c:	df000015 	stw	fp,0(sp)
   20f90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20f94:	d0a00517 	ldw	r2,-32748(gp)
   20f98:	10000326 	beq	r2,zero,20fa8 <alt_get_errno+0x24>
   20f9c:	d0a00517 	ldw	r2,-32748(gp)
   20fa0:	103ee83a 	callr	r2
   20fa4:	00000106 	br	20fac <alt_get_errno+0x28>
   20fa8:	d0a1bb04 	addi	r2,gp,-30996
}
   20fac:	e037883a 	mov	sp,fp
   20fb0:	dfc00117 	ldw	ra,4(sp)
   20fb4:	df000017 	ldw	fp,0(sp)
   20fb8:	dec00204 	addi	sp,sp,8
   20fbc:	f800283a 	ret

00020fc0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   20fc0:	defffa04 	addi	sp,sp,-24
   20fc4:	dfc00515 	stw	ra,20(sp)
   20fc8:	df000415 	stw	fp,16(sp)
   20fcc:	df000404 	addi	fp,sp,16
   20fd0:	e13ffd15 	stw	r4,-12(fp)
   20fd4:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   20fd8:	e0bffd17 	ldw	r2,-12(fp)
   20fdc:	10000326 	beq	r2,zero,20fec <alt_dev_llist_insert+0x2c>
   20fe0:	e0bffd17 	ldw	r2,-12(fp)
   20fe4:	10800217 	ldw	r2,8(r2)
   20fe8:	1000061e 	bne	r2,zero,21004 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   20fec:	0020f840 	call	20f84 <alt_get_errno>
   20ff0:	1007883a 	mov	r3,r2
   20ff4:	00800584 	movi	r2,22
   20ff8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   20ffc:	00bffa84 	movi	r2,-22
   21000:	00001406 	br	21054 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   21004:	e0bffd17 	ldw	r2,-12(fp)
   21008:	e0fffc17 	ldw	r3,-16(fp)
   2100c:	e0ffff15 	stw	r3,-4(fp)
   21010:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   21014:	e0bffe17 	ldw	r2,-8(fp)
   21018:	e0ffff17 	ldw	r3,-4(fp)
   2101c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   21020:	e0bfff17 	ldw	r2,-4(fp)
   21024:	10c00017 	ldw	r3,0(r2)
   21028:	e0bffe17 	ldw	r2,-8(fp)
   2102c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   21030:	e0bfff17 	ldw	r2,-4(fp)
   21034:	10800017 	ldw	r2,0(r2)
   21038:	e0fffe17 	ldw	r3,-8(fp)
   2103c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   21040:	e0bfff17 	ldw	r2,-4(fp)
   21044:	e0fffe17 	ldw	r3,-8(fp)
   21048:	10c00015 	stw	r3,0(r2)
}
   2104c:	0001883a 	nop

  return 0;  
   21050:	0005883a 	mov	r2,zero
}
   21054:	e037883a 	mov	sp,fp
   21058:	dfc00117 	ldw	ra,4(sp)
   2105c:	df000017 	ldw	fp,0(sp)
   21060:	dec00204 	addi	sp,sp,8
   21064:	f800283a 	ret

00021068 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   21068:	defffd04 	addi	sp,sp,-12
   2106c:	dfc00215 	stw	ra,8(sp)
   21070:	df000115 	stw	fp,4(sp)
   21074:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   21078:	008000b4 	movhi	r2,2
   2107c:	10879204 	addi	r2,r2,7752
   21080:	e0bfff15 	stw	r2,-4(fp)
   21084:	00000606 	br	210a0 <_do_ctors+0x38>
        (*ctor) (); 
   21088:	e0bfff17 	ldw	r2,-4(fp)
   2108c:	10800017 	ldw	r2,0(r2)
   21090:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   21094:	e0bfff17 	ldw	r2,-4(fp)
   21098:	10bfff04 	addi	r2,r2,-4
   2109c:	e0bfff15 	stw	r2,-4(fp)
   210a0:	e0ffff17 	ldw	r3,-4(fp)
   210a4:	008000b4 	movhi	r2,2
   210a8:	10879304 	addi	r2,r2,7756
   210ac:	18bff62e 	bgeu	r3,r2,21088 <_do_ctors+0x20>
}
   210b0:	0001883a 	nop
   210b4:	0001883a 	nop
   210b8:	e037883a 	mov	sp,fp
   210bc:	dfc00117 	ldw	ra,4(sp)
   210c0:	df000017 	ldw	fp,0(sp)
   210c4:	dec00204 	addi	sp,sp,8
   210c8:	f800283a 	ret

000210cc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   210cc:	defffd04 	addi	sp,sp,-12
   210d0:	dfc00215 	stw	ra,8(sp)
   210d4:	df000115 	stw	fp,4(sp)
   210d8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   210dc:	008000b4 	movhi	r2,2
   210e0:	10879204 	addi	r2,r2,7752
   210e4:	e0bfff15 	stw	r2,-4(fp)
   210e8:	00000606 	br	21104 <_do_dtors+0x38>
        (*dtor) (); 
   210ec:	e0bfff17 	ldw	r2,-4(fp)
   210f0:	10800017 	ldw	r2,0(r2)
   210f4:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   210f8:	e0bfff17 	ldw	r2,-4(fp)
   210fc:	10bfff04 	addi	r2,r2,-4
   21100:	e0bfff15 	stw	r2,-4(fp)
   21104:	e0ffff17 	ldw	r3,-4(fp)
   21108:	008000b4 	movhi	r2,2
   2110c:	10879304 	addi	r2,r2,7756
   21110:	18bff62e 	bgeu	r3,r2,210ec <_do_dtors+0x20>
}
   21114:	0001883a 	nop
   21118:	0001883a 	nop
   2111c:	e037883a 	mov	sp,fp
   21120:	dfc00117 	ldw	ra,4(sp)
   21124:	df000017 	ldw	fp,0(sp)
   21128:	dec00204 	addi	sp,sp,8
   2112c:	f800283a 	ret

00021130 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   21130:	deffff04 	addi	sp,sp,-4
   21134:	df000015 	stw	fp,0(sp)
   21138:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   2113c:	0001883a 	nop
   21140:	e037883a 	mov	sp,fp
   21144:	df000017 	ldw	fp,0(sp)
   21148:	dec00104 	addi	sp,sp,4
   2114c:	f800283a 	ret

00021150 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   21150:	defff904 	addi	sp,sp,-28
   21154:	dfc00615 	stw	ra,24(sp)
   21158:	df000515 	stw	fp,20(sp)
   2115c:	df000504 	addi	fp,sp,20
   21160:	e13fff15 	stw	r4,-4(fp)
   21164:	e17ffe15 	stw	r5,-8(fp)
   21168:	e1bffd15 	stw	r6,-12(fp)
   2116c:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   21170:	e0800217 	ldw	r2,8(fp)
   21174:	d8800015 	stw	r2,0(sp)
   21178:	e1fffc17 	ldw	r7,-16(fp)
   2117c:	e1bffd17 	ldw	r6,-12(fp)
   21180:	e17ffe17 	ldw	r5,-8(fp)
   21184:	e13fff17 	ldw	r4,-4(fp)
   21188:	00213000 	call	21300 <alt_iic_isr_register>
}  
   2118c:	e037883a 	mov	sp,fp
   21190:	dfc00117 	ldw	ra,4(sp)
   21194:	df000017 	ldw	fp,0(sp)
   21198:	dec00204 	addi	sp,sp,8
   2119c:	f800283a 	ret

000211a0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   211a0:	defff904 	addi	sp,sp,-28
   211a4:	df000615 	stw	fp,24(sp)
   211a8:	df000604 	addi	fp,sp,24
   211ac:	e13ffb15 	stw	r4,-20(fp)
   211b0:	e17ffa15 	stw	r5,-24(fp)
   211b4:	e0bffa17 	ldw	r2,-24(fp)
   211b8:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   211bc:	0005303a 	rdctl	r2,status
   211c0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   211c4:	e0fffe17 	ldw	r3,-8(fp)
   211c8:	00bfff84 	movi	r2,-2
   211cc:	1884703a 	and	r2,r3,r2
   211d0:	1001703a 	wrctl	status,r2
  return context;
   211d4:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   211d8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   211dc:	00c00044 	movi	r3,1
   211e0:	e0bfff17 	ldw	r2,-4(fp)
   211e4:	1884983a 	sll	r2,r3,r2
   211e8:	1007883a 	mov	r3,r2
   211ec:	d0a1b917 	ldw	r2,-31004(gp)
   211f0:	1884b03a 	or	r2,r3,r2
   211f4:	d0a1b915 	stw	r2,-31004(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   211f8:	d0a1b917 	ldw	r2,-31004(gp)
   211fc:	100170fa 	wrctl	ienable,r2
   21200:	e0bffd17 	ldw	r2,-12(fp)
   21204:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   21208:	e0bffc17 	ldw	r2,-16(fp)
   2120c:	1001703a 	wrctl	status,r2
}
   21210:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   21214:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   21218:	e037883a 	mov	sp,fp
   2121c:	df000017 	ldw	fp,0(sp)
   21220:	dec00104 	addi	sp,sp,4
   21224:	f800283a 	ret

00021228 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   21228:	defff904 	addi	sp,sp,-28
   2122c:	df000615 	stw	fp,24(sp)
   21230:	df000604 	addi	fp,sp,24
   21234:	e13ffb15 	stw	r4,-20(fp)
   21238:	e17ffa15 	stw	r5,-24(fp)
   2123c:	e0bffa17 	ldw	r2,-24(fp)
   21240:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   21244:	0005303a 	rdctl	r2,status
   21248:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2124c:	e0fffe17 	ldw	r3,-8(fp)
   21250:	00bfff84 	movi	r2,-2
   21254:	1884703a 	and	r2,r3,r2
   21258:	1001703a 	wrctl	status,r2
  return context;
   2125c:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
   21260:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
   21264:	00c00044 	movi	r3,1
   21268:	e0bfff17 	ldw	r2,-4(fp)
   2126c:	1884983a 	sll	r2,r3,r2
   21270:	0084303a 	nor	r2,zero,r2
   21274:	1007883a 	mov	r3,r2
   21278:	d0a1b917 	ldw	r2,-31004(gp)
   2127c:	1884703a 	and	r2,r3,r2
   21280:	d0a1b915 	stw	r2,-31004(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   21284:	d0a1b917 	ldw	r2,-31004(gp)
   21288:	100170fa 	wrctl	ienable,r2
   2128c:	e0bffd17 	ldw	r2,-12(fp)
   21290:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   21294:	e0bffc17 	ldw	r2,-16(fp)
   21298:	1001703a 	wrctl	status,r2
}
   2129c:	0001883a 	nop
  return 0;
   212a0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   212a4:	e037883a 	mov	sp,fp
   212a8:	df000017 	ldw	fp,0(sp)
   212ac:	dec00104 	addi	sp,sp,4
   212b0:	f800283a 	ret

000212b4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   212b4:	defffc04 	addi	sp,sp,-16
   212b8:	df000315 	stw	fp,12(sp)
   212bc:	df000304 	addi	fp,sp,12
   212c0:	e13ffe15 	stw	r4,-8(fp)
   212c4:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   212c8:	000530fa 	rdctl	r2,ienable
   212cc:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   212d0:	00c00044 	movi	r3,1
   212d4:	e0bffd17 	ldw	r2,-12(fp)
   212d8:	1884983a 	sll	r2,r3,r2
   212dc:	1007883a 	mov	r3,r2
   212e0:	e0bfff17 	ldw	r2,-4(fp)
   212e4:	1884703a 	and	r2,r3,r2
   212e8:	1004c03a 	cmpne	r2,r2,zero
   212ec:	10803fcc 	andi	r2,r2,255
}
   212f0:	e037883a 	mov	sp,fp
   212f4:	df000017 	ldw	fp,0(sp)
   212f8:	dec00104 	addi	sp,sp,4
   212fc:	f800283a 	ret

00021300 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   21300:	defff504 	addi	sp,sp,-44
   21304:	dfc00a15 	stw	ra,40(sp)
   21308:	df000915 	stw	fp,36(sp)
   2130c:	df000904 	addi	fp,sp,36
   21310:	e13ffa15 	stw	r4,-24(fp)
   21314:	e17ff915 	stw	r5,-28(fp)
   21318:	e1bff815 	stw	r6,-32(fp)
   2131c:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
   21320:	00bffa84 	movi	r2,-22
   21324:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   21328:	e0bff917 	ldw	r2,-28(fp)
   2132c:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   21330:	e0bffe17 	ldw	r2,-8(fp)
   21334:	10800808 	cmpgei	r2,r2,32
   21338:	1000251e 	bne	r2,zero,213d0 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
   2133c:	0005303a 	rdctl	r2,status
   21340:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21344:	e0fffc17 	ldw	r3,-16(fp)
   21348:	00bfff84 	movi	r2,-2
   2134c:	1884703a 	and	r2,r3,r2
   21350:	1001703a 	wrctl	status,r2
  return context;
   21354:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   21358:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
   2135c:	e0bffe17 	ldw	r2,-8(fp)
   21360:	100890fa 	slli	r4,r2,3
   21364:	e0fff817 	ldw	r3,-32(fp)
   21368:	008000b4 	movhi	r2,2
   2136c:	2085883a 	add	r2,r4,r2
   21370:	10cafc15 	stw	r3,11248(r2)
    alt_irq[id].context = isr_context;
   21374:	e0bffe17 	ldw	r2,-8(fp)
   21378:	100890fa 	slli	r4,r2,3
   2137c:	e0fff717 	ldw	r3,-36(fp)
   21380:	008000b4 	movhi	r2,2
   21384:	2085883a 	add	r2,r4,r2
   21388:	10cafd15 	stw	r3,11252(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   2138c:	e0bff817 	ldw	r2,-32(fp)
   21390:	10000526 	beq	r2,zero,213a8 <alt_iic_isr_register+0xa8>
   21394:	e0bffe17 	ldw	r2,-8(fp)
   21398:	100b883a 	mov	r5,r2
   2139c:	e13ffa17 	ldw	r4,-24(fp)
   213a0:	00211a00 	call	211a0 <alt_ic_irq_enable>
   213a4:	00000406 	br	213b8 <alt_iic_isr_register+0xb8>
   213a8:	e0bffe17 	ldw	r2,-8(fp)
   213ac:	100b883a 	mov	r5,r2
   213b0:	e13ffa17 	ldw	r4,-24(fp)
   213b4:	00212280 	call	21228 <alt_ic_irq_disable>
   213b8:	e0bfff15 	stw	r2,-4(fp)
   213bc:	e0bffd17 	ldw	r2,-12(fp)
   213c0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   213c4:	e0bffb17 	ldw	r2,-20(fp)
   213c8:	1001703a 	wrctl	status,r2
}
   213cc:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
   213d0:	e0bfff17 	ldw	r2,-4(fp)
}
   213d4:	e037883a 	mov	sp,fp
   213d8:	dfc00117 	ldw	ra,4(sp)
   213dc:	df000017 	ldw	fp,0(sp)
   213e0:	dec00204 	addi	sp,sp,8
   213e4:	f800283a 	ret

000213e8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   213e8:	defff904 	addi	sp,sp,-28
   213ec:	dfc00615 	stw	ra,24(sp)
   213f0:	df000515 	stw	fp,20(sp)
   213f4:	df000504 	addi	fp,sp,20
   213f8:	e13ffe15 	stw	r4,-8(fp)
   213fc:	e17ffd15 	stw	r5,-12(fp)
   21400:	e1bffc15 	stw	r6,-16(fp)
   21404:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   21408:	e1bffb17 	ldw	r6,-20(fp)
   2140c:	e17ffc17 	ldw	r5,-16(fp)
   21410:	e13ffd17 	ldw	r4,-12(fp)
   21414:	00216500 	call	21650 <open>
   21418:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   2141c:	e0bfff17 	ldw	r2,-4(fp)
   21420:	10002016 	blt	r2,zero,214a4 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
   21424:	e0ffff17 	ldw	r3,-4(fp)
   21428:	1805883a 	mov	r2,r3
   2142c:	1085883a 	add	r2,r2,r2
   21430:	10c5883a 	add	r2,r2,r3
   21434:	100490ba 	slli	r2,r2,2
   21438:	00c000b4 	movhi	r3,2
   2143c:	10c7883a 	add	r3,r2,r3
   21440:	18c7d717 	ldw	r3,8028(r3)
   21444:	e0bffe17 	ldw	r2,-8(fp)
   21448:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   2144c:	e0ffff17 	ldw	r3,-4(fp)
   21450:	1805883a 	mov	r2,r3
   21454:	1085883a 	add	r2,r2,r2
   21458:	10c5883a 	add	r2,r2,r3
   2145c:	100490ba 	slli	r2,r2,2
   21460:	00c000b4 	movhi	r3,2
   21464:	10c7883a 	add	r3,r2,r3
   21468:	18c7d817 	ldw	r3,8032(r3)
   2146c:	e0bffe17 	ldw	r2,-8(fp)
   21470:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   21474:	e0ffff17 	ldw	r3,-4(fp)
   21478:	1805883a 	mov	r2,r3
   2147c:	1085883a 	add	r2,r2,r2
   21480:	10c5883a 	add	r2,r2,r3
   21484:	100490ba 	slli	r2,r2,2
   21488:	00c000b4 	movhi	r3,2
   2148c:	10c7883a 	add	r3,r2,r3
   21490:	18c7d917 	ldw	r3,8036(r3)
   21494:	e0bffe17 	ldw	r2,-8(fp)
   21498:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   2149c:	e13fff17 	ldw	r4,-4(fp)
   214a0:	00217b00 	call	217b0 <alt_release_fd>
  }
} 
   214a4:	0001883a 	nop
   214a8:	e037883a 	mov	sp,fp
   214ac:	dfc00117 	ldw	ra,4(sp)
   214b0:	df000017 	ldw	fp,0(sp)
   214b4:	dec00204 	addi	sp,sp,8
   214b8:	f800283a 	ret

000214bc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   214bc:	defffb04 	addi	sp,sp,-20
   214c0:	dfc00415 	stw	ra,16(sp)
   214c4:	df000315 	stw	fp,12(sp)
   214c8:	df000304 	addi	fp,sp,12
   214cc:	e13fff15 	stw	r4,-4(fp)
   214d0:	e17ffe15 	stw	r5,-8(fp)
   214d4:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   214d8:	01c07fc4 	movi	r7,511
   214dc:	01800044 	movi	r6,1
   214e0:	e17fff17 	ldw	r5,-4(fp)
   214e4:	010000b4 	movhi	r4,2
   214e8:	2107da04 	addi	r4,r4,8040
   214ec:	00213e80 	call	213e8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   214f0:	01c07fc4 	movi	r7,511
   214f4:	000d883a 	mov	r6,zero
   214f8:	e17ffe17 	ldw	r5,-8(fp)
   214fc:	010000b4 	movhi	r4,2
   21500:	2107d704 	addi	r4,r4,8028
   21504:	00213e80 	call	213e8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   21508:	01c07fc4 	movi	r7,511
   2150c:	01800044 	movi	r6,1
   21510:	e17ffd17 	ldw	r5,-12(fp)
   21514:	010000b4 	movhi	r4,2
   21518:	2107dd04 	addi	r4,r4,8052
   2151c:	00213e80 	call	213e8 <alt_open_fd>
}  
   21520:	0001883a 	nop
   21524:	e037883a 	mov	sp,fp
   21528:	dfc00117 	ldw	ra,4(sp)
   2152c:	df000017 	ldw	fp,0(sp)
   21530:	dec00204 	addi	sp,sp,8
   21534:	f800283a 	ret

00021538 <alt_get_errno>:
{
   21538:	defffe04 	addi	sp,sp,-8
   2153c:	dfc00115 	stw	ra,4(sp)
   21540:	df000015 	stw	fp,0(sp)
   21544:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   21548:	d0a00517 	ldw	r2,-32748(gp)
   2154c:	10000326 	beq	r2,zero,2155c <alt_get_errno+0x24>
   21550:	d0a00517 	ldw	r2,-32748(gp)
   21554:	103ee83a 	callr	r2
   21558:	00000106 	br	21560 <alt_get_errno+0x28>
   2155c:	d0a1bb04 	addi	r2,gp,-30996
}
   21560:	e037883a 	mov	sp,fp
   21564:	dfc00117 	ldw	ra,4(sp)
   21568:	df000017 	ldw	fp,0(sp)
   2156c:	dec00204 	addi	sp,sp,8
   21570:	f800283a 	ret

00021574 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   21574:	defffd04 	addi	sp,sp,-12
   21578:	df000215 	stw	fp,8(sp)
   2157c:	df000204 	addi	fp,sp,8
   21580:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   21584:	e0bffe17 	ldw	r2,-8(fp)
   21588:	10800217 	ldw	r2,8(r2)
   2158c:	10d00034 	orhi	r3,r2,16384
   21590:	e0bffe17 	ldw	r2,-8(fp)
   21594:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   21598:	e03fff15 	stw	zero,-4(fp)
   2159c:	00002306 	br	2162c <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   215a0:	e0ffff17 	ldw	r3,-4(fp)
   215a4:	1805883a 	mov	r2,r3
   215a8:	1085883a 	add	r2,r2,r2
   215ac:	10c5883a 	add	r2,r2,r3
   215b0:	100490ba 	slli	r2,r2,2
   215b4:	00c000b4 	movhi	r3,2
   215b8:	10c7883a 	add	r3,r2,r3
   215bc:	18c7d717 	ldw	r3,8028(r3)
   215c0:	e0bffe17 	ldw	r2,-8(fp)
   215c4:	10800017 	ldw	r2,0(r2)
   215c8:	1880151e 	bne	r3,r2,21620 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   215cc:	e0ffff17 	ldw	r3,-4(fp)
   215d0:	1805883a 	mov	r2,r3
   215d4:	1085883a 	add	r2,r2,r2
   215d8:	10c5883a 	add	r2,r2,r3
   215dc:	100490ba 	slli	r2,r2,2
   215e0:	00c000b4 	movhi	r3,2
   215e4:	10c7883a 	add	r3,r2,r3
   215e8:	1887d917 	ldw	r2,8036(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
   215ec:	10000c0e 	bge	r2,zero,21620 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
   215f0:	e0ffff17 	ldw	r3,-4(fp)
   215f4:	1805883a 	mov	r2,r3
   215f8:	1085883a 	add	r2,r2,r2
   215fc:	10c5883a 	add	r2,r2,r3
   21600:	100490ba 	slli	r2,r2,2
   21604:	00c000b4 	movhi	r3,2
   21608:	18c7d704 	addi	r3,r3,8028
   2160c:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   21610:	e0fffe17 	ldw	r3,-8(fp)
   21614:	18800226 	beq	r3,r2,21620 <alt_file_locked+0xac>
    {
      return -EACCES;
   21618:	00bffcc4 	movi	r2,-13
   2161c:	00000806 	br	21640 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
   21620:	e0bfff17 	ldw	r2,-4(fp)
   21624:	10800044 	addi	r2,r2,1
   21628:	e0bfff15 	stw	r2,-4(fp)
   2162c:	d0a00417 	ldw	r2,-32752(gp)
   21630:	1007883a 	mov	r3,r2
   21634:	e0bfff17 	ldw	r2,-4(fp)
   21638:	18bfd92e 	bgeu	r3,r2,215a0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   2163c:	0005883a 	mov	r2,zero
}
   21640:	e037883a 	mov	sp,fp
   21644:	df000017 	ldw	fp,0(sp)
   21648:	dec00104 	addi	sp,sp,4
   2164c:	f800283a 	ret

00021650 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   21650:	defff604 	addi	sp,sp,-40
   21654:	dfc00915 	stw	ra,36(sp)
   21658:	df000815 	stw	fp,32(sp)
   2165c:	df000804 	addi	fp,sp,32
   21660:	e13ffa15 	stw	r4,-24(fp)
   21664:	e17ff915 	stw	r5,-28(fp)
   21668:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   2166c:	00bfffc4 	movi	r2,-1
   21670:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   21674:	00bffb44 	movi	r2,-19
   21678:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   2167c:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   21680:	d1600204 	addi	r5,gp,-32760
   21684:	e13ffa17 	ldw	r4,-24(fp)
   21688:	00218440 	call	21844 <alt_find_dev>
   2168c:	e0bfff15 	stw	r2,-4(fp)
   21690:	e0bfff17 	ldw	r2,-4(fp)
   21694:	1000051e 	bne	r2,zero,216ac <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   21698:	e13ffa17 	ldw	r4,-24(fp)
   2169c:	00218d40 	call	218d4 <alt_find_file>
   216a0:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   216a4:	00800044 	movi	r2,1
   216a8:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   216ac:	e0bfff17 	ldw	r2,-4(fp)
   216b0:	10002c26 	beq	r2,zero,21764 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   216b4:	e13fff17 	ldw	r4,-4(fp)
   216b8:	00219dc0 	call	219dc <alt_get_fd>
   216bc:	e0bffe15 	stw	r2,-8(fp)
   216c0:	e0bffe17 	ldw	r2,-8(fp)
   216c4:	1000030e 	bge	r2,zero,216d4 <open+0x84>
    {
      status = index;
   216c8:	e0bffe17 	ldw	r2,-8(fp)
   216cc:	e0bffd15 	stw	r2,-12(fp)
   216d0:	00002606 	br	2176c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   216d4:	e0fffe17 	ldw	r3,-8(fp)
   216d8:	1805883a 	mov	r2,r3
   216dc:	1085883a 	add	r2,r2,r2
   216e0:	10c5883a 	add	r2,r2,r3
   216e4:	100490ba 	slli	r2,r2,2
   216e8:	00c000b4 	movhi	r3,2
   216ec:	18c7d704 	addi	r3,r3,8028
   216f0:	10c5883a 	add	r2,r2,r3
   216f4:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   216f8:	e0fff917 	ldw	r3,-28(fp)
   216fc:	00900034 	movhi	r2,16384
   21700:	10bfffc4 	addi	r2,r2,-1
   21704:	1886703a 	and	r3,r3,r2
   21708:	e0bffb17 	ldw	r2,-20(fp)
   2170c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   21710:	e0bffc17 	ldw	r2,-16(fp)
   21714:	1000051e 	bne	r2,zero,2172c <open+0xdc>
   21718:	e13ffb17 	ldw	r4,-20(fp)
   2171c:	00215740 	call	21574 <alt_file_locked>
   21720:	e0bffd15 	stw	r2,-12(fp)
   21724:	e0bffd17 	ldw	r2,-12(fp)
   21728:	10001016 	blt	r2,zero,2176c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   2172c:	e0bfff17 	ldw	r2,-4(fp)
   21730:	10800317 	ldw	r2,12(r2)
   21734:	10000826 	beq	r2,zero,21758 <open+0x108>
   21738:	e0bfff17 	ldw	r2,-4(fp)
   2173c:	10800317 	ldw	r2,12(r2)
   21740:	e1fff817 	ldw	r7,-32(fp)
   21744:	e1bff917 	ldw	r6,-28(fp)
   21748:	e17ffa17 	ldw	r5,-24(fp)
   2174c:	e13ffb17 	ldw	r4,-20(fp)
   21750:	103ee83a 	callr	r2
   21754:	00000106 	br	2175c <open+0x10c>
   21758:	0005883a 	mov	r2,zero
   2175c:	e0bffd15 	stw	r2,-12(fp)
   21760:	00000206 	br	2176c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   21764:	00bffb44 	movi	r2,-19
   21768:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   2176c:	e0bffd17 	ldw	r2,-12(fp)
   21770:	1000090e 	bge	r2,zero,21798 <open+0x148>
  {
    alt_release_fd (index);  
   21774:	e13ffe17 	ldw	r4,-8(fp)
   21778:	00217b00 	call	217b0 <alt_release_fd>
    ALT_ERRNO = -status;
   2177c:	00215380 	call	21538 <alt_get_errno>
   21780:	1007883a 	mov	r3,r2
   21784:	e0bffd17 	ldw	r2,-12(fp)
   21788:	0085c83a 	sub	r2,zero,r2
   2178c:	18800015 	stw	r2,0(r3)
    return -1;
   21790:	00bfffc4 	movi	r2,-1
   21794:	00000106 	br	2179c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   21798:	e0bffe17 	ldw	r2,-8(fp)
}
   2179c:	e037883a 	mov	sp,fp
   217a0:	dfc00117 	ldw	ra,4(sp)
   217a4:	df000017 	ldw	fp,0(sp)
   217a8:	dec00204 	addi	sp,sp,8
   217ac:	f800283a 	ret

000217b0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   217b0:	defffe04 	addi	sp,sp,-8
   217b4:	df000115 	stw	fp,4(sp)
   217b8:	df000104 	addi	fp,sp,4
   217bc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   217c0:	e0bfff17 	ldw	r2,-4(fp)
   217c4:	108000d0 	cmplti	r2,r2,3
   217c8:	1000101e 	bne	r2,zero,2180c <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
   217cc:	e0ffff17 	ldw	r3,-4(fp)
   217d0:	1805883a 	mov	r2,r3
   217d4:	1085883a 	add	r2,r2,r2
   217d8:	10c5883a 	add	r2,r2,r3
   217dc:	100490ba 	slli	r2,r2,2
   217e0:	00c000b4 	movhi	r3,2
   217e4:	10c7883a 	add	r3,r2,r3
   217e8:	1807d915 	stw	zero,8036(r3)
    alt_fd_list[fd].dev      = 0;
   217ec:	e0ffff17 	ldw	r3,-4(fp)
   217f0:	1805883a 	mov	r2,r3
   217f4:	1085883a 	add	r2,r2,r2
   217f8:	10c5883a 	add	r2,r2,r3
   217fc:	100490ba 	slli	r2,r2,2
   21800:	00c000b4 	movhi	r3,2
   21804:	10c7883a 	add	r3,r2,r3
   21808:	1807d715 	stw	zero,8028(r3)
  }
}
   2180c:	0001883a 	nop
   21810:	e037883a 	mov	sp,fp
   21814:	df000017 	ldw	fp,0(sp)
   21818:	dec00104 	addi	sp,sp,4
   2181c:	f800283a 	ret

00021820 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   21820:	deffff04 	addi	sp,sp,-4
   21824:	df000015 	stw	fp,0(sp)
   21828:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   2182c:	000170fa 	wrctl	ienable,zero
}
   21830:	0001883a 	nop
   21834:	e037883a 	mov	sp,fp
   21838:	df000017 	ldw	fp,0(sp)
   2183c:	dec00104 	addi	sp,sp,4
   21840:	f800283a 	ret

00021844 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   21844:	defffa04 	addi	sp,sp,-24
   21848:	dfc00515 	stw	ra,20(sp)
   2184c:	df000415 	stw	fp,16(sp)
   21850:	df000404 	addi	fp,sp,16
   21854:	e13ffd15 	stw	r4,-12(fp)
   21858:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   2185c:	e0bffc17 	ldw	r2,-16(fp)
   21860:	10800017 	ldw	r2,0(r2)
   21864:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   21868:	e13ffd17 	ldw	r4,-12(fp)
   2186c:	0021bc80 	call	21bc8 <strlen>
   21870:	10800044 	addi	r2,r2,1
   21874:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   21878:	00000d06 	br	218b0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2187c:	e0bfff17 	ldw	r2,-4(fp)
   21880:	10800217 	ldw	r2,8(r2)
   21884:	e0fffe17 	ldw	r3,-8(fp)
   21888:	180d883a 	mov	r6,r3
   2188c:	e17ffd17 	ldw	r5,-12(fp)
   21890:	1009883a 	mov	r4,r2
   21894:	0021b500 	call	21b50 <memcmp>
   21898:	1000021e 	bne	r2,zero,218a4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   2189c:	e0bfff17 	ldw	r2,-4(fp)
   218a0:	00000706 	br	218c0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   218a4:	e0bfff17 	ldw	r2,-4(fp)
   218a8:	10800017 	ldw	r2,0(r2)
   218ac:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   218b0:	e0ffff17 	ldw	r3,-4(fp)
   218b4:	e0bffc17 	ldw	r2,-16(fp)
   218b8:	18bff01e 	bne	r3,r2,2187c <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   218bc:	0005883a 	mov	r2,zero
}
   218c0:	e037883a 	mov	sp,fp
   218c4:	dfc00117 	ldw	ra,4(sp)
   218c8:	df000017 	ldw	fp,0(sp)
   218cc:	dec00204 	addi	sp,sp,8
   218d0:	f800283a 	ret

000218d4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   218d4:	defffb04 	addi	sp,sp,-20
   218d8:	dfc00415 	stw	ra,16(sp)
   218dc:	df000315 	stw	fp,12(sp)
   218e0:	df000304 	addi	fp,sp,12
   218e4:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   218e8:	d0a00017 	ldw	r2,-32768(gp)
   218ec:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   218f0:	00003106 	br	219b8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   218f4:	e0bfff17 	ldw	r2,-4(fp)
   218f8:	10800217 	ldw	r2,8(r2)
   218fc:	1009883a 	mov	r4,r2
   21900:	0021bc80 	call	21bc8 <strlen>
   21904:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   21908:	e0bfff17 	ldw	r2,-4(fp)
   2190c:	10c00217 	ldw	r3,8(r2)
   21910:	e0bffe17 	ldw	r2,-8(fp)
   21914:	10bfffc4 	addi	r2,r2,-1
   21918:	1885883a 	add	r2,r3,r2
   2191c:	10800003 	ldbu	r2,0(r2)
   21920:	10803fcc 	andi	r2,r2,255
   21924:	1080201c 	xori	r2,r2,128
   21928:	10bfe004 	addi	r2,r2,-128
   2192c:	10800bd8 	cmpnei	r2,r2,47
   21930:	1000031e 	bne	r2,zero,21940 <alt_find_file+0x6c>
    {
      len -= 1;
   21934:	e0bffe17 	ldw	r2,-8(fp)
   21938:	10bfffc4 	addi	r2,r2,-1
   2193c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   21940:	e0bffe17 	ldw	r2,-8(fp)
   21944:	e0fffd17 	ldw	r3,-12(fp)
   21948:	1885883a 	add	r2,r3,r2
   2194c:	10800003 	ldbu	r2,0(r2)
   21950:	10803fcc 	andi	r2,r2,255
   21954:	1080201c 	xori	r2,r2,128
   21958:	10bfe004 	addi	r2,r2,-128
   2195c:	10800be0 	cmpeqi	r2,r2,47
   21960:	1000081e 	bne	r2,zero,21984 <alt_find_file+0xb0>
   21964:	e0bffe17 	ldw	r2,-8(fp)
   21968:	e0fffd17 	ldw	r3,-12(fp)
   2196c:	1885883a 	add	r2,r3,r2
   21970:	10800003 	ldbu	r2,0(r2)
   21974:	10803fcc 	andi	r2,r2,255
   21978:	1080201c 	xori	r2,r2,128
   2197c:	10bfe004 	addi	r2,r2,-128
   21980:	10000a1e 	bne	r2,zero,219ac <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   21984:	e0bfff17 	ldw	r2,-4(fp)
   21988:	10800217 	ldw	r2,8(r2)
   2198c:	e0fffe17 	ldw	r3,-8(fp)
   21990:	180d883a 	mov	r6,r3
   21994:	e17ffd17 	ldw	r5,-12(fp)
   21998:	1009883a 	mov	r4,r2
   2199c:	0021b500 	call	21b50 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   219a0:	1000021e 	bne	r2,zero,219ac <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   219a4:	e0bfff17 	ldw	r2,-4(fp)
   219a8:	00000706 	br	219c8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   219ac:	e0bfff17 	ldw	r2,-4(fp)
   219b0:	10800017 	ldw	r2,0(r2)
   219b4:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   219b8:	e0ffff17 	ldw	r3,-4(fp)
   219bc:	d0a00004 	addi	r2,gp,-32768
   219c0:	18bfcc1e 	bne	r3,r2,218f4 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   219c4:	0005883a 	mov	r2,zero
}
   219c8:	e037883a 	mov	sp,fp
   219cc:	dfc00117 	ldw	ra,4(sp)
   219d0:	df000017 	ldw	fp,0(sp)
   219d4:	dec00204 	addi	sp,sp,8
   219d8:	f800283a 	ret

000219dc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   219dc:	defffc04 	addi	sp,sp,-16
   219e0:	df000315 	stw	fp,12(sp)
   219e4:	df000304 	addi	fp,sp,12
   219e8:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   219ec:	00bffa04 	movi	r2,-24
   219f0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   219f4:	e03fff15 	stw	zero,-4(fp)
   219f8:	00001d06 	br	21a70 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   219fc:	e0ffff17 	ldw	r3,-4(fp)
   21a00:	1805883a 	mov	r2,r3
   21a04:	1085883a 	add	r2,r2,r2
   21a08:	10c5883a 	add	r2,r2,r3
   21a0c:	100490ba 	slli	r2,r2,2
   21a10:	00c000b4 	movhi	r3,2
   21a14:	10c7883a 	add	r3,r2,r3
   21a18:	1887d717 	ldw	r2,8028(r3)
   21a1c:	1000111e 	bne	r2,zero,21a64 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   21a20:	e0ffff17 	ldw	r3,-4(fp)
   21a24:	1805883a 	mov	r2,r3
   21a28:	1085883a 	add	r2,r2,r2
   21a2c:	10c5883a 	add	r2,r2,r3
   21a30:	100490ba 	slli	r2,r2,2
   21a34:	e13ffd17 	ldw	r4,-12(fp)
   21a38:	00c000b4 	movhi	r3,2
   21a3c:	10c7883a 	add	r3,r2,r3
   21a40:	1907d715 	stw	r4,8028(r3)
      if (i > alt_max_fd)
   21a44:	d0e00417 	ldw	r3,-32752(gp)
   21a48:	e0bfff17 	ldw	r2,-4(fp)
   21a4c:	1880020e 	bge	r3,r2,21a58 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   21a50:	e0bfff17 	ldw	r2,-4(fp)
   21a54:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
   21a58:	e0bfff17 	ldw	r2,-4(fp)
   21a5c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   21a60:	00000706 	br	21a80 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
   21a64:	e0bfff17 	ldw	r2,-4(fp)
   21a68:	10800044 	addi	r2,r2,1
   21a6c:	e0bfff15 	stw	r2,-4(fp)
   21a70:	e0bfff17 	ldw	r2,-4(fp)
   21a74:	10800810 	cmplti	r2,r2,32
   21a78:	103fe01e 	bne	r2,zero,219fc <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   21a7c:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   21a80:	e0bffe17 	ldw	r2,-8(fp)
}
   21a84:	e037883a 	mov	sp,fp
   21a88:	df000017 	ldw	fp,0(sp)
   21a8c:	dec00104 	addi	sp,sp,4
   21a90:	f800283a 	ret

00021a94 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   21a94:	defffe04 	addi	sp,sp,-8
   21a98:	df000115 	stw	fp,4(sp)
   21a9c:	df000104 	addi	fp,sp,4
   21aa0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   21aa4:	e0bfff17 	ldw	r2,-4(fp)
   21aa8:	10bffe84 	addi	r2,r2,-6
   21aac:	10c00428 	cmpgeui	r3,r2,16
   21ab0:	18c03fcc 	andi	r3,r3,255
   21ab4:	18000f1e 	bne	r3,zero,21af4 <alt_exception_cause_generated_bad_addr+0x60>
   21ab8:	00c00044 	movi	r3,1
   21abc:	1884983a 	sll	r2,r3,r2
   21ac0:	10e2c8cc 	andi	r3,r2,35619
   21ac4:	1806c03a 	cmpne	r3,r3,zero
   21ac8:	18c03fcc 	andi	r3,r3,255
   21acc:	1800051e 	bne	r3,zero,21ae4 <alt_exception_cause_generated_bad_addr+0x50>
   21ad0:	1084100c 	andi	r2,r2,4160
   21ad4:	1004c03a 	cmpne	r2,r2,zero
   21ad8:	10803fcc 	andi	r2,r2,255
   21adc:	1000031e 	bne	r2,zero,21aec <alt_exception_cause_generated_bad_addr+0x58>
   21ae0:	00000406 	br	21af4 <alt_exception_cause_generated_bad_addr+0x60>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   21ae4:	00800044 	movi	r2,1
   21ae8:	00000306 	br	21af8 <alt_exception_cause_generated_bad_addr+0x64>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   21aec:	0005883a 	mov	r2,zero
   21af0:	00000106 	br	21af8 <alt_exception_cause_generated_bad_addr+0x64>

  default:
    return 0;
   21af4:	0005883a 	mov	r2,zero
  }
}
   21af8:	e037883a 	mov	sp,fp
   21afc:	df000017 	ldw	fp,0(sp)
   21b00:	dec00104 	addi	sp,sp,4
   21b04:	f800283a 	ret

00021b08 <atexit>:
   21b08:	200b883a 	mov	r5,r4
   21b0c:	000f883a 	mov	r7,zero
   21b10:	000d883a 	mov	r6,zero
   21b14:	0009883a 	mov	r4,zero
   21b18:	0021c601 	jmpi	21c60 <__register_exitproc>

00021b1c <exit>:
   21b1c:	defffe04 	addi	sp,sp,-8
   21b20:	000b883a 	mov	r5,zero
   21b24:	dc000015 	stw	r16,0(sp)
   21b28:	dfc00115 	stw	ra,4(sp)
   21b2c:	2021883a 	mov	r16,r4
   21b30:	0021cf00 	call	21cf0 <__call_exitprocs>
   21b34:	008000b4 	movhi	r2,2
   21b38:	11094717 	ldw	r4,9500(r2)
   21b3c:	20800f17 	ldw	r2,60(r4)
   21b40:	10000126 	beq	r2,zero,21b48 <exit+0x2c>
   21b44:	103ee83a 	callr	r2
   21b48:	8009883a 	mov	r4,r16
   21b4c:	0021e100 	call	21e10 <_exit>

00021b50 <memcmp>:
   21b50:	30800128 	cmpgeui	r2,r6,4
   21b54:	10000d26 	beq	r2,zero,21b8c <memcmp+0x3c>
   21b58:	2144b03a 	or	r2,r4,r5
   21b5c:	108000cc 	andi	r2,r2,3
   21b60:	10000726 	beq	r2,zero,21b80 <memcmp+0x30>
   21b64:	30bfffc4 	addi	r2,r6,-1
   21b68:	00000a06 	br	21b94 <memcmp+0x44>
   21b6c:	31bfff04 	addi	r6,r6,-4
   21b70:	30800128 	cmpgeui	r2,r6,4
   21b74:	21000104 	addi	r4,r4,4
   21b78:	29400104 	addi	r5,r5,4
   21b7c:	10000326 	beq	r2,zero,21b8c <memcmp+0x3c>
   21b80:	20c00017 	ldw	r3,0(r4)
   21b84:	28800017 	ldw	r2,0(r5)
   21b88:	18bff826 	beq	r3,r2,21b6c <memcmp+0x1c>
   21b8c:	30bfffc4 	addi	r2,r6,-1
   21b90:	30000b26 	beq	r6,zero,21bc0 <memcmp+0x70>
   21b94:	11800044 	addi	r6,r2,1
   21b98:	218d883a 	add	r6,r4,r6
   21b9c:	00000106 	br	21ba4 <memcmp+0x54>
   21ba0:	21800726 	beq	r4,r6,21bc0 <memcmp+0x70>
   21ba4:	20800003 	ldbu	r2,0(r4)
   21ba8:	28c00003 	ldbu	r3,0(r5)
   21bac:	21000044 	addi	r4,r4,1
   21bb0:	29400044 	addi	r5,r5,1
   21bb4:	10fffa26 	beq	r2,r3,21ba0 <memcmp+0x50>
   21bb8:	10c5c83a 	sub	r2,r2,r3
   21bbc:	f800283a 	ret
   21bc0:	0005883a 	mov	r2,zero
   21bc4:	f800283a 	ret

00021bc8 <strlen>:
   21bc8:	208000cc 	andi	r2,r4,3
   21bcc:	10000926 	beq	r2,zero,21bf4 <strlen+0x2c>
   21bd0:	2005883a 	mov	r2,r4
   21bd4:	00000306 	br	21be4 <strlen+0x1c>
   21bd8:	10800044 	addi	r2,r2,1
   21bdc:	10c000cc 	andi	r3,r2,3
   21be0:	18000526 	beq	r3,zero,21bf8 <strlen+0x30>
   21be4:	10c00007 	ldb	r3,0(r2)
   21be8:	183ffb1e 	bne	r3,zero,21bd8 <strlen+0x10>
   21bec:	1105c83a 	sub	r2,r2,r4
   21bf0:	f800283a 	ret
   21bf4:	2005883a 	mov	r2,r4
   21bf8:	11400017 	ldw	r5,0(r2)
   21bfc:	01ffbff4 	movhi	r7,65279
   21c00:	39ffbfc4 	addi	r7,r7,-257
   21c04:	29c7883a 	add	r3,r5,r7
   21c08:	01a02074 	movhi	r6,32897
   21c0c:	014a303a 	nor	r5,zero,r5
   21c10:	1946703a 	and	r3,r3,r5
   21c14:	31a02004 	addi	r6,r6,-32640
   21c18:	1986703a 	and	r3,r3,r6
   21c1c:	1800071e 	bne	r3,zero,21c3c <strlen+0x74>
   21c20:	11400117 	ldw	r5,4(r2)
   21c24:	10800104 	addi	r2,r2,4
   21c28:	29c7883a 	add	r3,r5,r7
   21c2c:	014a303a 	nor	r5,zero,r5
   21c30:	1946703a 	and	r3,r3,r5
   21c34:	1986703a 	and	r3,r3,r6
   21c38:	183ff926 	beq	r3,zero,21c20 <strlen+0x58>
   21c3c:	10c00007 	ldb	r3,0(r2)
   21c40:	183fea26 	beq	r3,zero,21bec <strlen+0x24>
   21c44:	10c00047 	ldb	r3,1(r2)
   21c48:	10800044 	addi	r2,r2,1
   21c4c:	183fe726 	beq	r3,zero,21bec <strlen+0x24>
   21c50:	10c00047 	ldb	r3,1(r2)
   21c54:	10800044 	addi	r2,r2,1
   21c58:	183ffa1e 	bne	r3,zero,21c44 <strlen+0x7c>
   21c5c:	003fe306 	br	21bec <strlen+0x24>

00021c60 <__register_exitproc>:
   21c60:	008000b4 	movhi	r2,2
   21c64:	10c94717 	ldw	r3,9500(r2)
   21c68:	18805217 	ldw	r2,328(r3)
   21c6c:	10001726 	beq	r2,zero,21ccc <__register_exitproc+0x6c>
   21c70:	10c00117 	ldw	r3,4(r2)
   21c74:	1a000808 	cmpgei	r8,r3,32
   21c78:	40001b1e 	bne	r8,zero,21ce8 <__register_exitproc+0x88>
   21c7c:	20000b26 	beq	r4,zero,21cac <__register_exitproc+0x4c>
   21c80:	181090ba 	slli	r8,r3,2
   21c84:	02400044 	movi	r9,1
   21c88:	48d2983a 	sll	r9,r9,r3
   21c8c:	1211883a 	add	r8,r2,r8
   21c90:	41802215 	stw	r6,136(r8)
   21c94:	11806217 	ldw	r6,392(r2)
   21c98:	21000098 	cmpnei	r4,r4,2
   21c9c:	324cb03a 	or	r6,r6,r9
   21ca0:	11806215 	stw	r6,392(r2)
   21ca4:	41c04215 	stw	r7,264(r8)
   21ca8:	20000b26 	beq	r4,zero,21cd8 <__register_exitproc+0x78>
   21cac:	19000084 	addi	r4,r3,2
   21cb0:	200890ba 	slli	r4,r4,2
   21cb4:	18c00044 	addi	r3,r3,1
   21cb8:	10c00115 	stw	r3,4(r2)
   21cbc:	1105883a 	add	r2,r2,r4
   21cc0:	11400015 	stw	r5,0(r2)
   21cc4:	0005883a 	mov	r2,zero
   21cc8:	f800283a 	ret
   21ccc:	18805304 	addi	r2,r3,332
   21cd0:	18805215 	stw	r2,328(r3)
   21cd4:	003fe606 	br	21c70 <__register_exitproc+0x10>
   21cd8:	11006317 	ldw	r4,396(r2)
   21cdc:	2248b03a 	or	r4,r4,r9
   21ce0:	11006315 	stw	r4,396(r2)
   21ce4:	003ff106 	br	21cac <__register_exitproc+0x4c>
   21ce8:	00bfffc4 	movi	r2,-1
   21cec:	f800283a 	ret

00021cf0 <__call_exitprocs>:
   21cf0:	defff704 	addi	sp,sp,-36
   21cf4:	008000b4 	movhi	r2,2
   21cf8:	dcc00315 	stw	r19,12(sp)
   21cfc:	14c94717 	ldw	r19,9500(r2)
   21d00:	dc800215 	stw	r18,8(sp)
   21d04:	dfc00815 	stw	ra,32(sp)
   21d08:	9c805217 	ldw	r18,328(r19)
   21d0c:	ddc00715 	stw	r23,28(sp)
   21d10:	dd800615 	stw	r22,24(sp)
   21d14:	dd400515 	stw	r21,20(sp)
   21d18:	dd000415 	stw	r20,16(sp)
   21d1c:	dc400115 	stw	r17,4(sp)
   21d20:	dc000015 	stw	r16,0(sp)
   21d24:	90001026 	beq	r18,zero,21d68 <__call_exitprocs+0x78>
   21d28:	202b883a 	mov	r21,r4
   21d2c:	282d883a 	mov	r22,r5
   21d30:	05000044 	movi	r20,1
   21d34:	94000117 	ldw	r16,4(r18)
   21d38:	847fffc4 	addi	r17,r16,-1
   21d3c:	88000a16 	blt	r17,zero,21d68 <__call_exitprocs+0x78>
   21d40:	84000044 	addi	r16,r16,1
   21d44:	802090ba 	slli	r16,r16,2
   21d48:	9421883a 	add	r16,r18,r16
   21d4c:	b0001126 	beq	r22,zero,21d94 <__call_exitprocs+0xa4>
   21d50:	80804017 	ldw	r2,256(r16)
   21d54:	15800f26 	beq	r2,r22,21d94 <__call_exitprocs+0xa4>
   21d58:	8c7fffc4 	addi	r17,r17,-1
   21d5c:	88bfffd8 	cmpnei	r2,r17,-1
   21d60:	843fff04 	addi	r16,r16,-4
   21d64:	103ff91e 	bne	r2,zero,21d4c <__call_exitprocs+0x5c>
   21d68:	dfc00817 	ldw	ra,32(sp)
   21d6c:	ddc00717 	ldw	r23,28(sp)
   21d70:	dd800617 	ldw	r22,24(sp)
   21d74:	dd400517 	ldw	r21,20(sp)
   21d78:	dd000417 	ldw	r20,16(sp)
   21d7c:	dcc00317 	ldw	r19,12(sp)
   21d80:	dc800217 	ldw	r18,8(sp)
   21d84:	dc400117 	ldw	r17,4(sp)
   21d88:	dc000017 	ldw	r16,0(sp)
   21d8c:	dec00904 	addi	sp,sp,36
   21d90:	f800283a 	ret
   21d94:	90800117 	ldw	r2,4(r18)
   21d98:	81800017 	ldw	r6,0(r16)
   21d9c:	10bfffc4 	addi	r2,r2,-1
   21da0:	14401726 	beq	r2,r17,21e00 <__call_exitprocs+0x110>
   21da4:	80000015 	stw	zero,0(r16)
   21da8:	303feb26 	beq	r6,zero,21d58 <__call_exitprocs+0x68>
   21dac:	a446983a 	sll	r3,r20,r17
   21db0:	90806217 	ldw	r2,392(r18)
   21db4:	95c00117 	ldw	r23,4(r18)
   21db8:	1884703a 	and	r2,r3,r2
   21dbc:	1000081e 	bne	r2,zero,21de0 <__call_exitprocs+0xf0>
   21dc0:	303ee83a 	callr	r6
   21dc4:	90c00117 	ldw	r3,4(r18)
   21dc8:	98805217 	ldw	r2,328(r19)
   21dcc:	1dc0011e 	bne	r3,r23,21dd4 <__call_exitprocs+0xe4>
   21dd0:	14bfe126 	beq	r2,r18,21d58 <__call_exitprocs+0x68>
   21dd4:	103fe426 	beq	r2,zero,21d68 <__call_exitprocs+0x78>
   21dd8:	1025883a 	mov	r18,r2
   21ddc:	003fd506 	br	21d34 <__call_exitprocs+0x44>
   21de0:	90806317 	ldw	r2,396(r18)
   21de4:	81002017 	ldw	r4,128(r16)
   21de8:	1886703a 	and	r3,r3,r2
   21dec:	1800061e 	bne	r3,zero,21e08 <__call_exitprocs+0x118>
   21df0:	200b883a 	mov	r5,r4
   21df4:	a809883a 	mov	r4,r21
   21df8:	303ee83a 	callr	r6
   21dfc:	003ff106 	br	21dc4 <__call_exitprocs+0xd4>
   21e00:	94400115 	stw	r17,4(r18)
   21e04:	003fe806 	br	21da8 <__call_exitprocs+0xb8>
   21e08:	303ee83a 	callr	r6
   21e0c:	003fed06 	br	21dc4 <__call_exitprocs+0xd4>

00021e10 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   21e10:	defffd04 	addi	sp,sp,-12
   21e14:	df000215 	stw	fp,8(sp)
   21e18:	df000204 	addi	fp,sp,8
   21e1c:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   21e20:	0001883a 	nop
   21e24:	e0bffe17 	ldw	r2,-8(fp)
   21e28:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   21e2c:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   21e30:	10000226 	beq	r2,zero,21e3c <_exit+0x2c>
    ALT_SIM_FAIL();
   21e34:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   21e38:	00000106 	br	21e40 <_exit+0x30>
    ALT_SIM_PASS();
   21e3c:	002af0b0 	cmpltui	zero,zero,43970
}
   21e40:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   21e44:	0001883a 	nop
   21e48:	003ffe06 	br	21e44 <_exit+0x34>
