
Uart_test.elf:     file format elf32-littlenios2
Uart_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020224

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00005228 memsz 0x00005228 flags r-x
    LOAD off    0x00006248 vaddr 0x00025248 paddr 0x00025d10 align 2**12
         filesz 0x00000ac8 memsz 0x00000ac8 flags rw-
    LOAD off    0x000007d8 vaddr 0x000267d8 paddr 0x000267d8 align 2**12
         filesz 0x00000000 memsz 0x0000014c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004fe8  00020224  00020224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000003c  0002520c  0002520c  0000620c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000ac8  00025248  00025d10  00006248  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000014c  000267d8  000267d8  000077d8  2**2
                  ALLOC, SMALL_DATA
  6 .on_chip_mem  00000000  00026924  00026924  00006d10  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00006d10  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000009d0  00000000  00000000  00006d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00016c55  00000000  00000000  00007710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00006987  00000000  00000000  0001e365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00005cad  00000000  00000000  00024cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  000014c0  00000000  00000000  0002a99c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00001920  00000000  00000000  0002be5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000010  00000000  00000000  0002d77c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  0002d790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line_str 0000145c  00000000  00000000  0002d800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 000041c3  00000000  00000000  0002ec5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000005a3  00000000  00000000  00032e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  00035709  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  0003570c  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  00035718  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  00035719  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000006  00000000  00000000  0003571a  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000006  00000000  00000000  00035720  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000006  00000000  00000000  00035726  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000009  00000000  00000000  0003572c  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000004b  00000000  00000000  00035735  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000301b8  00000000  00000000  00035780  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020224 l    d  .text	00000000 .text
0002520c l    d  .rodata	00000000 .rodata
00025248 l    d  .rwdata	00000000 .rwdata
000267d8 l    d  .bss	00000000 .bss
00026924 l    d  .on_chip_mem	00000000 .on_chip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    df *ABS*	00000000 crt0.o
0002025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00020428 l     F .text	00000008 __fp_lock
0002043c l     F .text	00000008 __fp_unlock
00020444 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00025248 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
000230f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00023208 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00023234 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0002332c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00023418 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00023504 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000236e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00025d08 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00023950 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00023a90 l     F .text	00000034 alt_dev_reg
00025c1c l     O .rwdata	000000c4 uart_0
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00023d04 l     F .text	0000009c altera_avalon_uart_irq
00023da0 l     F .text	000000e0 altera_avalon_uart_rxirq
00023e80 l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00024018 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0002423c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002444c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000248b0 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00024a00 l     F .text	0000003c alt_get_errno
00024a3c l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000267f8 g     O .bss	00000004 alt_instruction_exception_handler
00022ebc g     F .text	00000058 _isatty_r
00023620 g     F .text	0000007c alt_main
000202b0 g     F .text	000000d0 _puts_r
00026824 g     O .bss	00000100 alt_irq
00022b68 g     F .text	00000064 _lseek_r
00025d10 g       *ABS*	00000000 __flash_rwdata_start
00026924 g       *ABS*	00000000 __alt_heap_start
000220dc g     F .text	0000005c __sseek
0002076c g     F .text	00000010 __sinit
000205ac g     F .text	00000078 __sfmoreglue
000236c0 g     F .text	00000024 __malloc_unlock
0002174c g     F .text	00000128 memmove
00020758 g     F .text	00000014 _cleanup
00024c78 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00022e5c g     F .text	00000060 _fstat_r
000267e4 g     O .bss	00000004 errno
00022054 g     F .text	00000008 __seofread
00020000 g       *ABS*	00000000 __alt_mem_on_chip_mem
000267ec g     O .bss	00000004 alt_argv
0002dce0 g       *ABS*	00000000 _gp
00025a9c g     O .rwdata	00000180 alt_fd_list
00024c9c g     F .text	00000090 alt_find_dev
0002164c g     F .text	00000100 memcpy
00020430 g     F .text	0000000c _cleanup_r
00024984 g     F .text	0000007c alt_io_redirect
0002520c g       *ABS*	00000000 __DTOR_END__
00020380 g     F .text	00000010 puts
00024eec g     F .text	00000074 alt_exception_cause_generated_bad_addr
00023008 g     F .text	00000064 .hidden __udivsi3
00023368 g     F .text	000000b0 isatty
000267e0 g     O .bss	00000004 __malloc_top_pad
000207b4 g     F .text	000004a8 __sfvwrite_r
00021fa8 g     F .text	00000058 _sbrk_r
00022df8 g     F .text	00000064 _read_r
00025d00 g     O .rwdata	00000004 alt_max_fd
00022348 g     F .text	000000f8 _fclose_r
000226b8 g     F .text	00000084 fflush
000267dc g     O .bss	00000004 __malloc_max_sbrked_mem
00023540 g     F .text	000000e0 lseek
00025ce0 g     O .rwdata	00000004 _global_impure_ptr
000219b4 g     F .text	000005f4 _realloc_r
00026924 g       *ABS*	00000000 __bss_end
000247c8 g     F .text	000000e8 alt_iic_isr_register
00023c58 g     F .text	000000ac altera_avalon_uart_init
0002078c g     F .text	00000014 __fp_lock_all
0002477c g     F .text	0000004c alt_ic_irq_enabled
000267f4 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000c8 alt_irq_handler
00025a74 g     O .rwdata	00000028 alt_dev_null
0002442c g     F .text	00000020 alt_dcache_flush_all
00025d10 g       *ABS*	00000000 __ram_rwdata_end
00025cf8 g     O .rwdata	00000008 alt_dev_list
0002398c g     F .text	00000104 write
00025248 g       *ABS*	00000000 __ram_rodata_end
00023270 g     F .text	000000bc fstat
0002306c g     F .text	0000005c .hidden __umodsi3
00026924 g       *ABS*	00000000 end
00024278 g     F .text	000001b4 altera_avalon_uart_write
000201c4 g     F .exceptions	00000060 alt_instruction_exception_entry
0002520c g       *ABS*	00000000 __CTOR_LIST__
00031800 g       *ABS*	00000000 __alt_stack_pointer
00023ba8 g     F .text	00000060 altera_avalon_uart_write_fd
00023c08 g     F .text	00000050 altera_avalon_uart_close_fd
0002077c g     F .text	00000004 __sfp_lock_acquire
00021550 g     F .text	000000fc memchr
00022860 g     F .text	00000308 _free_r
000250b0 g     F .text	00000120 __call_exitprocs
00025ce8 g     O .rwdata	00000004 __malloc_sbrk_base
00020224 g     F .text	0000003c _start
00023720 g     F .text	00000108 read
00023b00 g     F .text	00000048 alt_sys_init
00025020 g     F .text	00000090 __register_exitproc
000230c8 g     F .text	00000028 .hidden __mulsi3
00025248 g       *ABS*	00000000 __ram_rwdata_start
0002520c g       *ABS*	00000000 __ram_rodata_start
000267fc g     O .bss	00000028 __malloc_current_mallinfo
00024e34 g     F .text	000000b8 alt_get_fd
000222f0 g     F .text	00000058 _close_r
00024fa8 g     F .text	00000078 memcmp
00026924 g       *ABS*	00000000 __alt_stack_base
000221a4 g     F .text	0000014c __swsetup_r
00020624 g     F .text	00000134 __sfp
0002566c g     O .rwdata	00000408 __malloc_av_
00020788 g     F .text	00000004 __sinit_lock_release
00022000 g     F .text	00000054 __sread
00024d2c g     F .text	00000108 alt_find_file
00024488 g     F .text	000000a8 alt_dev_llist_insert
0002369c g     F .text	00000024 __malloc_lock
00023898 g     F .text	000000b8 sbrk
00022658 g     F .text	00000060 _fflush_r
000267d8 g       *ABS*	00000000 __bss_start
00021874 g     F .text	00000140 memset
00020260 g     F .text	00000050 main
000267f0 g     O .bss	00000004 alt_envp
000267d8 g     O .bss	00000004 __malloc_max_total_mem
00022138 g     F .text	00000008 __sclose
00031800 g       *ABS*	00000000 __alt_heap_limit
00022440 g     F .text	00000010 fclose
00020d9c g     F .text	000007b4 _malloc_r
00025d04 g     O .rwdata	00000004 alt_errno
00020c5c g     F .text	00000098 _fwalk
00022f14 g     F .text	00000080 .hidden __divsi3
0002273c g     F .text	00000124 _malloc_trim_r
0002520c g       *ABS*	00000000 __CTOR_END__
0002520c g       *ABS*	00000000 __flash_rodata_start
0002520c g       *ABS*	00000000 __DTOR_LIST__
00023ac4 g     F .text	0000003c alt_irq_init
00023828 g     F .text	00000070 alt_release_fd
00024f60 g     F .text	00000014 atexit
00022140 g     F .text	00000064 _write_r
00025ce4 g     O .rwdata	00000004 _impure_ptr
000267e8 g     O .bss	00000004 alt_argc
00022450 g     F .text	00000208 __sflush_r
00024594 g     F .text	00000064 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
000207a0 g     F .text	00000014 __fp_unlock_all
00025cf0 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00022d6c g     F .text	0000008c __swhatbuf_r
00024618 g     F .text	00000050 alt_ic_isr_register
00025d10 g       *ABS*	00000000 _edata
00023b48 g     F .text	00000060 altera_avalon_uart_read_fd
00026924 g       *ABS*	00000000 _end
00020224 g       *ABS*	00000000 __ram_exceptions_end
000246f0 g     F .text	0000008c alt_ic_irq_disable
0002205c g     F .text	00000080 __swrite
00025cec g     O .rwdata	00000004 __malloc_trim_threshold
00024f74 g     F .text	00000034 exit
00020cf4 g     F .text	000000a8 _fwalk_reent
00022f94 g     F .text	00000074 .hidden __modsi3
00031800 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00020780 g     F .text	00000004 __sfp_lock_release
00023fc4 g     F .text	00000054 altera_avalon_uart_close
000251d0 g     F .text	0000003c _exit
00022bcc g     F .text	000001a0 __smakebuf_r
00020390 g     F .text	00000098 strlen
00024b18 g     F .text	00000160 open
000245f8 g     F .text	00000020 alt_icache_flush_all
00025d0c g     O .rwdata	00000004 alt_priority_mask
00024668 g     F .text	00000088 alt_ic_irq_enable
00024054 g     F .text	000001e8 altera_avalon_uart_read
00024530 g     F .text	00000064 _do_ctors
0002312c g     F .text	000000dc close
00023480 g     F .text	00000084 alt_load
00020784 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408914 	ori	at,at,548
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
   20094:	e93fff04 	addi	r4,ea,-4
   20098:	00201c40 	call	201c4 <alt_instruction_exception_entry>
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>
   200a0:	ebffff04 	addi	r15,ea,-4
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffc15 	stw	r2,-16(fp)

  return active;
   20118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0ffff17 	ldw	r3,-4(fp)
   20130:	e0bffe17 	ldw	r2,-8(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001126 	beq	r2,zero,20180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	e0bffd17 	ldw	r2,-12(fp)
   20140:	100690fa 	slli	r3,r2,3
   20144:	008000b4 	movhi	r2,2
   20148:	1885883a 	add	r2,r3,r2
   2014c:	10da0917 	ldw	r3,26660(r2)
   20150:	e0bffd17 	ldw	r2,-12(fp)
   20154:	100890fa 	slli	r4,r2,3
   20158:	008000b4 	movhi	r2,2
   2015c:	2085883a 	add	r2,r4,r2
   20160:	109a0a17 	ldw	r2,26664(r2)
   20164:	1009883a 	mov	r4,r2
   20168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   2016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
   20170:	0005313a 	rdctl	r2,ipending
   20174:	e0bffb15 	stw	r2,-20(fp)
  return active;
   20178:	e0bffb17 	ldw	r2,-20(fp)
   2017c:	00000706 	br	2019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
   20180:	e0bffe17 	ldw	r2,-8(fp)
   20184:	1085883a 	add	r2,r2,r2
   20188:	e0bffe15 	stw	r2,-8(fp)
      i++;
   2018c:	e0bffd17 	ldw	r2,-12(fp)
   20190:	10800044 	addi	r2,r2,1
   20194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
   20198:	003fe406 	br	2012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
   2019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   201a0:	e0bfff17 	ldw	r2,-4(fp)
   201a4:	103fde1e 	bne	r2,zero,20120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201a8:	0001883a 	nop
}
   201ac:	0001883a 	nop
   201b0:	e037883a 	mov	sp,fp
   201b4:	dfc00117 	ldw	ra,4(sp)
   201b8:	df000017 	ldw	fp,0(sp)
   201bc:	dec00204 	addi	sp,sp,8
   201c0:	f800283a 	ret

000201c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201c4:	defffb04 	addi	sp,sp,-20
   201c8:	dfc00415 	stw	ra,16(sp)
   201cc:	df000315 	stw	fp,12(sp)
   201d0:	df000304 	addi	fp,sp,12
   201d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201d8:	00bfffc4 	movi	r2,-1
   201dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
   201e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201e4:	d0a2c617 	ldw	r2,-29928(gp)
   201e8:	10000726 	beq	r2,zero,20208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201ec:	d0a2c617 	ldw	r2,-29928(gp)
   201f0:	e0ffff17 	ldw	r3,-4(fp)
   201f4:	e1bffe17 	ldw	r6,-8(fp)
   201f8:	e17ffd17 	ldw	r5,-12(fp)
   201fc:	1809883a 	mov	r4,r3
   20200:	103ee83a 	callr	r2
   20204:	00000206 	br	20210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2020c:	0005883a 	mov	r2,zero
}
   20210:	e037883a 	mov	sp,fp
   20214:	dfc00117 	ldw	ra,4(sp)
   20218:	df000017 	ldw	fp,0(sp)
   2021c:	dec00204 	addi	sp,sp,8
   20220:	f800283a 	ret

Disassembly of section .text:

00020224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20224:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20228:	dec60014 	ori	sp,sp,6144
    movhi gp, %hi(_gp)
   2022c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   20230:	d6b73814 	ori	gp,gp,56544
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20234:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20238:	1099f614 	ori	r2,r2,26584

    movhi r3, %hi(__bss_end)
   2023c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   20240:	18da4914 	ori	r3,r3,26916

    beq r2, r3, 1f
   20244:	10c00326 	beq	r2,r3,20254 <_start+0x30>

0:
    stw zero, (r2)
   20248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20250:	10fffd36 	bltu	r2,r3,20248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20254:	00234800 	call	23480 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20258:	00236200 	call	23620 <alt_main>

0002025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2025c:	003fff06 	br	2025c <alt_after_alt_main>

00020260 <main>:
 */

#include <stdio.h>
#include "system.h"
int main()
{
   20260:	defffc04 	addi	sp,sp,-16
   20264:	dfc00315 	stw	ra,12(sp)
   20268:	df000215 	stw	fp,8(sp)
   2026c:	df000204 	addi	fp,sp,8
  printf("Hello from Nios II!\n");
   20270:	010000b4 	movhi	r4,2
   20274:	21148304 	addi	r4,r4,21004
   20278:	00203800 	call	20380 <puts>
  int * uart_address = (int * )UART_0_BASE;
   2027c:	00800134 	movhi	r2,4
   20280:	10840004 	addi	r2,r2,4096
   20284:	e0bfff15 	stw	r2,-4(fp)
  int * ocm_address = (int * )ON_CHIP_MEM_BASE;
   20288:	008000b4 	movhi	r2,2
   2028c:	e0bffe15 	stw	r2,-8(fp)
  //teseting to see if the address ever works:

  while (1){
	  *uart_address = 0x1234;
   20290:	e0bfff17 	ldw	r2,-4(fp)
   20294:	00c48d04 	movi	r3,4660
   20298:	10c00015 	stw	r3,0(r2)
	  *ocm_address  = 0xabce;
   2029c:	e0bffe17 	ldw	r2,-8(fp)
   202a0:	00eaf394 	movui	r3,43982
   202a4:	10c00015 	stw	r3,0(r2)
	  *uart_address = 0x1234;
   202a8:	0001883a 	nop
   202ac:	003ff806 	br	20290 <main+0x30>

000202b0 <_puts_r>:
   202b0:	defff504 	addi	sp,sp,-44
   202b4:	dc000815 	stw	r16,32(sp)
   202b8:	2021883a 	mov	r16,r4
   202bc:	2809883a 	mov	r4,r5
   202c0:	dc400915 	stw	r17,36(sp)
   202c4:	dfc00a15 	stw	ra,40(sp)
   202c8:	2823883a 	mov	r17,r5
   202cc:	00203900 	call	20390 <strlen>
   202d0:	11000044 	addi	r4,r2,1
   202d4:	d8800515 	stw	r2,20(sp)
   202d8:	00800044 	movi	r2,1
   202dc:	00c000b4 	movhi	r3,2
   202e0:	d8800715 	stw	r2,28(sp)
   202e4:	d8800404 	addi	r2,sp,16
   202e8:	18d48804 	addi	r3,r3,21024
   202ec:	d8800115 	stw	r2,4(sp)
   202f0:	00800084 	movi	r2,2
   202f4:	dc400415 	stw	r17,16(sp)
   202f8:	d8c00615 	stw	r3,24(sp)
   202fc:	d9000315 	stw	r4,12(sp)
   20300:	d8800215 	stw	r2,8(sp)
   20304:	81400217 	ldw	r5,8(r16)
   20308:	80000226 	beq	r16,zero,20314 <_puts_r+0x64>
   2030c:	80800e17 	ldw	r2,56(r16)
   20310:	10001426 	beq	r2,zero,20364 <_puts_r+0xb4>
   20314:	2880030b 	ldhu	r2,12(r5)
   20318:	10c8000c 	andi	r3,r2,8192
   2031c:	1800061e 	bne	r3,zero,20338 <_puts_r+0x88>
   20320:	28c01917 	ldw	r3,100(r5)
   20324:	0137ffc4 	movi	r4,-8193
   20328:	10880014 	ori	r2,r2,8192
   2032c:	1906703a 	and	r3,r3,r4
   20330:	2880030d 	sth	r2,12(r5)
   20334:	28c01915 	stw	r3,100(r5)
   20338:	d9800104 	addi	r6,sp,4
   2033c:	8009883a 	mov	r4,r16
   20340:	00207b40 	call	207b4 <__sfvwrite_r>
   20344:	1007883a 	mov	r3,r2
   20348:	00800284 	movi	r2,10
   2034c:	18000a1e 	bne	r3,zero,20378 <_puts_r+0xc8>
   20350:	dfc00a17 	ldw	ra,40(sp)
   20354:	dc400917 	ldw	r17,36(sp)
   20358:	dc000817 	ldw	r16,32(sp)
   2035c:	dec00b04 	addi	sp,sp,44
   20360:	f800283a 	ret
   20364:	8009883a 	mov	r4,r16
   20368:	d9400015 	stw	r5,0(sp)
   2036c:	002076c0 	call	2076c <__sinit>
   20370:	d9400017 	ldw	r5,0(sp)
   20374:	003fe706 	br	20314 <_puts_r+0x64>
   20378:	00bfffc4 	movi	r2,-1
   2037c:	003ff406 	br	20350 <_puts_r+0xa0>

00020380 <puts>:
   20380:	008000b4 	movhi	r2,2
   20384:	200b883a 	mov	r5,r4
   20388:	11173917 	ldw	r4,23780(r2)
   2038c:	00202b01 	jmpi	202b0 <_puts_r>

00020390 <strlen>:
   20390:	208000cc 	andi	r2,r4,3
   20394:	10000926 	beq	r2,zero,203bc <strlen+0x2c>
   20398:	2005883a 	mov	r2,r4
   2039c:	00000306 	br	203ac <strlen+0x1c>
   203a0:	10800044 	addi	r2,r2,1
   203a4:	10c000cc 	andi	r3,r2,3
   203a8:	18000526 	beq	r3,zero,203c0 <strlen+0x30>
   203ac:	10c00007 	ldb	r3,0(r2)
   203b0:	183ffb1e 	bne	r3,zero,203a0 <strlen+0x10>
   203b4:	1105c83a 	sub	r2,r2,r4
   203b8:	f800283a 	ret
   203bc:	2005883a 	mov	r2,r4
   203c0:	11400017 	ldw	r5,0(r2)
   203c4:	01ffbff4 	movhi	r7,65279
   203c8:	39ffbfc4 	addi	r7,r7,-257
   203cc:	29c7883a 	add	r3,r5,r7
   203d0:	01a02074 	movhi	r6,32897
   203d4:	014a303a 	nor	r5,zero,r5
   203d8:	1946703a 	and	r3,r3,r5
   203dc:	31a02004 	addi	r6,r6,-32640
   203e0:	1986703a 	and	r3,r3,r6
   203e4:	1800071e 	bne	r3,zero,20404 <strlen+0x74>
   203e8:	11400117 	ldw	r5,4(r2)
   203ec:	10800104 	addi	r2,r2,4
   203f0:	29c7883a 	add	r3,r5,r7
   203f4:	014a303a 	nor	r5,zero,r5
   203f8:	1946703a 	and	r3,r3,r5
   203fc:	1986703a 	and	r3,r3,r6
   20400:	183ff926 	beq	r3,zero,203e8 <strlen+0x58>
   20404:	10c00007 	ldb	r3,0(r2)
   20408:	183fea26 	beq	r3,zero,203b4 <strlen+0x24>
   2040c:	10c00047 	ldb	r3,1(r2)
   20410:	10800044 	addi	r2,r2,1
   20414:	183fe726 	beq	r3,zero,203b4 <strlen+0x24>
   20418:	10c00047 	ldb	r3,1(r2)
   2041c:	10800044 	addi	r2,r2,1
   20420:	183ffa1e 	bne	r3,zero,2040c <strlen+0x7c>
   20424:	003fe306 	br	203b4 <strlen+0x24>

00020428 <__fp_lock>:
   20428:	0005883a 	mov	r2,zero
   2042c:	f800283a 	ret

00020430 <_cleanup_r>:
   20430:	014000b4 	movhi	r5,2
   20434:	2948d204 	addi	r5,r5,9032
   20438:	0020cf41 	jmpi	20cf4 <_fwalk_reent>

0002043c <__fp_unlock>:
   2043c:	0005883a 	mov	r2,zero
   20440:	f800283a 	ret

00020444 <__sinit.part.0>:
   20444:	00c000b4 	movhi	r3,2
   20448:	20800117 	ldw	r2,4(r4)
   2044c:	18c10c04 	addi	r3,r3,1072
   20450:	20c00f15 	stw	r3,60(r4)
   20454:	2140bb04 	addi	r5,r4,748
   20458:	00c000c4 	movi	r3,3
   2045c:	20c0b915 	stw	r3,740(r4)
   20460:	2140ba15 	stw	r5,744(r4)
   20464:	2000b815 	stw	zero,736(r4)
   20468:	10001705 	stb	zero,92(r2)
   2046c:	10001745 	stb	zero,93(r2)
   20470:	10001785 	stb	zero,94(r2)
   20474:	100017c5 	stb	zero,95(r2)
   20478:	10001805 	stb	zero,96(r2)
   2047c:	10001845 	stb	zero,97(r2)
   20480:	10001885 	stb	zero,98(r2)
   20484:	100018c5 	stb	zero,99(r2)
   20488:	00c00104 	movi	r3,4
   2048c:	10c00315 	stw	r3,12(r2)
   20490:	020000b4 	movhi	r8,2
   20494:	20c00217 	ldw	r3,8(r4)
   20498:	01c000b4 	movhi	r7,2
   2049c:	018000b4 	movhi	r6,2
   204a0:	014000b4 	movhi	r5,2
   204a4:	42080004 	addi	r8,r8,8192
   204a8:	39c81704 	addi	r7,r7,8284
   204ac:	31883704 	addi	r6,r6,8412
   204b0:	29484e04 	addi	r5,r5,8504
   204b4:	02400074 	movhi	r9,1
   204b8:	10000015 	stw	zero,0(r2)
   204bc:	10000115 	stw	zero,4(r2)
   204c0:	10000215 	stw	zero,8(r2)
   204c4:	10001915 	stw	zero,100(r2)
   204c8:	10000415 	stw	zero,16(r2)
   204cc:	10000515 	stw	zero,20(r2)
   204d0:	10000615 	stw	zero,24(r2)
   204d4:	10800715 	stw	r2,28(r2)
   204d8:	12000815 	stw	r8,32(r2)
   204dc:	11c00915 	stw	r7,36(r2)
   204e0:	11800a15 	stw	r6,40(r2)
   204e4:	11400b15 	stw	r5,44(r2)
   204e8:	4a400284 	addi	r9,r9,10
   204ec:	1a400315 	stw	r9,12(r3)
   204f0:	18000015 	stw	zero,0(r3)
   204f4:	18000115 	stw	zero,4(r3)
   204f8:	18000215 	stw	zero,8(r3)
   204fc:	18001915 	stw	zero,100(r3)
   20500:	18000415 	stw	zero,16(r3)
   20504:	18001705 	stb	zero,92(r3)
   20508:	18001745 	stb	zero,93(r3)
   2050c:	18001785 	stb	zero,94(r3)
   20510:	180017c5 	stb	zero,95(r3)
   20514:	18001805 	stb	zero,96(r3)
   20518:	18001845 	stb	zero,97(r3)
   2051c:	18001885 	stb	zero,98(r3)
   20520:	180018c5 	stb	zero,99(r3)
   20524:	20800317 	ldw	r2,12(r4)
   20528:	024000b4 	movhi	r9,2
   2052c:	18000515 	stw	zero,20(r3)
   20530:	18000615 	stw	zero,24(r3)
   20534:	18c00715 	stw	r3,28(r3)
   20538:	1a000815 	stw	r8,32(r3)
   2053c:	19c00915 	stw	r7,36(r3)
   20540:	19800a15 	stw	r6,40(r3)
   20544:	19400b15 	stw	r5,44(r3)
   20548:	4a400484 	addi	r9,r9,18
   2054c:	10000015 	stw	zero,0(r2)
   20550:	10000115 	stw	zero,4(r2)
   20554:	10000215 	stw	zero,8(r2)
   20558:	10001915 	stw	zero,100(r2)
   2055c:	12400315 	stw	r9,12(r2)
   20560:	10000415 	stw	zero,16(r2)
   20564:	10000515 	stw	zero,20(r2)
   20568:	10000615 	stw	zero,24(r2)
   2056c:	10001705 	stb	zero,92(r2)
   20570:	10001745 	stb	zero,93(r2)
   20574:	10001785 	stb	zero,94(r2)
   20578:	100017c5 	stb	zero,95(r2)
   2057c:	10001805 	stb	zero,96(r2)
   20580:	10001845 	stb	zero,97(r2)
   20584:	10001885 	stb	zero,98(r2)
   20588:	100018c5 	stb	zero,99(r2)
   2058c:	10800715 	stw	r2,28(r2)
   20590:	12000815 	stw	r8,32(r2)
   20594:	11c00915 	stw	r7,36(r2)
   20598:	11800a15 	stw	r6,40(r2)
   2059c:	11400b15 	stw	r5,44(r2)
   205a0:	00800044 	movi	r2,1
   205a4:	20800e15 	stw	r2,56(r4)
   205a8:	f800283a 	ret

000205ac <__sfmoreglue>:
   205ac:	defffc04 	addi	sp,sp,-16
   205b0:	dc800215 	stw	r18,8(sp)
   205b4:	2825883a 	mov	r18,r5
   205b8:	dc000015 	stw	r16,0(sp)
   205bc:	01401a04 	movi	r5,104
   205c0:	2021883a 	mov	r16,r4
   205c4:	913fffc4 	addi	r4,r18,-1
   205c8:	dfc00315 	stw	ra,12(sp)
   205cc:	dc400115 	stw	r17,4(sp)
   205d0:	00230c80 	call	230c8 <__mulsi3>
   205d4:	8009883a 	mov	r4,r16
   205d8:	11401d04 	addi	r5,r2,116
   205dc:	1023883a 	mov	r17,r2
   205e0:	0020d9c0 	call	20d9c <_malloc_r>
   205e4:	1021883a 	mov	r16,r2
   205e8:	10000726 	beq	r2,zero,20608 <__sfmoreglue+0x5c>
   205ec:	11000304 	addi	r4,r2,12
   205f0:	10000015 	stw	zero,0(r2)
   205f4:	14800115 	stw	r18,4(r2)
   205f8:	11000215 	stw	r4,8(r2)
   205fc:	89801a04 	addi	r6,r17,104
   20600:	000b883a 	mov	r5,zero
   20604:	00218740 	call	21874 <memset>
   20608:	8005883a 	mov	r2,r16
   2060c:	dfc00317 	ldw	ra,12(sp)
   20610:	dc800217 	ldw	r18,8(sp)
   20614:	dc400117 	ldw	r17,4(sp)
   20618:	dc000017 	ldw	r16,0(sp)
   2061c:	dec00404 	addi	sp,sp,16
   20620:	f800283a 	ret

00020624 <__sfp>:
   20624:	defffc04 	addi	sp,sp,-16
   20628:	008000b4 	movhi	r2,2
   2062c:	dc400115 	stw	r17,4(sp)
   20630:	14573817 	ldw	r17,23776(r2)
   20634:	dc800215 	stw	r18,8(sp)
   20638:	dfc00315 	stw	ra,12(sp)
   2063c:	88800e17 	ldw	r2,56(r17)
   20640:	dc000015 	stw	r16,0(sp)
   20644:	2025883a 	mov	r18,r4
   20648:	10002d26 	beq	r2,zero,20700 <__sfp+0xdc>
   2064c:	8c40b804 	addi	r17,r17,736
   20650:	88800117 	ldw	r2,4(r17)
   20654:	8c000217 	ldw	r16,8(r17)
   20658:	10bfffc4 	addi	r2,r2,-1
   2065c:	1000030e 	bge	r2,zero,2066c <__sfp+0x48>
   20660:	00002306 	br	206f0 <__sfp+0xcc>
   20664:	84001a04 	addi	r16,r16,104
   20668:	28002126 	beq	r5,zero,206f0 <__sfp+0xcc>
   2066c:	80c0030f 	ldh	r3,12(r16)
   20670:	10bfffc4 	addi	r2,r2,-1
   20674:	117fffd8 	cmpnei	r5,r2,-1
   20678:	183ffa1e 	bne	r3,zero,20664 <__sfp+0x40>
   2067c:	00bffff4 	movhi	r2,65535
   20680:	10800044 	addi	r2,r2,1
   20684:	80800315 	stw	r2,12(r16)
   20688:	80001915 	stw	zero,100(r16)
   2068c:	80000015 	stw	zero,0(r16)
   20690:	80000215 	stw	zero,8(r16)
   20694:	80000115 	stw	zero,4(r16)
   20698:	80000415 	stw	zero,16(r16)
   2069c:	80000515 	stw	zero,20(r16)
   206a0:	80000615 	stw	zero,24(r16)
   206a4:	80001705 	stb	zero,92(r16)
   206a8:	80001745 	stb	zero,93(r16)
   206ac:	80001785 	stb	zero,94(r16)
   206b0:	800017c5 	stb	zero,95(r16)
   206b4:	80001805 	stb	zero,96(r16)
   206b8:	80001845 	stb	zero,97(r16)
   206bc:	80001885 	stb	zero,98(r16)
   206c0:	800018c5 	stb	zero,99(r16)
   206c4:	80000c15 	stw	zero,48(r16)
   206c8:	80000d15 	stw	zero,52(r16)
   206cc:	80001115 	stw	zero,68(r16)
   206d0:	80001215 	stw	zero,72(r16)
   206d4:	8005883a 	mov	r2,r16
   206d8:	dfc00317 	ldw	ra,12(sp)
   206dc:	dc800217 	ldw	r18,8(sp)
   206e0:	dc400117 	ldw	r17,4(sp)
   206e4:	dc000017 	ldw	r16,0(sp)
   206e8:	dec00404 	addi	sp,sp,16
   206ec:	f800283a 	ret
   206f0:	8c000017 	ldw	r16,0(r17)
   206f4:	80000526 	beq	r16,zero,2070c <__sfp+0xe8>
   206f8:	8023883a 	mov	r17,r16
   206fc:	003fd406 	br	20650 <__sfp+0x2c>
   20700:	8809883a 	mov	r4,r17
   20704:	00204440 	call	20444 <__sinit.part.0>
   20708:	003fd006 	br	2064c <__sfp+0x28>
   2070c:	01406b04 	movi	r5,428
   20710:	9009883a 	mov	r4,r18
   20714:	0020d9c0 	call	20d9c <_malloc_r>
   20718:	1021883a 	mov	r16,r2
   2071c:	10000a26 	beq	r2,zero,20748 <__sfp+0x124>
   20720:	10000015 	stw	zero,0(r2)
   20724:	11000304 	addi	r4,r2,12
   20728:	00800104 	movi	r2,4
   2072c:	80800115 	stw	r2,4(r16)
   20730:	81000215 	stw	r4,8(r16)
   20734:	01806804 	movi	r6,416
   20738:	000b883a 	mov	r5,zero
   2073c:	00218740 	call	21874 <memset>
   20740:	8c000015 	stw	r16,0(r17)
   20744:	003fec06 	br	206f8 <__sfp+0xd4>
   20748:	88000015 	stw	zero,0(r17)
   2074c:	00800304 	movi	r2,12
   20750:	90800015 	stw	r2,0(r18)
   20754:	003fdf06 	br	206d4 <__sfp+0xb0>

00020758 <_cleanup>:
   20758:	008000b4 	movhi	r2,2
   2075c:	11173817 	ldw	r4,23776(r2)
   20760:	014000b4 	movhi	r5,2
   20764:	2948d204 	addi	r5,r5,9032
   20768:	0020cf41 	jmpi	20cf4 <_fwalk_reent>

0002076c <__sinit>:
   2076c:	20800e17 	ldw	r2,56(r4)
   20770:	10000126 	beq	r2,zero,20778 <__sinit+0xc>
   20774:	f800283a 	ret
   20778:	00204441 	jmpi	20444 <__sinit.part.0>

0002077c <__sfp_lock_acquire>:
   2077c:	f800283a 	ret

00020780 <__sfp_lock_release>:
   20780:	f800283a 	ret

00020784 <__sinit_lock_acquire>:
   20784:	f800283a 	ret

00020788 <__sinit_lock_release>:
   20788:	f800283a 	ret

0002078c <__fp_lock_all>:
   2078c:	008000b4 	movhi	r2,2
   20790:	11173917 	ldw	r4,23780(r2)
   20794:	014000b4 	movhi	r5,2
   20798:	29410a04 	addi	r5,r5,1064
   2079c:	0020c5c1 	jmpi	20c5c <_fwalk>

000207a0 <__fp_unlock_all>:
   207a0:	008000b4 	movhi	r2,2
   207a4:	11173917 	ldw	r4,23780(r2)
   207a8:	014000b4 	movhi	r5,2
   207ac:	29410f04 	addi	r5,r5,1084
   207b0:	0020c5c1 	jmpi	20c5c <_fwalk>

000207b4 <__sfvwrite_r>:
   207b4:	30800217 	ldw	r2,8(r6)
   207b8:	1000c426 	beq	r2,zero,20acc <__sfvwrite_r+0x318>
   207bc:	2a80030b 	ldhu	r10,12(r5)
   207c0:	defff504 	addi	sp,sp,-44
   207c4:	df000915 	stw	fp,36(sp)
   207c8:	dcc00415 	stw	r19,16(sp)
   207cc:	dc000115 	stw	r16,4(sp)
   207d0:	dfc00a15 	stw	ra,40(sp)
   207d4:	ddc00815 	stw	r23,32(sp)
   207d8:	dd800715 	stw	r22,28(sp)
   207dc:	dd400615 	stw	r21,24(sp)
   207e0:	dd000515 	stw	r20,20(sp)
   207e4:	dc800315 	stw	r18,12(sp)
   207e8:	dc400215 	stw	r17,8(sp)
   207ec:	5080020c 	andi	r2,r10,8
   207f0:	3039883a 	mov	fp,r6
   207f4:	2027883a 	mov	r19,r4
   207f8:	2821883a 	mov	r16,r5
   207fc:	10002226 	beq	r2,zero,20888 <__sfvwrite_r+0xd4>
   20800:	28800417 	ldw	r2,16(r5)
   20804:	10002026 	beq	r2,zero,20888 <__sfvwrite_r+0xd4>
   20808:	5080008c 	andi	r2,r10,2
   2080c:	e4400017 	ldw	r17,0(fp)
   20810:	10002526 	beq	r2,zero,208a8 <__sfvwrite_r+0xf4>
   20814:	80800917 	ldw	r2,36(r16)
   20818:	81400717 	ldw	r5,28(r16)
   2081c:	05600034 	movhi	r21,32768
   20820:	0029883a 	mov	r20,zero
   20824:	0025883a 	mov	r18,zero
   20828:	ad7f0004 	addi	r21,r21,-1024
   2082c:	a00d883a 	mov	r6,r20
   20830:	9809883a 	mov	r4,r19
   20834:	90001026 	beq	r18,zero,20878 <__sfvwrite_r+0xc4>
   20838:	900f883a 	mov	r7,r18
   2083c:	ac80012e 	bgeu	r21,r18,20844 <__sfvwrite_r+0x90>
   20840:	a80f883a 	mov	r7,r21
   20844:	103ee83a 	callr	r2
   20848:	00809b0e 	bge	zero,r2,20ab8 <__sfvwrite_r+0x304>
   2084c:	e0c00217 	ldw	r3,8(fp)
   20850:	a0a9883a 	add	r20,r20,r2
   20854:	90a5c83a 	sub	r18,r18,r2
   20858:	1885c83a 	sub	r2,r3,r2
   2085c:	e0800215 	stw	r2,8(fp)
   20860:	10008426 	beq	r2,zero,20a74 <__sfvwrite_r+0x2c0>
   20864:	80800917 	ldw	r2,36(r16)
   20868:	81400717 	ldw	r5,28(r16)
   2086c:	a00d883a 	mov	r6,r20
   20870:	9809883a 	mov	r4,r19
   20874:	903ff01e 	bne	r18,zero,20838 <__sfvwrite_r+0x84>
   20878:	8d000017 	ldw	r20,0(r17)
   2087c:	8c800117 	ldw	r18,4(r17)
   20880:	8c400204 	addi	r17,r17,8
   20884:	003fe906 	br	2082c <__sfvwrite_r+0x78>
   20888:	800b883a 	mov	r5,r16
   2088c:	9809883a 	mov	r4,r19
   20890:	00221a40 	call	221a4 <__swsetup_r>
   20894:	10008b1e 	bne	r2,zero,20ac4 <__sfvwrite_r+0x310>
   20898:	8280030b 	ldhu	r10,12(r16)
   2089c:	e4400017 	ldw	r17,0(fp)
   208a0:	5080008c 	andi	r2,r10,2
   208a4:	103fdb1e 	bne	r2,zero,20814 <__sfvwrite_r+0x60>
   208a8:	5080004c 	andi	r2,r10,1
   208ac:	10004f1e 	bne	r2,zero,209ec <__sfvwrite_r+0x238>
   208b0:	00a00034 	movhi	r2,32768
   208b4:	81c00017 	ldw	r7,0(r16)
   208b8:	80c00217 	ldw	r3,8(r16)
   208bc:	10bfffc4 	addi	r2,r2,-1
   208c0:	002d883a 	mov	r22,zero
   208c4:	0025883a 	mov	r18,zero
   208c8:	d8800015 	stw	r2,0(sp)
   208cc:	3809883a 	mov	r4,r7
   208d0:	1829883a 	mov	r20,r3
   208d4:	90004126 	beq	r18,zero,209dc <__sfvwrite_r+0x228>
   208d8:	5080800c 	andi	r2,r10,512
   208dc:	10009526 	beq	r2,zero,20b34 <__sfvwrite_r+0x380>
   208e0:	182b883a 	mov	r21,r3
   208e4:	90c0ba36 	bltu	r18,r3,20bd0 <__sfvwrite_r+0x41c>
   208e8:	5081200c 	andi	r2,r10,1152
   208ec:	10002526 	beq	r2,zero,20984 <__sfvwrite_r+0x1d0>
   208f0:	80c00517 	ldw	r3,20(r16)
   208f4:	81000417 	ldw	r4,16(r16)
   208f8:	18c5883a 	add	r2,r3,r3
   208fc:	10c5883a 	add	r2,r2,r3
   20900:	1012d7fa 	srli	r9,r2,31
   20904:	392fc83a 	sub	r23,r7,r4
   20908:	b8c00044 	addi	r3,r23,1
   2090c:	4893883a 	add	r9,r9,r2
   20910:	4829d07a 	srai	r20,r9,1
   20914:	1c85883a 	add	r2,r3,r18
   20918:	a00b883a 	mov	r5,r20
   2091c:	a080022e 	bgeu	r20,r2,20928 <__sfvwrite_r+0x174>
   20920:	1029883a 	mov	r20,r2
   20924:	100b883a 	mov	r5,r2
   20928:	5281000c 	andi	r10,r10,1024
   2092c:	5000b926 	beq	r10,zero,20c14 <__sfvwrite_r+0x460>
   20930:	9809883a 	mov	r4,r19
   20934:	0020d9c0 	call	20d9c <_malloc_r>
   20938:	1000c426 	beq	r2,zero,20c4c <__sfvwrite_r+0x498>
   2093c:	81400417 	ldw	r5,16(r16)
   20940:	1009883a 	mov	r4,r2
   20944:	b80d883a 	mov	r6,r23
   20948:	002164c0 	call	2164c <memcpy>
   2094c:	1007883a 	mov	r3,r2
   20950:	8080030b 	ldhu	r2,12(r16)
   20954:	013edfc4 	movi	r4,-1153
   20958:	1104703a 	and	r2,r2,r4
   2095c:	10802014 	ori	r2,r2,128
   20960:	8080030d 	sth	r2,12(r16)
   20964:	a5cfc83a 	sub	r7,r20,r23
   20968:	1dc9883a 	add	r4,r3,r23
   2096c:	85000515 	stw	r20,20(r16)
   20970:	80c00415 	stw	r3,16(r16)
   20974:	81000015 	stw	r4,0(r16)
   20978:	9029883a 	mov	r20,r18
   2097c:	81c00215 	stw	r7,8(r16)
   20980:	902b883a 	mov	r21,r18
   20984:	a80d883a 	mov	r6,r21
   20988:	b00b883a 	mov	r5,r22
   2098c:	002174c0 	call	2174c <memmove>
   20990:	80c00217 	ldw	r3,8(r16)
   20994:	81c00017 	ldw	r7,0(r16)
   20998:	902f883a 	mov	r23,r18
   2099c:	1d07c83a 	sub	r3,r3,r20
   209a0:	3d4d883a 	add	r6,r7,r21
   209a4:	80c00215 	stw	r3,8(r16)
   209a8:	81800015 	stw	r6,0(r16)
   209ac:	0025883a 	mov	r18,zero
   209b0:	e0800217 	ldw	r2,8(fp)
   209b4:	b5ed883a 	add	r22,r22,r23
   209b8:	15c5c83a 	sub	r2,r2,r23
   209bc:	e0800215 	stw	r2,8(fp)
   209c0:	10002c26 	beq	r2,zero,20a74 <__sfvwrite_r+0x2c0>
   209c4:	81c00017 	ldw	r7,0(r16)
   209c8:	80c00217 	ldw	r3,8(r16)
   209cc:	8280030b 	ldhu	r10,12(r16)
   209d0:	3809883a 	mov	r4,r7
   209d4:	1829883a 	mov	r20,r3
   209d8:	903fbf1e 	bne	r18,zero,208d8 <__sfvwrite_r+0x124>
   209dc:	8d800017 	ldw	r22,0(r17)
   209e0:	8c800117 	ldw	r18,4(r17)
   209e4:	8c400204 	addi	r17,r17,8
   209e8:	003fb806 	br	208cc <__sfvwrite_r+0x118>
   209ec:	002f883a 	mov	r23,zero
   209f0:	0005883a 	mov	r2,zero
   209f4:	002b883a 	mov	r21,zero
   209f8:	0029883a 	mov	r20,zero
   209fc:	a0003526 	beq	r20,zero,20ad4 <__sfvwrite_r+0x320>
   20a00:	10003926 	beq	r2,zero,20ae8 <__sfvwrite_r+0x334>
   20a04:	b805883a 	mov	r2,r23
   20a08:	a02d883a 	mov	r22,r20
   20a0c:	1500012e 	bgeu	r2,r20,20a14 <__sfvwrite_r+0x260>
   20a10:	102d883a 	mov	r22,r2
   20a14:	81000017 	ldw	r4,0(r16)
   20a18:	80800417 	ldw	r2,16(r16)
   20a1c:	84800217 	ldw	r18,8(r16)
   20a20:	81c00517 	ldw	r7,20(r16)
   20a24:	1100022e 	bgeu	r2,r4,20a30 <__sfvwrite_r+0x27c>
   20a28:	91e5883a 	add	r18,r18,r7
   20a2c:	95803616 	blt	r18,r22,20b08 <__sfvwrite_r+0x354>
   20a30:	b1c06a16 	blt	r22,r7,20bdc <__sfvwrite_r+0x428>
   20a34:	80800917 	ldw	r2,36(r16)
   20a38:	81400717 	ldw	r5,28(r16)
   20a3c:	a80d883a 	mov	r6,r21
   20a40:	9809883a 	mov	r4,r19
   20a44:	103ee83a 	callr	r2
   20a48:	1025883a 	mov	r18,r2
   20a4c:	00801a0e 	bge	zero,r2,20ab8 <__sfvwrite_r+0x304>
   20a50:	bcafc83a 	sub	r23,r23,r18
   20a54:	b8001426 	beq	r23,zero,20aa8 <__sfvwrite_r+0x2f4>
   20a58:	00800044 	movi	r2,1
   20a5c:	e0c00217 	ldw	r3,8(fp)
   20a60:	acab883a 	add	r21,r21,r18
   20a64:	a4a9c83a 	sub	r20,r20,r18
   20a68:	1c87c83a 	sub	r3,r3,r18
   20a6c:	e0c00215 	stw	r3,8(fp)
   20a70:	183fe21e 	bne	r3,zero,209fc <__sfvwrite_r+0x248>
   20a74:	0005883a 	mov	r2,zero
   20a78:	dfc00a17 	ldw	ra,40(sp)
   20a7c:	df000917 	ldw	fp,36(sp)
   20a80:	ddc00817 	ldw	r23,32(sp)
   20a84:	dd800717 	ldw	r22,28(sp)
   20a88:	dd400617 	ldw	r21,24(sp)
   20a8c:	dd000517 	ldw	r20,20(sp)
   20a90:	dcc00417 	ldw	r19,16(sp)
   20a94:	dc800317 	ldw	r18,12(sp)
   20a98:	dc400217 	ldw	r17,8(sp)
   20a9c:	dc000117 	ldw	r16,4(sp)
   20aa0:	dec00b04 	addi	sp,sp,44
   20aa4:	f800283a 	ret
   20aa8:	800b883a 	mov	r5,r16
   20aac:	9809883a 	mov	r4,r19
   20ab0:	00226580 	call	22658 <_fflush_r>
   20ab4:	103fe926 	beq	r2,zero,20a5c <__sfvwrite_r+0x2a8>
   20ab8:	8080030b 	ldhu	r2,12(r16)
   20abc:	10801014 	ori	r2,r2,64
   20ac0:	8080030d 	sth	r2,12(r16)
   20ac4:	00bfffc4 	movi	r2,-1
   20ac8:	003feb06 	br	20a78 <__sfvwrite_r+0x2c4>
   20acc:	0005883a 	mov	r2,zero
   20ad0:	f800283a 	ret
   20ad4:	8d000117 	ldw	r20,4(r17)
   20ad8:	8805883a 	mov	r2,r17
   20adc:	8c400204 	addi	r17,r17,8
   20ae0:	a03ffc26 	beq	r20,zero,20ad4 <__sfvwrite_r+0x320>
   20ae4:	15400017 	ldw	r21,0(r2)
   20ae8:	a00d883a 	mov	r6,r20
   20aec:	01400284 	movi	r5,10
   20af0:	a809883a 	mov	r4,r21
   20af4:	00215500 	call	21550 <memchr>
   20af8:	10004326 	beq	r2,zero,20c08 <__sfvwrite_r+0x454>
   20afc:	10800044 	addi	r2,r2,1
   20b00:	156fc83a 	sub	r23,r2,r21
   20b04:	003fbf06 	br	20a04 <__sfvwrite_r+0x250>
   20b08:	a80b883a 	mov	r5,r21
   20b0c:	900d883a 	mov	r6,r18
   20b10:	002174c0 	call	2174c <memmove>
   20b14:	80800017 	ldw	r2,0(r16)
   20b18:	800b883a 	mov	r5,r16
   20b1c:	9809883a 	mov	r4,r19
   20b20:	1485883a 	add	r2,r2,r18
   20b24:	80800015 	stw	r2,0(r16)
   20b28:	00226580 	call	22658 <_fflush_r>
   20b2c:	103fc826 	beq	r2,zero,20a50 <__sfvwrite_r+0x29c>
   20b30:	003fe106 	br	20ab8 <__sfvwrite_r+0x304>
   20b34:	80800417 	ldw	r2,16(r16)
   20b38:	11c01236 	bltu	r2,r7,20b84 <__sfvwrite_r+0x3d0>
   20b3c:	81400517 	ldw	r5,20(r16)
   20b40:	91401036 	bltu	r18,r5,20b84 <__sfvwrite_r+0x3d0>
   20b44:	00a00034 	movhi	r2,32768
   20b48:	902f883a 	mov	r23,r18
   20b4c:	90800136 	bltu	r18,r2,20b54 <__sfvwrite_r+0x3a0>
   20b50:	ddc00017 	ldw	r23,0(sp)
   20b54:	b809883a 	mov	r4,r23
   20b58:	0022f940 	call	22f94 <__modsi3>
   20b5c:	80c00917 	ldw	r3,36(r16)
   20b60:	81400717 	ldw	r5,28(r16)
   20b64:	b88fc83a 	sub	r7,r23,r2
   20b68:	b00d883a 	mov	r6,r22
   20b6c:	9809883a 	mov	r4,r19
   20b70:	183ee83a 	callr	r3
   20b74:	102f883a 	mov	r23,r2
   20b78:	00bfcf0e 	bge	zero,r2,20ab8 <__sfvwrite_r+0x304>
   20b7c:	95e5c83a 	sub	r18,r18,r23
   20b80:	003f8b06 	br	209b0 <__sfvwrite_r+0x1fc>
   20b84:	182f883a 	mov	r23,r3
   20b88:	90c0012e 	bgeu	r18,r3,20b90 <__sfvwrite_r+0x3dc>
   20b8c:	902f883a 	mov	r23,r18
   20b90:	3809883a 	mov	r4,r7
   20b94:	b80d883a 	mov	r6,r23
   20b98:	b00b883a 	mov	r5,r22
   20b9c:	002174c0 	call	2174c <memmove>
   20ba0:	80c00217 	ldw	r3,8(r16)
   20ba4:	81c00017 	ldw	r7,0(r16)
   20ba8:	1dc7c83a 	sub	r3,r3,r23
   20bac:	3dcf883a 	add	r7,r7,r23
   20bb0:	80c00215 	stw	r3,8(r16)
   20bb4:	81c00015 	stw	r7,0(r16)
   20bb8:	183ff01e 	bne	r3,zero,20b7c <__sfvwrite_r+0x3c8>
   20bbc:	800b883a 	mov	r5,r16
   20bc0:	9809883a 	mov	r4,r19
   20bc4:	00226580 	call	22658 <_fflush_r>
   20bc8:	103fec26 	beq	r2,zero,20b7c <__sfvwrite_r+0x3c8>
   20bcc:	003fba06 	br	20ab8 <__sfvwrite_r+0x304>
   20bd0:	9029883a 	mov	r20,r18
   20bd4:	902b883a 	mov	r21,r18
   20bd8:	003f6a06 	br	20984 <__sfvwrite_r+0x1d0>
   20bdc:	b00d883a 	mov	r6,r22
   20be0:	a80b883a 	mov	r5,r21
   20be4:	002174c0 	call	2174c <memmove>
   20be8:	80c00217 	ldw	r3,8(r16)
   20bec:	80800017 	ldw	r2,0(r16)
   20bf0:	b025883a 	mov	r18,r22
   20bf4:	1d87c83a 	sub	r3,r3,r22
   20bf8:	1585883a 	add	r2,r2,r22
   20bfc:	80c00215 	stw	r3,8(r16)
   20c00:	80800015 	stw	r2,0(r16)
   20c04:	003f9206 	br	20a50 <__sfvwrite_r+0x29c>
   20c08:	a0800044 	addi	r2,r20,1
   20c0c:	102f883a 	mov	r23,r2
   20c10:	003f7d06 	br	20a08 <__sfvwrite_r+0x254>
   20c14:	280d883a 	mov	r6,r5
   20c18:	200b883a 	mov	r5,r4
   20c1c:	9809883a 	mov	r4,r19
   20c20:	00219b40 	call	219b4 <_realloc_r>
   20c24:	1007883a 	mov	r3,r2
   20c28:	103f4e1e 	bne	r2,zero,20964 <__sfvwrite_r+0x1b0>
   20c2c:	81400417 	ldw	r5,16(r16)
   20c30:	9809883a 	mov	r4,r19
   20c34:	00228600 	call	22860 <_free_r>
   20c38:	8080030b 	ldhu	r2,12(r16)
   20c3c:	00c00304 	movi	r3,12
   20c40:	98c00015 	stw	r3,0(r19)
   20c44:	10bfdfcc 	andi	r2,r2,65407
   20c48:	003f9c06 	br	20abc <__sfvwrite_r+0x308>
   20c4c:	00c00304 	movi	r3,12
   20c50:	8080030b 	ldhu	r2,12(r16)
   20c54:	98c00015 	stw	r3,0(r19)
   20c58:	003f9806 	br	20abc <__sfvwrite_r+0x308>

00020c5c <_fwalk>:
   20c5c:	defffa04 	addi	sp,sp,-24
   20c60:	dd000415 	stw	r20,16(sp)
   20c64:	dcc00315 	stw	r19,12(sp)
   20c68:	dc800215 	stw	r18,8(sp)
   20c6c:	dfc00515 	stw	ra,20(sp)
   20c70:	dc400115 	stw	r17,4(sp)
   20c74:	dc000015 	stw	r16,0(sp)
   20c78:	2827883a 	mov	r19,r5
   20c7c:	2480b804 	addi	r18,r4,736
   20c80:	0029883a 	mov	r20,zero
   20c84:	94400117 	ldw	r17,4(r18)
   20c88:	94000217 	ldw	r16,8(r18)
   20c8c:	8c7fffc4 	addi	r17,r17,-1
   20c90:	88000d16 	blt	r17,zero,20cc8 <_fwalk+0x6c>
   20c94:	8080030b 	ldhu	r2,12(r16)
   20c98:	8c7fffc4 	addi	r17,r17,-1
   20c9c:	108000b0 	cmpltui	r2,r2,2
   20ca0:	1000061e 	bne	r2,zero,20cbc <_fwalk+0x60>
   20ca4:	8080038f 	ldh	r2,14(r16)
   20ca8:	8009883a 	mov	r4,r16
   20cac:	10bfffe0 	cmpeqi	r2,r2,-1
   20cb0:	1000021e 	bne	r2,zero,20cbc <_fwalk+0x60>
   20cb4:	983ee83a 	callr	r19
   20cb8:	a0a8b03a 	or	r20,r20,r2
   20cbc:	88bfffd8 	cmpnei	r2,r17,-1
   20cc0:	84001a04 	addi	r16,r16,104
   20cc4:	103ff31e 	bne	r2,zero,20c94 <_fwalk+0x38>
   20cc8:	94800017 	ldw	r18,0(r18)
   20ccc:	903fed1e 	bne	r18,zero,20c84 <_fwalk+0x28>
   20cd0:	a005883a 	mov	r2,r20
   20cd4:	dfc00517 	ldw	ra,20(sp)
   20cd8:	dd000417 	ldw	r20,16(sp)
   20cdc:	dcc00317 	ldw	r19,12(sp)
   20ce0:	dc800217 	ldw	r18,8(sp)
   20ce4:	dc400117 	ldw	r17,4(sp)
   20ce8:	dc000017 	ldw	r16,0(sp)
   20cec:	dec00604 	addi	sp,sp,24
   20cf0:	f800283a 	ret

00020cf4 <_fwalk_reent>:
   20cf4:	defff904 	addi	sp,sp,-28
   20cf8:	dd400515 	stw	r21,20(sp)
   20cfc:	dd000415 	stw	r20,16(sp)
   20d00:	dcc00315 	stw	r19,12(sp)
   20d04:	dc800215 	stw	r18,8(sp)
   20d08:	dfc00615 	stw	ra,24(sp)
   20d0c:	dc400115 	stw	r17,4(sp)
   20d10:	dc000015 	stw	r16,0(sp)
   20d14:	2025883a 	mov	r18,r4
   20d18:	2829883a 	mov	r20,r5
   20d1c:	24c0b804 	addi	r19,r4,736
   20d20:	002b883a 	mov	r21,zero
   20d24:	9c400117 	ldw	r17,4(r19)
   20d28:	9c000217 	ldw	r16,8(r19)
   20d2c:	8c7fffc4 	addi	r17,r17,-1
   20d30:	88000e16 	blt	r17,zero,20d6c <_fwalk_reent+0x78>
   20d34:	8080030b 	ldhu	r2,12(r16)
   20d38:	8c7fffc4 	addi	r17,r17,-1
   20d3c:	108000b0 	cmpltui	r2,r2,2
   20d40:	1000071e 	bne	r2,zero,20d60 <_fwalk_reent+0x6c>
   20d44:	8080038f 	ldh	r2,14(r16)
   20d48:	800b883a 	mov	r5,r16
   20d4c:	9009883a 	mov	r4,r18
   20d50:	10bfffe0 	cmpeqi	r2,r2,-1
   20d54:	1000021e 	bne	r2,zero,20d60 <_fwalk_reent+0x6c>
   20d58:	a03ee83a 	callr	r20
   20d5c:	a8aab03a 	or	r21,r21,r2
   20d60:	88bfffd8 	cmpnei	r2,r17,-1
   20d64:	84001a04 	addi	r16,r16,104
   20d68:	103ff21e 	bne	r2,zero,20d34 <_fwalk_reent+0x40>
   20d6c:	9cc00017 	ldw	r19,0(r19)
   20d70:	983fec1e 	bne	r19,zero,20d24 <_fwalk_reent+0x30>
   20d74:	a805883a 	mov	r2,r21
   20d78:	dfc00617 	ldw	ra,24(sp)
   20d7c:	dd400517 	ldw	r21,20(sp)
   20d80:	dd000417 	ldw	r20,16(sp)
   20d84:	dcc00317 	ldw	r19,12(sp)
   20d88:	dc800217 	ldw	r18,8(sp)
   20d8c:	dc400117 	ldw	r17,4(sp)
   20d90:	dc000017 	ldw	r16,0(sp)
   20d94:	dec00704 	addi	sp,sp,28
   20d98:	f800283a 	ret

00020d9c <_malloc_r>:
   20d9c:	defff604 	addi	sp,sp,-40
   20da0:	dc400115 	stw	r17,4(sp)
   20da4:	2c4002c4 	addi	r17,r5,11
   20da8:	dc800215 	stw	r18,8(sp)
   20dac:	dfc00915 	stw	ra,36(sp)
   20db0:	df000815 	stw	fp,32(sp)
   20db4:	ddc00715 	stw	r23,28(sp)
   20db8:	dd800615 	stw	r22,24(sp)
   20dbc:	dd400515 	stw	r21,20(sp)
   20dc0:	dd000415 	stw	r20,16(sp)
   20dc4:	dcc00315 	stw	r19,12(sp)
   20dc8:	dc000015 	stw	r16,0(sp)
   20dcc:	888005e8 	cmpgeui	r2,r17,23
   20dd0:	2025883a 	mov	r18,r4
   20dd4:	1000261e 	bne	r2,zero,20e70 <_malloc_r+0xd4>
   20dd8:	29400468 	cmpgeui	r5,r5,17
   20ddc:	28008d1e 	bne	r5,zero,21014 <_malloc_r+0x278>
   20de0:	002369c0 	call	2369c <__malloc_lock>
   20de4:	04400404 	movi	r17,16
   20de8:	00800604 	movi	r2,24
   20dec:	01c00084 	movi	r7,2
   20df0:	04c000b4 	movhi	r19,2
   20df4:	9cd59b04 	addi	r19,r19,22124
   20df8:	9885883a 	add	r2,r19,r2
   20dfc:	14000117 	ldw	r16,4(r2)
   20e00:	10fffe04 	addi	r3,r2,-8
   20e04:	80c0cb26 	beq	r16,r3,21134 <_malloc_r+0x398>
   20e08:	80800117 	ldw	r2,4(r16)
   20e0c:	81000317 	ldw	r4,12(r16)
   20e10:	00ffff04 	movi	r3,-4
   20e14:	10c4703a 	and	r2,r2,r3
   20e18:	81400217 	ldw	r5,8(r16)
   20e1c:	8085883a 	add	r2,r16,r2
   20e20:	10c00117 	ldw	r3,4(r2)
   20e24:	29000315 	stw	r4,12(r5)
   20e28:	21400215 	stw	r5,8(r4)
   20e2c:	18c00054 	ori	r3,r3,1
   20e30:	10c00115 	stw	r3,4(r2)
   20e34:	9009883a 	mov	r4,r18
   20e38:	00236c00 	call	236c0 <__malloc_unlock>
   20e3c:	80800204 	addi	r2,r16,8
   20e40:	dfc00917 	ldw	ra,36(sp)
   20e44:	df000817 	ldw	fp,32(sp)
   20e48:	ddc00717 	ldw	r23,28(sp)
   20e4c:	dd800617 	ldw	r22,24(sp)
   20e50:	dd400517 	ldw	r21,20(sp)
   20e54:	dd000417 	ldw	r20,16(sp)
   20e58:	dcc00317 	ldw	r19,12(sp)
   20e5c:	dc800217 	ldw	r18,8(sp)
   20e60:	dc400117 	ldw	r17,4(sp)
   20e64:	dc000017 	ldw	r16,0(sp)
   20e68:	dec00a04 	addi	sp,sp,40
   20e6c:	f800283a 	ret
   20e70:	00bffe04 	movi	r2,-8
   20e74:	88a2703a 	and	r17,r17,r2
   20e78:	88006616 	blt	r17,zero,21014 <_malloc_r+0x278>
   20e7c:	89406536 	bltu	r17,r5,21014 <_malloc_r+0x278>
   20e80:	002369c0 	call	2369c <__malloc_lock>
   20e84:	88807e28 	cmpgeui	r2,r17,504
   20e88:	1000ef26 	beq	r2,zero,21248 <_malloc_r+0x4ac>
   20e8c:	8804d27a 	srli	r2,r17,9
   20e90:	10006426 	beq	r2,zero,21024 <_malloc_r+0x288>
   20e94:	10c00168 	cmpgeui	r3,r2,5
   20e98:	1800c31e 	bne	r3,zero,211a8 <_malloc_r+0x40c>
   20e9c:	8804d1ba 	srli	r2,r17,6
   20ea0:	11c00e44 	addi	r7,r2,57
   20ea4:	380890fa 	slli	r4,r7,3
   20ea8:	12000e04 	addi	r8,r2,56
   20eac:	04c000b4 	movhi	r19,2
   20eb0:	9cd59b04 	addi	r19,r19,22124
   20eb4:	9909883a 	add	r4,r19,r4
   20eb8:	24000117 	ldw	r16,4(r4)
   20ebc:	213ffe04 	addi	r4,r4,-8
   20ec0:	24000b26 	beq	r4,r16,20ef0 <_malloc_r+0x154>
   20ec4:	01bfff04 	movi	r6,-4
   20ec8:	00000306 	br	20ed8 <_malloc_r+0x13c>
   20ecc:	1800970e 	bge	r3,zero,2112c <_malloc_r+0x390>
   20ed0:	84000317 	ldw	r16,12(r16)
   20ed4:	24000626 	beq	r4,r16,20ef0 <_malloc_r+0x154>
   20ed8:	80800117 	ldw	r2,4(r16)
   20edc:	1184703a 	and	r2,r2,r6
   20ee0:	1447c83a 	sub	r3,r2,r17
   20ee4:	19400408 	cmpgei	r5,r3,16
   20ee8:	283ff826 	beq	r5,zero,20ecc <_malloc_r+0x130>
   20eec:	400f883a 	mov	r7,r8
   20ef0:	9c000417 	ldw	r16,16(r19)
   20ef4:	024000b4 	movhi	r9,2
   20ef8:	4a559d04 	addi	r9,r9,22132
   20efc:	82407f26 	beq	r16,r9,210fc <_malloc_r+0x360>
   20f00:	80800117 	ldw	r2,4(r16)
   20f04:	00ffff04 	movi	r3,-4
   20f08:	10c4703a 	and	r2,r2,r3
   20f0c:	1447c83a 	sub	r3,r2,r17
   20f10:	19000410 	cmplti	r4,r3,16
   20f14:	2000cf26 	beq	r4,zero,21254 <_malloc_r+0x4b8>
   20f18:	9a400515 	stw	r9,20(r19)
   20f1c:	9a400415 	stw	r9,16(r19)
   20f20:	1800c10e 	bge	r3,zero,21228 <_malloc_r+0x48c>
   20f24:	10c08028 	cmpgeui	r3,r2,512
   20f28:	99400117 	ldw	r5,4(r19)
   20f2c:	1800851e 	bne	r3,zero,21144 <_malloc_r+0x3a8>
   20f30:	1006d0fa 	srli	r3,r2,3
   20f34:	1008d17a 	srli	r4,r2,5
   20f38:	18800044 	addi	r2,r3,1
   20f3c:	100490fa 	slli	r2,r2,3
   20f40:	00c00044 	movi	r3,1
   20f44:	1906983a 	sll	r3,r3,r4
   20f48:	9885883a 	add	r2,r19,r2
   20f4c:	11000017 	ldw	r4,0(r2)
   20f50:	28cab03a 	or	r5,r5,r3
   20f54:	10fffe04 	addi	r3,r2,-8
   20f58:	80c00315 	stw	r3,12(r16)
   20f5c:	81000215 	stw	r4,8(r16)
   20f60:	99400115 	stw	r5,4(r19)
   20f64:	14000015 	stw	r16,0(r2)
   20f68:	24000315 	stw	r16,12(r4)
   20f6c:	3805d0ba 	srai	r2,r7,2
   20f70:	01000044 	movi	r4,1
   20f74:	2088983a 	sll	r4,r4,r2
   20f78:	29002e36 	bltu	r5,r4,21034 <_malloc_r+0x298>
   20f7c:	2144703a 	and	r2,r4,r5
   20f80:	10000a1e 	bne	r2,zero,20fac <_malloc_r+0x210>
   20f84:	2109883a 	add	r4,r4,r4
   20f88:	00bfff04 	movi	r2,-4
   20f8c:	3884703a 	and	r2,r7,r2
   20f90:	2146703a 	and	r3,r4,r5
   20f94:	11c00104 	addi	r7,r2,4
   20f98:	1800041e 	bne	r3,zero,20fac <_malloc_r+0x210>
   20f9c:	2109883a 	add	r4,r4,r4
   20fa0:	2144703a 	and	r2,r4,r5
   20fa4:	39c00104 	addi	r7,r7,4
   20fa8:	103ffc26 	beq	r2,zero,20f9c <_malloc_r+0x200>
   20fac:	02bfff04 	movi	r10,-4
   20fb0:	381690fa 	slli	r11,r7,3
   20fb4:	3819883a 	mov	r12,r7
   20fb8:	9ad7883a 	add	r11,r19,r11
   20fbc:	5811883a 	mov	r8,r11
   20fc0:	40800317 	ldw	r2,12(r8)
   20fc4:	40808126 	beq	r8,r2,211cc <_malloc_r+0x430>
   20fc8:	10c00117 	ldw	r3,4(r2)
   20fcc:	1021883a 	mov	r16,r2
   20fd0:	10800317 	ldw	r2,12(r2)
   20fd4:	1a86703a 	and	r3,r3,r10
   20fd8:	1c4bc83a 	sub	r5,r3,r17
   20fdc:	29800410 	cmplti	r6,r5,16
   20fe0:	30007f26 	beq	r6,zero,211e0 <_malloc_r+0x444>
   20fe4:	283ff716 	blt	r5,zero,20fc4 <_malloc_r+0x228>
   20fe8:	80c7883a 	add	r3,r16,r3
   20fec:	19400117 	ldw	r5,4(r3)
   20ff0:	81800217 	ldw	r6,8(r16)
   20ff4:	9009883a 	mov	r4,r18
   20ff8:	29400054 	ori	r5,r5,1
   20ffc:	19400115 	stw	r5,4(r3)
   21000:	30800315 	stw	r2,12(r6)
   21004:	11800215 	stw	r6,8(r2)
   21008:	00236c00 	call	236c0 <__malloc_unlock>
   2100c:	80800204 	addi	r2,r16,8
   21010:	003f8b06 	br	20e40 <_malloc_r+0xa4>
   21014:	00800304 	movi	r2,12
   21018:	90800015 	stw	r2,0(r18)
   2101c:	0005883a 	mov	r2,zero
   21020:	003f8706 	br	20e40 <_malloc_r+0xa4>
   21024:	01008004 	movi	r4,512
   21028:	01c01004 	movi	r7,64
   2102c:	02000fc4 	movi	r8,63
   21030:	003f9e06 	br	20eac <_malloc_r+0x110>
   21034:	9c000217 	ldw	r16,8(r19)
   21038:	00bfff04 	movi	r2,-4
   2103c:	80c00117 	ldw	r3,4(r16)
   21040:	18aa703a 	and	r21,r3,r2
   21044:	ac400336 	bltu	r21,r17,21054 <_malloc_r+0x2b8>
   21048:	ac47c83a 	sub	r3,r21,r17
   2104c:	18800408 	cmpgei	r2,r3,16
   21050:	10002c1e 	bne	r2,zero,21104 <_malloc_r+0x368>
   21054:	008000b4 	movhi	r2,2
   21058:	10973a17 	ldw	r2,23784(r2)
   2105c:	00c000b4 	movhi	r3,2
   21060:	1d19f817 	ldw	r20,26592(r3)
   21064:	10bfffd8 	cmpnei	r2,r2,-1
   21068:	856f883a 	add	r23,r16,r21
   2106c:	8d29883a 	add	r20,r17,r20
   21070:	1000e726 	beq	r2,zero,21410 <_malloc_r+0x674>
   21074:	a50403c4 	addi	r20,r20,4111
   21078:	00bc0004 	movi	r2,-4096
   2107c:	a0a8703a 	and	r20,r20,r2
   21080:	a00b883a 	mov	r5,r20
   21084:	9009883a 	mov	r4,r18
   21088:	0021fa80 	call	21fa8 <_sbrk_r>
   2108c:	102d883a 	mov	r22,r2
   21090:	10bfffd8 	cmpnei	r2,r2,-1
   21094:	10008426 	beq	r2,zero,212a8 <_malloc_r+0x50c>
   21098:	b5c08236 	bltu	r22,r23,212a4 <_malloc_r+0x508>
   2109c:	008000b4 	movhi	r2,2
   210a0:	1119ff17 	ldw	r4,26620(r2)
   210a4:	a109883a 	add	r4,r20,r4
   210a8:	1119ff15 	stw	r4,26620(r2)
   210ac:	2007883a 	mov	r3,r4
   210b0:	bd80a51e 	bne	r23,r22,21348 <_malloc_r+0x5ac>
   210b4:	b083ffcc 	andi	r2,r22,4095
   210b8:	1000a31e 	bne	r2,zero,21348 <_malloc_r+0x5ac>
   210bc:	9d800217 	ldw	r22,8(r19)
   210c0:	ad07883a 	add	r3,r21,r20
   210c4:	18c00054 	ori	r3,r3,1
   210c8:	b0c00115 	stw	r3,4(r22)
   210cc:	008000b4 	movhi	r2,2
   210d0:	1099f717 	ldw	r2,26588(r2)
   210d4:	1100022e 	bgeu	r2,r4,210e0 <_malloc_r+0x344>
   210d8:	008000b4 	movhi	r2,2
   210dc:	1119f715 	stw	r4,26588(r2)
   210e0:	008000b4 	movhi	r2,2
   210e4:	1099f617 	ldw	r2,26584(r2)
   210e8:	1100022e 	bgeu	r2,r4,210f4 <_malloc_r+0x358>
   210ec:	008000b4 	movhi	r2,2
   210f0:	1119f615 	stw	r4,26584(r2)
   210f4:	b021883a 	mov	r16,r22
   210f8:	00006d06 	br	212b0 <_malloc_r+0x514>
   210fc:	99400117 	ldw	r5,4(r19)
   21100:	003f9a06 	br	20f6c <_malloc_r+0x1d0>
   21104:	88800054 	ori	r2,r17,1
   21108:	80800115 	stw	r2,4(r16)
   2110c:	8463883a 	add	r17,r16,r17
   21110:	9c400215 	stw	r17,8(r19)
   21114:	18c00054 	ori	r3,r3,1
   21118:	88c00115 	stw	r3,4(r17)
   2111c:	9009883a 	mov	r4,r18
   21120:	00236c00 	call	236c0 <__malloc_unlock>
   21124:	80800204 	addi	r2,r16,8
   21128:	003f4506 	br	20e40 <_malloc_r+0xa4>
   2112c:	81000317 	ldw	r4,12(r16)
   21130:	003f3906 	br	20e18 <_malloc_r+0x7c>
   21134:	14000317 	ldw	r16,12(r2)
   21138:	143f331e 	bne	r2,r16,20e08 <_malloc_r+0x6c>
   2113c:	39c00084 	addi	r7,r7,2
   21140:	003f6b06 	br	20ef0 <_malloc_r+0x154>
   21144:	1006d27a 	srli	r3,r2,9
   21148:	19000168 	cmpgeui	r4,r3,5
   2114c:	20005026 	beq	r4,zero,21290 <_malloc_r+0x4f4>
   21150:	19000568 	cmpgeui	r4,r3,21
   21154:	2000c01e 	bne	r4,zero,21458 <_malloc_r+0x6bc>
   21158:	19801704 	addi	r6,r3,92
   2115c:	300c90fa 	slli	r6,r6,3
   21160:	190016c4 	addi	r4,r3,91
   21164:	998d883a 	add	r6,r19,r6
   21168:	30c00017 	ldw	r3,0(r6)
   2116c:	31bffe04 	addi	r6,r6,-8
   21170:	30c0a926 	beq	r6,r3,21418 <_malloc_r+0x67c>
   21174:	023fff04 	movi	r8,-4
   21178:	00000206 	br	21184 <_malloc_r+0x3e8>
   2117c:	18c00217 	ldw	r3,8(r3)
   21180:	30c00326 	beq	r6,r3,21190 <_malloc_r+0x3f4>
   21184:	19000117 	ldw	r4,4(r3)
   21188:	2208703a 	and	r4,r4,r8
   2118c:	113ffb36 	bltu	r2,r4,2117c <_malloc_r+0x3e0>
   21190:	19800317 	ldw	r6,12(r3)
   21194:	81800315 	stw	r6,12(r16)
   21198:	80c00215 	stw	r3,8(r16)
   2119c:	34000215 	stw	r16,8(r6)
   211a0:	1c000315 	stw	r16,12(r3)
   211a4:	003f7106 	br	20f6c <_malloc_r+0x1d0>
   211a8:	10c00568 	cmpgeui	r3,r2,21
   211ac:	18004926 	beq	r3,zero,212d4 <_malloc_r+0x538>
   211b0:	10c01568 	cmpgeui	r3,r2,85
   211b4:	1800af1e 	bne	r3,zero,21474 <_malloc_r+0x6d8>
   211b8:	8804d33a 	srli	r2,r17,12
   211bc:	11c01bc4 	addi	r7,r2,111
   211c0:	380890fa 	slli	r4,r7,3
   211c4:	12001b84 	addi	r8,r2,110
   211c8:	003f3806 	br	20eac <_malloc_r+0x110>
   211cc:	63000044 	addi	r12,r12,1
   211d0:	608000cc 	andi	r2,r12,3
   211d4:	42000204 	addi	r8,r8,8
   211d8:	103f791e 	bne	r2,zero,20fc0 <_malloc_r+0x224>
   211dc:	00004406 	br	212f0 <_malloc_r+0x554>
   211e0:	81000217 	ldw	r4,8(r16)
   211e4:	89800054 	ori	r6,r17,1
   211e8:	81800115 	stw	r6,4(r16)
   211ec:	20800315 	stw	r2,12(r4)
   211f0:	11000215 	stw	r4,8(r2)
   211f4:	8463883a 	add	r17,r16,r17
   211f8:	9c400515 	stw	r17,20(r19)
   211fc:	9c400415 	stw	r17,16(r19)
   21200:	28800054 	ori	r2,r5,1
   21204:	88800115 	stw	r2,4(r17)
   21208:	8a400315 	stw	r9,12(r17)
   2120c:	8a400215 	stw	r9,8(r17)
   21210:	80c7883a 	add	r3,r16,r3
   21214:	19400015 	stw	r5,0(r3)
   21218:	9009883a 	mov	r4,r18
   2121c:	00236c00 	call	236c0 <__malloc_unlock>
   21220:	80800204 	addi	r2,r16,8
   21224:	003f0606 	br	20e40 <_malloc_r+0xa4>
   21228:	8085883a 	add	r2,r16,r2
   2122c:	10c00117 	ldw	r3,4(r2)
   21230:	9009883a 	mov	r4,r18
   21234:	18c00054 	ori	r3,r3,1
   21238:	10c00115 	stw	r3,4(r2)
   2123c:	00236c00 	call	236c0 <__malloc_unlock>
   21240:	80800204 	addi	r2,r16,8
   21244:	003efe06 	br	20e40 <_malloc_r+0xa4>
   21248:	880ed0fa 	srli	r7,r17,3
   2124c:	88800204 	addi	r2,r17,8
   21250:	003ee706 	br	20df0 <_malloc_r+0x54>
   21254:	89000054 	ori	r4,r17,1
   21258:	81000115 	stw	r4,4(r16)
   2125c:	8463883a 	add	r17,r16,r17
   21260:	9c400515 	stw	r17,20(r19)
   21264:	9c400415 	stw	r17,16(r19)
   21268:	19000054 	ori	r4,r3,1
   2126c:	89000115 	stw	r4,4(r17)
   21270:	8085883a 	add	r2,r16,r2
   21274:	8a400315 	stw	r9,12(r17)
   21278:	8a400215 	stw	r9,8(r17)
   2127c:	10c00015 	stw	r3,0(r2)
   21280:	9009883a 	mov	r4,r18
   21284:	00236c00 	call	236c0 <__malloc_unlock>
   21288:	80800204 	addi	r2,r16,8
   2128c:	003eec06 	br	20e40 <_malloc_r+0xa4>
   21290:	1006d1ba 	srli	r3,r2,6
   21294:	19800e44 	addi	r6,r3,57
   21298:	300c90fa 	slli	r6,r6,3
   2129c:	19000e04 	addi	r4,r3,56
   212a0:	003fb006 	br	21164 <_malloc_r+0x3c8>
   212a4:	84c02426 	beq	r16,r19,21338 <_malloc_r+0x59c>
   212a8:	9c000217 	ldw	r16,8(r19)
   212ac:	80c00117 	ldw	r3,4(r16)
   212b0:	00bfff04 	movi	r2,-4
   212b4:	1884703a 	and	r2,r3,r2
   212b8:	1447c83a 	sub	r3,r2,r17
   212bc:	14400236 	bltu	r2,r17,212c8 <_malloc_r+0x52c>
   212c0:	18800408 	cmpgei	r2,r3,16
   212c4:	103f8f1e 	bne	r2,zero,21104 <_malloc_r+0x368>
   212c8:	9009883a 	mov	r4,r18
   212cc:	00236c00 	call	236c0 <__malloc_unlock>
   212d0:	003f5206 	br	2101c <_malloc_r+0x280>
   212d4:	11c01704 	addi	r7,r2,92
   212d8:	380890fa 	slli	r4,r7,3
   212dc:	120016c4 	addi	r8,r2,91
   212e0:	003ef206 	br	20eac <_malloc_r+0x110>
   212e4:	58800217 	ldw	r2,8(r11)
   212e8:	39ffffc4 	addi	r7,r7,-1
   212ec:	12c0961e 	bne	r2,r11,21548 <_malloc_r+0x7ac>
   212f0:	388000cc 	andi	r2,r7,3
   212f4:	5afffe04 	addi	r11,r11,-8
   212f8:	103ffa1e 	bne	r2,zero,212e4 <_malloc_r+0x548>
   212fc:	98c00117 	ldw	r3,4(r19)
   21300:	0104303a 	nor	r2,zero,r4
   21304:	10c4703a 	and	r2,r2,r3
   21308:	98800115 	stw	r2,4(r19)
   2130c:	2109883a 	add	r4,r4,r4
   21310:	113f4836 	bltu	r2,r4,21034 <_malloc_r+0x298>
   21314:	203f4726 	beq	r4,zero,21034 <_malloc_r+0x298>
   21318:	2086703a 	and	r3,r4,r2
   2131c:	1800041e 	bne	r3,zero,21330 <_malloc_r+0x594>
   21320:	2109883a 	add	r4,r4,r4
   21324:	2086703a 	and	r3,r4,r2
   21328:	63000104 	addi	r12,r12,4
   2132c:	183ffc26 	beq	r3,zero,21320 <_malloc_r+0x584>
   21330:	600f883a 	mov	r7,r12
   21334:	003f1e06 	br	20fb0 <_malloc_r+0x214>
   21338:	008000b4 	movhi	r2,2
   2133c:	10d9ff17 	ldw	r3,26620(r2)
   21340:	a0c7883a 	add	r3,r20,r3
   21344:	10d9ff15 	stw	r3,26620(r2)
   21348:	008000b4 	movhi	r2,2
   2134c:	10973a17 	ldw	r2,23784(r2)
   21350:	10bfffd8 	cmpnei	r2,r2,-1
   21354:	10004e26 	beq	r2,zero,21490 <_malloc_r+0x6f4>
   21358:	b5c5c83a 	sub	r2,r22,r23
   2135c:	10c5883a 	add	r2,r2,r3
   21360:	00c000b4 	movhi	r3,2
   21364:	1899ff15 	stw	r2,26620(r3)
   21368:	b70001cc 	andi	fp,r22,7
   2136c:	e0003026 	beq	fp,zero,21430 <_malloc_r+0x694>
   21370:	b72dc83a 	sub	r22,r22,fp
   21374:	b5800204 	addi	r22,r22,8
   21378:	01040204 	movi	r4,4104
   2137c:	2709c83a 	sub	r4,r4,fp
   21380:	b529883a 	add	r20,r22,r20
   21384:	2509c83a 	sub	r4,r4,r20
   21388:	25c3ffcc 	andi	r23,r4,4095
   2138c:	b80b883a 	mov	r5,r23
   21390:	9009883a 	mov	r4,r18
   21394:	0021fa80 	call	21fa8 <_sbrk_r>
   21398:	10ffffe0 	cmpeqi	r3,r2,-1
   2139c:	1800501e 	bne	r3,zero,214e0 <_malloc_r+0x744>
   213a0:	1585c83a 	sub	r2,r2,r22
   213a4:	15e9883a 	add	r20,r2,r23
   213a8:	008000b4 	movhi	r2,2
   213ac:	1099ff17 	ldw	r2,26620(r2)
   213b0:	9d800215 	stw	r22,8(r19)
   213b4:	a0c00054 	ori	r3,r20,1
   213b8:	b889883a 	add	r4,r23,r2
   213bc:	008000b4 	movhi	r2,2
   213c0:	1119ff15 	stw	r4,26620(r2)
   213c4:	b0c00115 	stw	r3,4(r22)
   213c8:	84ff4026 	beq	r16,r19,210cc <_malloc_r+0x330>
   213cc:	a8800428 	cmpgeui	r2,r21,16
   213d0:	10003226 	beq	r2,zero,2149c <_malloc_r+0x700>
   213d4:	80800117 	ldw	r2,4(r16)
   213d8:	017ffe04 	movi	r5,-8
   213dc:	a8fffd04 	addi	r3,r21,-12
   213e0:	1946703a 	and	r3,r3,r5
   213e4:	1080004c 	andi	r2,r2,1
   213e8:	10c4b03a 	or	r2,r2,r3
   213ec:	80800115 	stw	r2,4(r16)
   213f0:	01400144 	movi	r5,5
   213f4:	80c5883a 	add	r2,r16,r3
   213f8:	11400115 	stw	r5,4(r2)
   213fc:	11400215 	stw	r5,8(r2)
   21400:	18c00428 	cmpgeui	r3,r3,16
   21404:	18003b1e 	bne	r3,zero,214f4 <_malloc_r+0x758>
   21408:	b0c00117 	ldw	r3,4(r22)
   2140c:	003f2f06 	br	210cc <_malloc_r+0x330>
   21410:	a5000404 	addi	r20,r20,16
   21414:	003f1a06 	br	21080 <_malloc_r+0x2e4>
   21418:	2009d0ba 	srai	r4,r4,2
   2141c:	00800044 	movi	r2,1
   21420:	1104983a 	sll	r2,r2,r4
   21424:	288ab03a 	or	r5,r5,r2
   21428:	99400115 	stw	r5,4(r19)
   2142c:	003f5906 	br	21194 <_malloc_r+0x3f8>
   21430:	b509883a 	add	r4,r22,r20
   21434:	0109c83a 	sub	r4,zero,r4
   21438:	25c3ffcc 	andi	r23,r4,4095
   2143c:	b80b883a 	mov	r5,r23
   21440:	9009883a 	mov	r4,r18
   21444:	0021fa80 	call	21fa8 <_sbrk_r>
   21448:	10ffffe0 	cmpeqi	r3,r2,-1
   2144c:	183fd426 	beq	r3,zero,213a0 <_malloc_r+0x604>
   21450:	002f883a 	mov	r23,zero
   21454:	003fd406 	br	213a8 <_malloc_r+0x60c>
   21458:	19001568 	cmpgeui	r4,r3,85
   2145c:	2000121e 	bne	r4,zero,214a8 <_malloc_r+0x70c>
   21460:	1006d33a 	srli	r3,r2,12
   21464:	19801bc4 	addi	r6,r3,111
   21468:	300c90fa 	slli	r6,r6,3
   2146c:	19001b84 	addi	r4,r3,110
   21470:	003f3c06 	br	21164 <_malloc_r+0x3c8>
   21474:	10c05568 	cmpgeui	r3,r2,341
   21478:	1800121e 	bne	r3,zero,214c4 <_malloc_r+0x728>
   2147c:	8804d3fa 	srli	r2,r17,15
   21480:	11c01e04 	addi	r7,r2,120
   21484:	380890fa 	slli	r4,r7,3
   21488:	12001dc4 	addi	r8,r2,119
   2148c:	003e8706 	br	20eac <_malloc_r+0x110>
   21490:	008000b4 	movhi	r2,2
   21494:	15973a15 	stw	r22,23784(r2)
   21498:	003fb306 	br	21368 <_malloc_r+0x5cc>
   2149c:	00800044 	movi	r2,1
   214a0:	b0800115 	stw	r2,4(r22)
   214a4:	003f8806 	br	212c8 <_malloc_r+0x52c>
   214a8:	19005568 	cmpgeui	r4,r3,341
   214ac:	2000181e 	bne	r4,zero,21510 <_malloc_r+0x774>
   214b0:	1006d3fa 	srli	r3,r2,15
   214b4:	19801e04 	addi	r6,r3,120
   214b8:	300c90fa 	slli	r6,r6,3
   214bc:	19001dc4 	addi	r4,r3,119
   214c0:	003f2806 	br	21164 <_malloc_r+0x3c8>
   214c4:	10815568 	cmpgeui	r2,r2,1365
   214c8:	1000181e 	bne	r2,zero,2152c <_malloc_r+0x790>
   214cc:	8804d4ba 	srli	r2,r17,18
   214d0:	11c01f44 	addi	r7,r2,125
   214d4:	380890fa 	slli	r4,r7,3
   214d8:	12001f04 	addi	r8,r2,124
   214dc:	003e7306 	br	20eac <_malloc_r+0x110>
   214e0:	e73ffe04 	addi	fp,fp,-8
   214e4:	a729883a 	add	r20,r20,fp
   214e8:	a5a9c83a 	sub	r20,r20,r22
   214ec:	002f883a 	mov	r23,zero
   214f0:	003fad06 	br	213a8 <_malloc_r+0x60c>
   214f4:	9009883a 	mov	r4,r18
   214f8:	81400204 	addi	r5,r16,8
   214fc:	00228600 	call	22860 <_free_r>
   21500:	008000b4 	movhi	r2,2
   21504:	9d800217 	ldw	r22,8(r19)
   21508:	1119ff17 	ldw	r4,26620(r2)
   2150c:	003fbe06 	br	21408 <_malloc_r+0x66c>
   21510:	18c15568 	cmpgeui	r3,r3,1365
   21514:	1800091e 	bne	r3,zero,2153c <_malloc_r+0x7a0>
   21518:	1006d4ba 	srli	r3,r2,18
   2151c:	19801f44 	addi	r6,r3,125
   21520:	300c90fa 	slli	r6,r6,3
   21524:	19001f04 	addi	r4,r3,124
   21528:	003f0e06 	br	21164 <_malloc_r+0x3c8>
   2152c:	0100fe04 	movi	r4,1016
   21530:	01c01fc4 	movi	r7,127
   21534:	02001f84 	movi	r8,126
   21538:	003e5c06 	br	20eac <_malloc_r+0x110>
   2153c:	0180fe04 	movi	r6,1016
   21540:	01001f84 	movi	r4,126
   21544:	003f0706 	br	21164 <_malloc_r+0x3c8>
   21548:	98800117 	ldw	r2,4(r19)
   2154c:	003f6f06 	br	2130c <_malloc_r+0x570>

00021550 <memchr>:
   21550:	defffc04 	addi	sp,sp,-16
   21554:	dc000015 	stw	r16,0(sp)
   21558:	2021883a 	mov	r16,r4
   2155c:	dc800215 	stw	r18,8(sp)
   21560:	dfc00315 	stw	ra,12(sp)
   21564:	dc400115 	stw	r17,4(sp)
   21568:	808000cc 	andi	r2,r16,3
   2156c:	2809883a 	mov	r4,r5
   21570:	2825883a 	mov	r18,r5
   21574:	10000e26 	beq	r2,zero,215b0 <memchr+0x60>
   21578:	347fffc4 	addi	r17,r6,-1
   2157c:	30001726 	beq	r6,zero,215dc <memchr+0x8c>
   21580:	28c03fcc 	andi	r3,r5,255
   21584:	00000606 	br	215a0 <memchr+0x50>
   21588:	84000044 	addi	r16,r16,1
   2158c:	808000cc 	andi	r2,r16,3
   21590:	10000826 	beq	r2,zero,215b4 <memchr+0x64>
   21594:	8c7fffc4 	addi	r17,r17,-1
   21598:	88bfffe0 	cmpeqi	r2,r17,-1
   2159c:	10000f1e 	bne	r2,zero,215dc <memchr+0x8c>
   215a0:	80800003 	ldbu	r2,0(r16)
   215a4:	10fff81e 	bne	r2,r3,21588 <memchr+0x38>
   215a8:	8005883a 	mov	r2,r16
   215ac:	00000c06 	br	215e0 <memchr+0x90>
   215b0:	3023883a 	mov	r17,r6
   215b4:	88800130 	cmpltui	r2,r17,4
   215b8:	10000f26 	beq	r2,zero,215f8 <memchr+0xa8>
   215bc:	88000726 	beq	r17,zero,215dc <memchr+0x8c>
   215c0:	8463883a 	add	r17,r16,r17
   215c4:	8005883a 	mov	r2,r16
   215c8:	90c03fcc 	andi	r3,r18,255
   215cc:	11000003 	ldbu	r4,0(r2)
   215d0:	20c00326 	beq	r4,r3,215e0 <memchr+0x90>
   215d4:	10800044 	addi	r2,r2,1
   215d8:	88bffc1e 	bne	r17,r2,215cc <memchr+0x7c>
   215dc:	0005883a 	mov	r2,zero
   215e0:	dfc00317 	ldw	ra,12(sp)
   215e4:	dc800217 	ldw	r18,8(sp)
   215e8:	dc400117 	ldw	r17,4(sp)
   215ec:	dc000017 	ldw	r16,0(sp)
   215f0:	dec00404 	addi	sp,sp,16
   215f4:	f800283a 	ret
   215f8:	01404074 	movhi	r5,257
   215fc:	29404044 	addi	r5,r5,257
   21600:	21003fcc 	andi	r4,r4,255
   21604:	00230c80 	call	230c8 <__mulsi3>
   21608:	01bfbff4 	movhi	r6,65279
   2160c:	01602074 	movhi	r5,32897
   21610:	31bfbfc4 	addi	r6,r6,-257
   21614:	29602004 	addi	r5,r5,-32640
   21618:	00000406 	br	2162c <memchr+0xdc>
   2161c:	8c7fff04 	addi	r17,r17,-4
   21620:	88c00128 	cmpgeui	r3,r17,4
   21624:	84000104 	addi	r16,r16,4
   21628:	183fe426 	beq	r3,zero,215bc <memchr+0x6c>
   2162c:	80c00017 	ldw	r3,0(r16)
   21630:	10c6f03a 	xor	r3,r2,r3
   21634:	1989883a 	add	r4,r3,r6
   21638:	00c6303a 	nor	r3,zero,r3
   2163c:	20c6703a 	and	r3,r4,r3
   21640:	1946703a 	and	r3,r3,r5
   21644:	183ff526 	beq	r3,zero,2161c <memchr+0xcc>
   21648:	003fdc06 	br	215bc <memchr+0x6c>

0002164c <memcpy>:
   2164c:	30c00428 	cmpgeui	r3,r6,16
   21650:	2005883a 	mov	r2,r4
   21654:	18000b1e 	bne	r3,zero,21684 <memcpy+0x38>
   21658:	2007883a 	mov	r3,r4
   2165c:	31ffffc4 	addi	r7,r6,-1
   21660:	30003426 	beq	r6,zero,21734 <memcpy+0xe8>
   21664:	39c00044 	addi	r7,r7,1
   21668:	19cf883a 	add	r7,r3,r7
   2166c:	29800003 	ldbu	r6,0(r5)
   21670:	18c00044 	addi	r3,r3,1
   21674:	29400044 	addi	r5,r5,1
   21678:	19bfffc5 	stb	r6,-1(r3)
   2167c:	19fffb1e 	bne	r3,r7,2166c <memcpy+0x20>
   21680:	f800283a 	ret
   21684:	2146b03a 	or	r3,r4,r5
   21688:	18c000cc 	andi	r3,r3,3
   2168c:	18002a1e 	bne	r3,zero,21738 <memcpy+0xec>
   21690:	333ffc04 	addi	r12,r6,-16
   21694:	6018d13a 	srli	r12,r12,4
   21698:	2811883a 	mov	r8,r5
   2169c:	200f883a 	mov	r7,r4
   216a0:	63000044 	addi	r12,r12,1
   216a4:	6018913a 	slli	r12,r12,4
   216a8:	2307883a 	add	r3,r4,r12
   216ac:	42c00017 	ldw	r11,0(r8)
   216b0:	42800117 	ldw	r10,4(r8)
   216b4:	42400217 	ldw	r9,8(r8)
   216b8:	41000317 	ldw	r4,12(r8)
   216bc:	39c00404 	addi	r7,r7,16
   216c0:	3afffc15 	stw	r11,-16(r7)
   216c4:	3abffd15 	stw	r10,-12(r7)
   216c8:	3a7ffe15 	stw	r9,-8(r7)
   216cc:	393fff15 	stw	r4,-4(r7)
   216d0:	42000404 	addi	r8,r8,16
   216d4:	38fff51e 	bne	r7,r3,216ac <memcpy+0x60>
   216d8:	3100030c 	andi	r4,r6,12
   216dc:	2b0b883a 	add	r5,r5,r12
   216e0:	324003cc 	andi	r9,r6,15
   216e4:	20001726 	beq	r4,zero,21744 <memcpy+0xf8>
   216e8:	2811883a 	mov	r8,r5
   216ec:	1809883a 	mov	r4,r3
   216f0:	1a57883a 	add	r11,r3,r9
   216f4:	42800017 	ldw	r10,0(r8)
   216f8:	21000104 	addi	r4,r4,4
   216fc:	590fc83a 	sub	r7,r11,r4
   21700:	39c00128 	cmpgeui	r7,r7,4
   21704:	22bfff15 	stw	r10,-4(r4)
   21708:	42000104 	addi	r8,r8,4
   2170c:	383ff91e 	bne	r7,zero,216f4 <memcpy+0xa8>
   21710:	493fff04 	addi	r4,r9,-4
   21714:	2008d0ba 	srli	r4,r4,2
   21718:	318000cc 	andi	r6,r6,3
   2171c:	31ffffc4 	addi	r7,r6,-1
   21720:	21000044 	addi	r4,r4,1
   21724:	200890ba 	slli	r4,r4,2
   21728:	1907883a 	add	r3,r3,r4
   2172c:	290b883a 	add	r5,r5,r4
   21730:	303fcc1e 	bne	r6,zero,21664 <memcpy+0x18>
   21734:	f800283a 	ret
   21738:	31ffffc4 	addi	r7,r6,-1
   2173c:	2007883a 	mov	r3,r4
   21740:	003fc806 	br	21664 <memcpy+0x18>
   21744:	480d883a 	mov	r6,r9
   21748:	003fc406 	br	2165c <memcpy+0x10>

0002174c <memmove>:
   2174c:	2005883a 	mov	r2,r4
   21750:	29000a2e 	bgeu	r5,r4,2177c <memmove+0x30>
   21754:	298f883a 	add	r7,r5,r6
   21758:	21c0082e 	bgeu	r4,r7,2177c <memmove+0x30>
   2175c:	2187883a 	add	r3,r4,r6
   21760:	30001226 	beq	r6,zero,217ac <memmove+0x60>
   21764:	397fffc3 	ldbu	r5,-1(r7)
   21768:	18ffffc4 	addi	r3,r3,-1
   2176c:	39ffffc4 	addi	r7,r7,-1
   21770:	19400005 	stb	r5,0(r3)
   21774:	10fffb1e 	bne	r2,r3,21764 <memmove+0x18>
   21778:	f800283a 	ret
   2177c:	30c00428 	cmpgeui	r3,r6,16
   21780:	18000b1e 	bne	r3,zero,217b0 <memmove+0x64>
   21784:	1007883a 	mov	r3,r2
   21788:	31ffffc4 	addi	r7,r6,-1
   2178c:	30003626 	beq	r6,zero,21868 <memmove+0x11c>
   21790:	39c00044 	addi	r7,r7,1
   21794:	19cf883a 	add	r7,r3,r7
   21798:	29800003 	ldbu	r6,0(r5)
   2179c:	18c00044 	addi	r3,r3,1
   217a0:	29400044 	addi	r5,r5,1
   217a4:	19bfffc5 	stb	r6,-1(r3)
   217a8:	19fffb1e 	bne	r3,r7,21798 <memmove+0x4c>
   217ac:	f800283a 	ret
   217b0:	1146b03a 	or	r3,r2,r5
   217b4:	18c000cc 	andi	r3,r3,3
   217b8:	1800281e 	bne	r3,zero,2185c <memmove+0x110>
   217bc:	313ffc04 	addi	r4,r6,-16
   217c0:	2008d13a 	srli	r4,r4,4
   217c4:	2811883a 	mov	r8,r5
   217c8:	100f883a 	mov	r7,r2
   217cc:	21000044 	addi	r4,r4,1
   217d0:	2008913a 	slli	r4,r4,4
   217d4:	1107883a 	add	r3,r2,r4
   217d8:	42400017 	ldw	r9,0(r8)
   217dc:	42000404 	addi	r8,r8,16
   217e0:	39c00404 	addi	r7,r7,16
   217e4:	3a7ffc15 	stw	r9,-16(r7)
   217e8:	427ffd17 	ldw	r9,-12(r8)
   217ec:	3a7ffd15 	stw	r9,-12(r7)
   217f0:	427ffe17 	ldw	r9,-8(r8)
   217f4:	3a7ffe15 	stw	r9,-8(r7)
   217f8:	427fff17 	ldw	r9,-4(r8)
   217fc:	3a7fff15 	stw	r9,-4(r7)
   21800:	38fff51e 	bne	r7,r3,217d8 <memmove+0x8c>
   21804:	31c0030c 	andi	r7,r6,12
   21808:	290b883a 	add	r5,r5,r4
   2180c:	324003cc 	andi	r9,r6,15
   21810:	38001626 	beq	r7,zero,2186c <memmove+0x120>
   21814:	2809883a 	mov	r4,r5
   21818:	180f883a 	mov	r7,r3
   2181c:	1a57883a 	add	r11,r3,r9
   21820:	22800017 	ldw	r10,0(r4)
   21824:	39c00104 	addi	r7,r7,4
   21828:	59d1c83a 	sub	r8,r11,r7
   2182c:	42000128 	cmpgeui	r8,r8,4
   21830:	3abfff15 	stw	r10,-4(r7)
   21834:	21000104 	addi	r4,r4,4
   21838:	403ff91e 	bne	r8,zero,21820 <memmove+0xd4>
   2183c:	493fff04 	addi	r4,r9,-4
   21840:	2008d0ba 	srli	r4,r4,2
   21844:	318000cc 	andi	r6,r6,3
   21848:	21000044 	addi	r4,r4,1
   2184c:	200890ba 	slli	r4,r4,2
   21850:	1907883a 	add	r3,r3,r4
   21854:	290b883a 	add	r5,r5,r4
   21858:	003fcb06 	br	21788 <memmove+0x3c>
   2185c:	31ffffc4 	addi	r7,r6,-1
   21860:	1007883a 	mov	r3,r2
   21864:	003fca06 	br	21790 <memmove+0x44>
   21868:	f800283a 	ret
   2186c:	480d883a 	mov	r6,r9
   21870:	003fc506 	br	21788 <memmove+0x3c>

00021874 <memset>:
   21874:	defffb04 	addi	sp,sp,-20
   21878:	dc800215 	stw	r18,8(sp)
   2187c:	dc400115 	stw	r17,4(sp)
   21880:	dfc00415 	stw	ra,16(sp)
   21884:	dcc00315 	stw	r19,12(sp)
   21888:	dc000015 	stw	r16,0(sp)
   2188c:	208000cc 	andi	r2,r4,3
   21890:	2023883a 	mov	r17,r4
   21894:	2825883a 	mov	r18,r5
   21898:	10004026 	beq	r2,zero,2199c <memset+0x128>
   2189c:	34ffffc4 	addi	r19,r6,-1
   218a0:	30003326 	beq	r6,zero,21970 <memset+0xfc>
   218a4:	280f883a 	mov	r7,r5
   218a8:	2021883a 	mov	r16,r4
   218ac:	00000306 	br	218bc <memset+0x48>
   218b0:	9cffffc4 	addi	r19,r19,-1
   218b4:	99bfffe0 	cmpeqi	r6,r19,-1
   218b8:	30002d1e 	bne	r6,zero,21970 <memset+0xfc>
   218bc:	84000044 	addi	r16,r16,1
   218c0:	818000cc 	andi	r6,r16,3
   218c4:	81ffffc5 	stb	r7,-1(r16)
   218c8:	303ff91e 	bne	r6,zero,218b0 <memset+0x3c>
   218cc:	98800128 	cmpgeui	r2,r19,4
   218d0:	10002126 	beq	r2,zero,21958 <memset+0xe4>
   218d4:	01404074 	movhi	r5,257
   218d8:	29404044 	addi	r5,r5,257
   218dc:	91003fcc 	andi	r4,r18,255
   218e0:	00230c80 	call	230c8 <__mulsi3>
   218e4:	98c00430 	cmpltui	r3,r19,16
   218e8:	18002f1e 	bne	r3,zero,219a8 <memset+0x134>
   218ec:	99bffc04 	addi	r6,r19,-16
   218f0:	300cd13a 	srli	r6,r6,4
   218f4:	31800044 	addi	r6,r6,1
   218f8:	300c913a 	slli	r6,r6,4
   218fc:	818d883a 	add	r6,r16,r6
   21900:	80800015 	stw	r2,0(r16)
   21904:	80800115 	stw	r2,4(r16)
   21908:	80800215 	stw	r2,8(r16)
   2190c:	80800315 	stw	r2,12(r16)
   21910:	84000404 	addi	r16,r16,16
   21914:	81bffa1e 	bne	r16,r6,21900 <memset+0x8c>
   21918:	9900030c 	andi	r4,r19,12
   2191c:	98c003cc 	andi	r3,r19,15
   21920:	20001b26 	beq	r4,zero,21990 <memset+0x11c>
   21924:	3009883a 	mov	r4,r6
   21928:	30cb883a 	add	r5,r6,r3
   2192c:	21000104 	addi	r4,r4,4
   21930:	290fc83a 	sub	r7,r5,r4
   21934:	39c00128 	cmpgeui	r7,r7,4
   21938:	20bfff15 	stw	r2,-4(r4)
   2193c:	383ffb1e 	bne	r7,zero,2192c <memset+0xb8>
   21940:	1c3fff04 	addi	r16,r3,-4
   21944:	8020d0ba 	srli	r16,r16,2
   21948:	1cc000cc 	andi	r19,r3,3
   2194c:	84000044 	addi	r16,r16,1
   21950:	802090ba 	slli	r16,r16,2
   21954:	3421883a 	add	r16,r6,r16
   21958:	98000526 	beq	r19,zero,21970 <memset+0xfc>
   2195c:	900b883a 	mov	r5,r18
   21960:	84c7883a 	add	r3,r16,r19
   21964:	84000044 	addi	r16,r16,1
   21968:	817fffc5 	stb	r5,-1(r16)
   2196c:	1c3ffd1e 	bne	r3,r16,21964 <memset+0xf0>
   21970:	8805883a 	mov	r2,r17
   21974:	dfc00417 	ldw	ra,16(sp)
   21978:	dcc00317 	ldw	r19,12(sp)
   2197c:	dc800217 	ldw	r18,8(sp)
   21980:	dc400117 	ldw	r17,4(sp)
   21984:	dc000017 	ldw	r16,0(sp)
   21988:	dec00504 	addi	sp,sp,20
   2198c:	f800283a 	ret
   21990:	1827883a 	mov	r19,r3
   21994:	983ff11e 	bne	r19,zero,2195c <memset+0xe8>
   21998:	003ff506 	br	21970 <memset+0xfc>
   2199c:	2021883a 	mov	r16,r4
   219a0:	3027883a 	mov	r19,r6
   219a4:	003fc906 	br	218cc <memset+0x58>
   219a8:	800d883a 	mov	r6,r16
   219ac:	9807883a 	mov	r3,r19
   219b0:	003fdc06 	br	21924 <memset+0xb0>

000219b4 <_realloc_r>:
   219b4:	defff504 	addi	sp,sp,-44
   219b8:	dd000515 	stw	r20,20(sp)
   219bc:	dfc00a15 	stw	ra,40(sp)
   219c0:	df000915 	stw	fp,36(sp)
   219c4:	ddc00815 	stw	r23,32(sp)
   219c8:	dd800715 	stw	r22,28(sp)
   219cc:	dd400615 	stw	r21,24(sp)
   219d0:	dcc00415 	stw	r19,16(sp)
   219d4:	dc800315 	stw	r18,12(sp)
   219d8:	dc400215 	stw	r17,8(sp)
   219dc:	dc000115 	stw	r16,4(sp)
   219e0:	3029883a 	mov	r20,r6
   219e4:	28008a26 	beq	r5,zero,21c10 <_realloc_r+0x25c>
   219e8:	2821883a 	mov	r16,r5
   219ec:	202b883a 	mov	r21,r4
   219f0:	002369c0 	call	2369c <__malloc_lock>
   219f4:	84ffff17 	ldw	r19,-4(r16)
   219f8:	a44002c4 	addi	r17,r20,11
   219fc:	04bfff04 	movi	r18,-4
   21a00:	888005f0 	cmpltui	r2,r17,23
   21a04:	85bffe04 	addi	r22,r16,-8
   21a08:	9ca4703a 	and	r18,r19,r18
   21a0c:	10005a1e 	bne	r2,zero,21b78 <_realloc_r+0x1c4>
   21a10:	00bffe04 	movi	r2,-8
   21a14:	88a2703a 	and	r17,r17,r2
   21a18:	88005916 	blt	r17,zero,21b80 <_realloc_r+0x1cc>
   21a1c:	8d005836 	bltu	r17,r20,21b80 <_realloc_r+0x1cc>
   21a20:	94403b0e 	bge	r18,r17,21b10 <_realloc_r+0x15c>
   21a24:	05c000b4 	movhi	r23,2
   21a28:	bdd59b04 	addi	r23,r23,22124
   21a2c:	b9400217 	ldw	r5,8(r23)
   21a30:	b489883a 	add	r4,r22,r18
   21a34:	20800117 	ldw	r2,4(r4)
   21a38:	29008e26 	beq	r5,r4,21c74 <_realloc_r+0x2c0>
   21a3c:	00ffff84 	movi	r3,-2
   21a40:	10c6703a 	and	r3,r2,r3
   21a44:	20c7883a 	add	r3,r4,r3
   21a48:	18c00117 	ldw	r3,4(r3)
   21a4c:	18c0004c 	andi	r3,r3,1
   21a50:	18004f1e 	bne	r3,zero,21b90 <_realloc_r+0x1dc>
   21a54:	00ffff04 	movi	r3,-4
   21a58:	10c4703a 	and	r2,r2,r3
   21a5c:	9087883a 	add	r3,r18,r2
   21a60:	1c40c30e 	bge	r3,r17,21d70 <_realloc_r+0x3bc>
   21a64:	9cc0004c 	andi	r19,r19,1
   21a68:	98004b1e 	bne	r19,zero,21b98 <_realloc_r+0x1e4>
   21a6c:	873ffe17 	ldw	fp,-8(r16)
   21a70:	00ffff04 	movi	r3,-4
   21a74:	b739c83a 	sub	fp,r22,fp
   21a78:	e4c00117 	ldw	r19,4(fp)
   21a7c:	98c6703a 	and	r3,r19,r3
   21a80:	20000426 	beq	r4,zero,21a94 <_realloc_r+0xe0>
   21a84:	90cf883a 	add	r7,r18,r3
   21a88:	388f883a 	add	r7,r7,r2
   21a8c:	2900c226 	beq	r5,r4,21d98 <_realloc_r+0x3e4>
   21a90:	3c409e0e 	bge	r7,r17,21d0c <_realloc_r+0x358>
   21a94:	e0004026 	beq	fp,zero,21b98 <_realloc_r+0x1e4>
   21a98:	90ef883a 	add	r23,r18,r3
   21a9c:	bc403e16 	blt	r23,r17,21b98 <_realloc_r+0x1e4>
   21aa0:	e0800317 	ldw	r2,12(fp)
   21aa4:	e0c00217 	ldw	r3,8(fp)
   21aa8:	91bfff04 	addi	r6,r18,-4
   21aac:	31400968 	cmpgeui	r5,r6,37
   21ab0:	18800315 	stw	r2,12(r3)
   21ab4:	10c00215 	stw	r3,8(r2)
   21ab8:	e1000204 	addi	r4,fp,8
   21abc:	2800e71e 	bne	r5,zero,21e5c <_realloc_r+0x4a8>
   21ac0:	30800530 	cmpltui	r2,r6,20
   21ac4:	1000e31e 	bne	r2,zero,21e54 <_realloc_r+0x4a0>
   21ac8:	80c00017 	ldw	r3,0(r16)
   21acc:	30800728 	cmpgeui	r2,r6,28
   21ad0:	e0c00215 	stw	r3,8(fp)
   21ad4:	80c00117 	ldw	r3,4(r16)
   21ad8:	e0c00315 	stw	r3,12(fp)
   21adc:	1000fa1e 	bne	r2,zero,21ec8 <_realloc_r+0x514>
   21ae0:	84000204 	addi	r16,r16,8
   21ae4:	e0800404 	addi	r2,fp,16
   21ae8:	80c00017 	ldw	r3,0(r16)
   21aec:	b825883a 	mov	r18,r23
   21af0:	10c00015 	stw	r3,0(r2)
   21af4:	80c00117 	ldw	r3,4(r16)
   21af8:	e02d883a 	mov	r22,fp
   21afc:	10c00115 	stw	r3,4(r2)
   21b00:	80c00217 	ldw	r3,8(r16)
   21b04:	2021883a 	mov	r16,r4
   21b08:	10c00215 	stw	r3,8(r2)
   21b0c:	e4c00117 	ldw	r19,4(fp)
   21b10:	9447c83a 	sub	r3,r18,r17
   21b14:	19000430 	cmpltui	r4,r3,16
   21b18:	9cc0004c 	andi	r19,r19,1
   21b1c:	b485883a 	add	r2,r22,r18
   21b20:	20004826 	beq	r4,zero,21c44 <_realloc_r+0x290>
   21b24:	94e6b03a 	or	r19,r18,r19
   21b28:	b4c00115 	stw	r19,4(r22)
   21b2c:	10c00117 	ldw	r3,4(r2)
   21b30:	18c00054 	ori	r3,r3,1
   21b34:	10c00115 	stw	r3,4(r2)
   21b38:	a809883a 	mov	r4,r21
   21b3c:	00236c00 	call	236c0 <__malloc_unlock>
   21b40:	8029883a 	mov	r20,r16
   21b44:	a005883a 	mov	r2,r20
   21b48:	dfc00a17 	ldw	ra,40(sp)
   21b4c:	df000917 	ldw	fp,36(sp)
   21b50:	ddc00817 	ldw	r23,32(sp)
   21b54:	dd800717 	ldw	r22,28(sp)
   21b58:	dd400617 	ldw	r21,24(sp)
   21b5c:	dd000517 	ldw	r20,20(sp)
   21b60:	dcc00417 	ldw	r19,16(sp)
   21b64:	dc800317 	ldw	r18,12(sp)
   21b68:	dc400217 	ldw	r17,8(sp)
   21b6c:	dc000117 	ldw	r16,4(sp)
   21b70:	dec00b04 	addi	sp,sp,44
   21b74:	f800283a 	ret
   21b78:	04400404 	movi	r17,16
   21b7c:	8d3fa82e 	bgeu	r17,r20,21a20 <_realloc_r+0x6c>
   21b80:	00800304 	movi	r2,12
   21b84:	a8800015 	stw	r2,0(r21)
   21b88:	0029883a 	mov	r20,zero
   21b8c:	003fed06 	br	21b44 <_realloc_r+0x190>
   21b90:	9cc0004c 	andi	r19,r19,1
   21b94:	98004e26 	beq	r19,zero,21cd0 <_realloc_r+0x31c>
   21b98:	a00b883a 	mov	r5,r20
   21b9c:	a809883a 	mov	r4,r21
   21ba0:	0020d9c0 	call	20d9c <_malloc_r>
   21ba4:	1029883a 	mov	r20,r2
   21ba8:	1000bd26 	beq	r2,zero,21ea0 <_realloc_r+0x4ec>
   21bac:	84ffff17 	ldw	r19,-4(r16)
   21bb0:	10fffe04 	addi	r3,r2,-8
   21bb4:	00bfff84 	movi	r2,-2
   21bb8:	9884703a 	and	r2,r19,r2
   21bbc:	b085883a 	add	r2,r22,r2
   21bc0:	10c03e26 	beq	r2,r3,21cbc <_realloc_r+0x308>
   21bc4:	91bfff04 	addi	r6,r18,-4
   21bc8:	30800968 	cmpgeui	r2,r6,37
   21bcc:	10006e1e 	bne	r2,zero,21d88 <_realloc_r+0x3d4>
   21bd0:	30800530 	cmpltui	r2,r6,20
   21bd4:	10004426 	beq	r2,zero,21ce8 <_realloc_r+0x334>
   21bd8:	a005883a 	mov	r2,r20
   21bdc:	8007883a 	mov	r3,r16
   21be0:	19000017 	ldw	r4,0(r3)
   21be4:	11000015 	stw	r4,0(r2)
   21be8:	19000117 	ldw	r4,4(r3)
   21bec:	11000115 	stw	r4,4(r2)
   21bf0:	18c00217 	ldw	r3,8(r3)
   21bf4:	10c00215 	stw	r3,8(r2)
   21bf8:	a809883a 	mov	r4,r21
   21bfc:	800b883a 	mov	r5,r16
   21c00:	00228600 	call	22860 <_free_r>
   21c04:	a809883a 	mov	r4,r21
   21c08:	00236c00 	call	236c0 <__malloc_unlock>
   21c0c:	003fcd06 	br	21b44 <_realloc_r+0x190>
   21c10:	300b883a 	mov	r5,r6
   21c14:	dfc00a17 	ldw	ra,40(sp)
   21c18:	df000917 	ldw	fp,36(sp)
   21c1c:	ddc00817 	ldw	r23,32(sp)
   21c20:	dd800717 	ldw	r22,28(sp)
   21c24:	dd400617 	ldw	r21,24(sp)
   21c28:	dd000517 	ldw	r20,20(sp)
   21c2c:	dcc00417 	ldw	r19,16(sp)
   21c30:	dc800317 	ldw	r18,12(sp)
   21c34:	dc400217 	ldw	r17,8(sp)
   21c38:	dc000117 	ldw	r16,4(sp)
   21c3c:	dec00b04 	addi	sp,sp,44
   21c40:	0020d9c1 	jmpi	20d9c <_malloc_r>
   21c44:	8ce6b03a 	or	r19,r17,r19
   21c48:	b4c00115 	stw	r19,4(r22)
   21c4c:	b44b883a 	add	r5,r22,r17
   21c50:	18c00054 	ori	r3,r3,1
   21c54:	28c00115 	stw	r3,4(r5)
   21c58:	10c00117 	ldw	r3,4(r2)
   21c5c:	29400204 	addi	r5,r5,8
   21c60:	a809883a 	mov	r4,r21
   21c64:	18c00054 	ori	r3,r3,1
   21c68:	10c00115 	stw	r3,4(r2)
   21c6c:	00228600 	call	22860 <_free_r>
   21c70:	003fb106 	br	21b38 <_realloc_r+0x184>
   21c74:	00ffff04 	movi	r3,-4
   21c78:	10c4703a 	and	r2,r2,r3
   21c7c:	1487883a 	add	r3,r2,r18
   21c80:	89800404 	addi	r6,r17,16
   21c84:	19bf7716 	blt	r3,r6,21a64 <_realloc_r+0xb0>
   21c88:	b46d883a 	add	r22,r22,r17
   21c8c:	1c45c83a 	sub	r2,r3,r17
   21c90:	bd800215 	stw	r22,8(r23)
   21c94:	10800054 	ori	r2,r2,1
   21c98:	b0800115 	stw	r2,4(r22)
   21c9c:	80bfff17 	ldw	r2,-4(r16)
   21ca0:	a809883a 	mov	r4,r21
   21ca4:	8029883a 	mov	r20,r16
   21ca8:	1080004c 	andi	r2,r2,1
   21cac:	1444b03a 	or	r2,r2,r17
   21cb0:	80bfff15 	stw	r2,-4(r16)
   21cb4:	00236c00 	call	236c0 <__malloc_unlock>
   21cb8:	003fa206 	br	21b44 <_realloc_r+0x190>
   21cbc:	a0bfff17 	ldw	r2,-4(r20)
   21cc0:	00ffff04 	movi	r3,-4
   21cc4:	10c4703a 	and	r2,r2,r3
   21cc8:	90a5883a 	add	r18,r18,r2
   21ccc:	003f9006 	br	21b10 <_realloc_r+0x15c>
   21cd0:	873ffe17 	ldw	fp,-8(r16)
   21cd4:	00bfff04 	movi	r2,-4
   21cd8:	b739c83a 	sub	fp,r22,fp
   21cdc:	e0c00117 	ldw	r3,4(fp)
   21ce0:	1886703a 	and	r3,r3,r2
   21ce4:	003f6b06 	br	21a94 <_realloc_r+0xe0>
   21ce8:	80c00017 	ldw	r3,0(r16)
   21cec:	30800728 	cmpgeui	r2,r6,28
   21cf0:	a0c00015 	stw	r3,0(r20)
   21cf4:	80c00117 	ldw	r3,4(r16)
   21cf8:	a0c00115 	stw	r3,4(r20)
   21cfc:	10004c1e 	bne	r2,zero,21e30 <_realloc_r+0x47c>
   21d00:	80c00204 	addi	r3,r16,8
   21d04:	a0800204 	addi	r2,r20,8
   21d08:	003fb506 	br	21be0 <_realloc_r+0x22c>
   21d0c:	20800317 	ldw	r2,12(r4)
   21d10:	20c00217 	ldw	r3,8(r4)
   21d14:	91bfff04 	addi	r6,r18,-4
   21d18:	31400968 	cmpgeui	r5,r6,37
   21d1c:	18800315 	stw	r2,12(r3)
   21d20:	10c00215 	stw	r3,8(r2)
   21d24:	e0c00217 	ldw	r3,8(fp)
   21d28:	e0800317 	ldw	r2,12(fp)
   21d2c:	e1000204 	addi	r4,fp,8
   21d30:	18800315 	stw	r2,12(r3)
   21d34:	10c00215 	stw	r3,8(r2)
   21d38:	2800511e 	bne	r5,zero,21e80 <_realloc_r+0x4cc>
   21d3c:	30800530 	cmpltui	r2,r6,20
   21d40:	10004d1e 	bne	r2,zero,21e78 <_realloc_r+0x4c4>
   21d44:	80c00017 	ldw	r3,0(r16)
   21d48:	30800728 	cmpgeui	r2,r6,28
   21d4c:	e0c00215 	stw	r3,8(fp)
   21d50:	80c00117 	ldw	r3,4(r16)
   21d54:	e0c00315 	stw	r3,12(fp)
   21d58:	1000641e 	bne	r2,zero,21eec <_realloc_r+0x538>
   21d5c:	84000204 	addi	r16,r16,8
   21d60:	e0800404 	addi	r2,fp,16
   21d64:	80c00017 	ldw	r3,0(r16)
   21d68:	3825883a 	mov	r18,r7
   21d6c:	003f6006 	br	21af0 <_realloc_r+0x13c>
   21d70:	20800317 	ldw	r2,12(r4)
   21d74:	21000217 	ldw	r4,8(r4)
   21d78:	1825883a 	mov	r18,r3
   21d7c:	20800315 	stw	r2,12(r4)
   21d80:	11000215 	stw	r4,8(r2)
   21d84:	003f6206 	br	21b10 <_realloc_r+0x15c>
   21d88:	800b883a 	mov	r5,r16
   21d8c:	a009883a 	mov	r4,r20
   21d90:	002174c0 	call	2174c <memmove>
   21d94:	003f9806 	br	21bf8 <_realloc_r+0x244>
   21d98:	88800404 	addi	r2,r17,16
   21d9c:	38bf3d16 	blt	r7,r2,21a94 <_realloc_r+0xe0>
   21da0:	e0800317 	ldw	r2,12(fp)
   21da4:	e0c00217 	ldw	r3,8(fp)
   21da8:	91bfff04 	addi	r6,r18,-4
   21dac:	31000968 	cmpgeui	r4,r6,37
   21db0:	18800315 	stw	r2,12(r3)
   21db4:	10c00215 	stw	r3,8(r2)
   21db8:	e5000204 	addi	r20,fp,8
   21dbc:	2000561e 	bne	r4,zero,21f18 <_realloc_r+0x564>
   21dc0:	30800530 	cmpltui	r2,r6,20
   21dc4:	1000521e 	bne	r2,zero,21f10 <_realloc_r+0x55c>
   21dc8:	80c00017 	ldw	r3,0(r16)
   21dcc:	30800728 	cmpgeui	r2,r6,28
   21dd0:	e0c00215 	stw	r3,8(fp)
   21dd4:	80c00117 	ldw	r3,4(r16)
   21dd8:	e0c00315 	stw	r3,12(fp)
   21ddc:	1000541e 	bne	r2,zero,21f30 <_realloc_r+0x57c>
   21de0:	84000204 	addi	r16,r16,8
   21de4:	e0800404 	addi	r2,fp,16
   21de8:	80c00017 	ldw	r3,0(r16)
   21dec:	10c00015 	stw	r3,0(r2)
   21df0:	80c00117 	ldw	r3,4(r16)
   21df4:	10c00115 	stw	r3,4(r2)
   21df8:	80c00217 	ldw	r3,8(r16)
   21dfc:	10c00215 	stw	r3,8(r2)
   21e00:	e447883a 	add	r3,fp,r17
   21e04:	3c45c83a 	sub	r2,r7,r17
   21e08:	b8c00215 	stw	r3,8(r23)
   21e0c:	10800054 	ori	r2,r2,1
   21e10:	18800115 	stw	r2,4(r3)
   21e14:	e0800117 	ldw	r2,4(fp)
   21e18:	a809883a 	mov	r4,r21
   21e1c:	1080004c 	andi	r2,r2,1
   21e20:	1444b03a 	or	r2,r2,r17
   21e24:	e0800115 	stw	r2,4(fp)
   21e28:	00236c00 	call	236c0 <__malloc_unlock>
   21e2c:	003f4506 	br	21b44 <_realloc_r+0x190>
   21e30:	80800217 	ldw	r2,8(r16)
   21e34:	31800920 	cmpeqi	r6,r6,36
   21e38:	a0800215 	stw	r2,8(r20)
   21e3c:	80800317 	ldw	r2,12(r16)
   21e40:	a0800315 	stw	r2,12(r20)
   21e44:	3000191e 	bne	r6,zero,21eac <_realloc_r+0x4f8>
   21e48:	80c00404 	addi	r3,r16,16
   21e4c:	a0800404 	addi	r2,r20,16
   21e50:	003f6306 	br	21be0 <_realloc_r+0x22c>
   21e54:	2005883a 	mov	r2,r4
   21e58:	003f2306 	br	21ae8 <_realloc_r+0x134>
   21e5c:	800b883a 	mov	r5,r16
   21e60:	002174c0 	call	2174c <memmove>
   21e64:	1021883a 	mov	r16,r2
   21e68:	e4c00117 	ldw	r19,4(fp)
   21e6c:	b825883a 	mov	r18,r23
   21e70:	e02d883a 	mov	r22,fp
   21e74:	003f2606 	br	21b10 <_realloc_r+0x15c>
   21e78:	2005883a 	mov	r2,r4
   21e7c:	003fb906 	br	21d64 <_realloc_r+0x3b0>
   21e80:	800b883a 	mov	r5,r16
   21e84:	d9c00015 	stw	r7,0(sp)
   21e88:	002174c0 	call	2174c <memmove>
   21e8c:	d9c00017 	ldw	r7,0(sp)
   21e90:	1021883a 	mov	r16,r2
   21e94:	e02d883a 	mov	r22,fp
   21e98:	3825883a 	mov	r18,r7
   21e9c:	003f1c06 	br	21b10 <_realloc_r+0x15c>
   21ea0:	a809883a 	mov	r4,r21
   21ea4:	00236c00 	call	236c0 <__malloc_unlock>
   21ea8:	003f3706 	br	21b88 <_realloc_r+0x1d4>
   21eac:	81000417 	ldw	r4,16(r16)
   21eb0:	80c00604 	addi	r3,r16,24
   21eb4:	a0800604 	addi	r2,r20,24
   21eb8:	a1000415 	stw	r4,16(r20)
   21ebc:	81000517 	ldw	r4,20(r16)
   21ec0:	a1000515 	stw	r4,20(r20)
   21ec4:	003f4606 	br	21be0 <_realloc_r+0x22c>
   21ec8:	80800217 	ldw	r2,8(r16)
   21ecc:	31800920 	cmpeqi	r6,r6,36
   21ed0:	e0800415 	stw	r2,16(fp)
   21ed4:	80800317 	ldw	r2,12(r16)
   21ed8:	e0800515 	stw	r2,20(fp)
   21edc:	30001d1e 	bne	r6,zero,21f54 <_realloc_r+0x5a0>
   21ee0:	84000404 	addi	r16,r16,16
   21ee4:	e0800604 	addi	r2,fp,24
   21ee8:	003eff06 	br	21ae8 <_realloc_r+0x134>
   21eec:	80800217 	ldw	r2,8(r16)
   21ef0:	31800920 	cmpeqi	r6,r6,36
   21ef4:	e0800415 	stw	r2,16(fp)
   21ef8:	80800317 	ldw	r2,12(r16)
   21efc:	e0800515 	stw	r2,20(fp)
   21f00:	30001b1e 	bne	r6,zero,21f70 <_realloc_r+0x5bc>
   21f04:	84000404 	addi	r16,r16,16
   21f08:	e0800604 	addi	r2,fp,24
   21f0c:	003f9506 	br	21d64 <_realloc_r+0x3b0>
   21f10:	a005883a 	mov	r2,r20
   21f14:	003fb406 	br	21de8 <_realloc_r+0x434>
   21f18:	800b883a 	mov	r5,r16
   21f1c:	a009883a 	mov	r4,r20
   21f20:	d9c00015 	stw	r7,0(sp)
   21f24:	002174c0 	call	2174c <memmove>
   21f28:	d9c00017 	ldw	r7,0(sp)
   21f2c:	003fb406 	br	21e00 <_realloc_r+0x44c>
   21f30:	80800217 	ldw	r2,8(r16)
   21f34:	31800920 	cmpeqi	r6,r6,36
   21f38:	e0800415 	stw	r2,16(fp)
   21f3c:	80800317 	ldw	r2,12(r16)
   21f40:	e0800515 	stw	r2,20(fp)
   21f44:	3000111e 	bne	r6,zero,21f8c <_realloc_r+0x5d8>
   21f48:	84000404 	addi	r16,r16,16
   21f4c:	e0800604 	addi	r2,fp,24
   21f50:	003fa506 	br	21de8 <_realloc_r+0x434>
   21f54:	80c00417 	ldw	r3,16(r16)
   21f58:	84000604 	addi	r16,r16,24
   21f5c:	e0800804 	addi	r2,fp,32
   21f60:	e0c00615 	stw	r3,24(fp)
   21f64:	80ffff17 	ldw	r3,-4(r16)
   21f68:	e0c00715 	stw	r3,28(fp)
   21f6c:	003ede06 	br	21ae8 <_realloc_r+0x134>
   21f70:	80c00417 	ldw	r3,16(r16)
   21f74:	84000604 	addi	r16,r16,24
   21f78:	e0800804 	addi	r2,fp,32
   21f7c:	e0c00615 	stw	r3,24(fp)
   21f80:	80ffff17 	ldw	r3,-4(r16)
   21f84:	e0c00715 	stw	r3,28(fp)
   21f88:	003f7606 	br	21d64 <_realloc_r+0x3b0>
   21f8c:	80c00417 	ldw	r3,16(r16)
   21f90:	84000604 	addi	r16,r16,24
   21f94:	e0800804 	addi	r2,fp,32
   21f98:	e0c00615 	stw	r3,24(fp)
   21f9c:	80ffff17 	ldw	r3,-4(r16)
   21fa0:	e0c00715 	stw	r3,28(fp)
   21fa4:	003f9006 	br	21de8 <_realloc_r+0x434>

00021fa8 <_sbrk_r>:
   21fa8:	defffe04 	addi	sp,sp,-8
   21fac:	dc000015 	stw	r16,0(sp)
   21fb0:	008000b4 	movhi	r2,2
   21fb4:	2021883a 	mov	r16,r4
   21fb8:	2809883a 	mov	r4,r5
   21fbc:	dfc00115 	stw	ra,4(sp)
   21fc0:	1019f915 	stw	zero,26596(r2)
   21fc4:	00238980 	call	23898 <sbrk>
   21fc8:	10ffffd8 	cmpnei	r3,r2,-1
   21fcc:	18000426 	beq	r3,zero,21fe0 <_sbrk_r+0x38>
   21fd0:	dfc00117 	ldw	ra,4(sp)
   21fd4:	dc000017 	ldw	r16,0(sp)
   21fd8:	dec00204 	addi	sp,sp,8
   21fdc:	f800283a 	ret
   21fe0:	00c000b4 	movhi	r3,2
   21fe4:	18d9f917 	ldw	r3,26596(r3)
   21fe8:	183ff926 	beq	r3,zero,21fd0 <_sbrk_r+0x28>
   21fec:	80c00015 	stw	r3,0(r16)
   21ff0:	dfc00117 	ldw	ra,4(sp)
   21ff4:	dc000017 	ldw	r16,0(sp)
   21ff8:	dec00204 	addi	sp,sp,8
   21ffc:	f800283a 	ret

00022000 <__sread>:
   22000:	defffe04 	addi	sp,sp,-8
   22004:	dc000015 	stw	r16,0(sp)
   22008:	2821883a 	mov	r16,r5
   2200c:	2940038f 	ldh	r5,14(r5)
   22010:	dfc00115 	stw	ra,4(sp)
   22014:	0022df80 	call	22df8 <_read_r>
   22018:	10000716 	blt	r2,zero,22038 <__sread+0x38>
   2201c:	80c01417 	ldw	r3,80(r16)
   22020:	1887883a 	add	r3,r3,r2
   22024:	80c01415 	stw	r3,80(r16)
   22028:	dfc00117 	ldw	ra,4(sp)
   2202c:	dc000017 	ldw	r16,0(sp)
   22030:	dec00204 	addi	sp,sp,8
   22034:	f800283a 	ret
   22038:	80c0030b 	ldhu	r3,12(r16)
   2203c:	18fbffcc 	andi	r3,r3,61439
   22040:	80c0030d 	sth	r3,12(r16)
   22044:	dfc00117 	ldw	ra,4(sp)
   22048:	dc000017 	ldw	r16,0(sp)
   2204c:	dec00204 	addi	sp,sp,8
   22050:	f800283a 	ret

00022054 <__seofread>:
   22054:	0005883a 	mov	r2,zero
   22058:	f800283a 	ret

0002205c <__swrite>:
   2205c:	2880030b 	ldhu	r2,12(r5)
   22060:	defffb04 	addi	sp,sp,-20
   22064:	dcc00315 	stw	r19,12(sp)
   22068:	dc800215 	stw	r18,8(sp)
   2206c:	dc400115 	stw	r17,4(sp)
   22070:	dc000015 	stw	r16,0(sp)
   22074:	dfc00415 	stw	ra,16(sp)
   22078:	10c0400c 	andi	r3,r2,256
   2207c:	2821883a 	mov	r16,r5
   22080:	2023883a 	mov	r17,r4
   22084:	3025883a 	mov	r18,r6
   22088:	3827883a 	mov	r19,r7
   2208c:	18000d1e 	bne	r3,zero,220c4 <__swrite+0x68>
   22090:	8140038f 	ldh	r5,14(r16)
   22094:	10bbffcc 	andi	r2,r2,61439
   22098:	980f883a 	mov	r7,r19
   2209c:	900d883a 	mov	r6,r18
   220a0:	8809883a 	mov	r4,r17
   220a4:	8080030d 	sth	r2,12(r16)
   220a8:	dfc00417 	ldw	ra,16(sp)
   220ac:	dcc00317 	ldw	r19,12(sp)
   220b0:	dc800217 	ldw	r18,8(sp)
   220b4:	dc400117 	ldw	r17,4(sp)
   220b8:	dc000017 	ldw	r16,0(sp)
   220bc:	dec00504 	addi	sp,sp,20
   220c0:	00221401 	jmpi	22140 <_write_r>
   220c4:	2940038f 	ldh	r5,14(r5)
   220c8:	01c00084 	movi	r7,2
   220cc:	000d883a 	mov	r6,zero
   220d0:	0022b680 	call	22b68 <_lseek_r>
   220d4:	8080030b 	ldhu	r2,12(r16)
   220d8:	003fed06 	br	22090 <__swrite+0x34>

000220dc <__sseek>:
   220dc:	defffe04 	addi	sp,sp,-8
   220e0:	dc000015 	stw	r16,0(sp)
   220e4:	2821883a 	mov	r16,r5
   220e8:	2940038f 	ldh	r5,14(r5)
   220ec:	dfc00115 	stw	ra,4(sp)
   220f0:	0022b680 	call	22b68 <_lseek_r>
   220f4:	10ffffd8 	cmpnei	r3,r2,-1
   220f8:	18000826 	beq	r3,zero,2211c <__sseek+0x40>
   220fc:	80c0030b 	ldhu	r3,12(r16)
   22100:	80801415 	stw	r2,80(r16)
   22104:	18c40014 	ori	r3,r3,4096
   22108:	80c0030d 	sth	r3,12(r16)
   2210c:	dfc00117 	ldw	ra,4(sp)
   22110:	dc000017 	ldw	r16,0(sp)
   22114:	dec00204 	addi	sp,sp,8
   22118:	f800283a 	ret
   2211c:	80c0030b 	ldhu	r3,12(r16)
   22120:	18fbffcc 	andi	r3,r3,61439
   22124:	80c0030d 	sth	r3,12(r16)
   22128:	dfc00117 	ldw	ra,4(sp)
   2212c:	dc000017 	ldw	r16,0(sp)
   22130:	dec00204 	addi	sp,sp,8
   22134:	f800283a 	ret

00022138 <__sclose>:
   22138:	2940038f 	ldh	r5,14(r5)
   2213c:	00222f01 	jmpi	222f0 <_close_r>

00022140 <_write_r>:
   22140:	2807883a 	mov	r3,r5
   22144:	defffe04 	addi	sp,sp,-8
   22148:	dc000015 	stw	r16,0(sp)
   2214c:	300b883a 	mov	r5,r6
   22150:	008000b4 	movhi	r2,2
   22154:	380d883a 	mov	r6,r7
   22158:	2021883a 	mov	r16,r4
   2215c:	1809883a 	mov	r4,r3
   22160:	dfc00115 	stw	ra,4(sp)
   22164:	1019f915 	stw	zero,26596(r2)
   22168:	002398c0 	call	2398c <write>
   2216c:	10ffffd8 	cmpnei	r3,r2,-1
   22170:	18000426 	beq	r3,zero,22184 <_write_r+0x44>
   22174:	dfc00117 	ldw	ra,4(sp)
   22178:	dc000017 	ldw	r16,0(sp)
   2217c:	dec00204 	addi	sp,sp,8
   22180:	f800283a 	ret
   22184:	00c000b4 	movhi	r3,2
   22188:	18d9f917 	ldw	r3,26596(r3)
   2218c:	183ff926 	beq	r3,zero,22174 <_write_r+0x34>
   22190:	80c00015 	stw	r3,0(r16)
   22194:	dfc00117 	ldw	ra,4(sp)
   22198:	dc000017 	ldw	r16,0(sp)
   2219c:	dec00204 	addi	sp,sp,8
   221a0:	f800283a 	ret

000221a4 <__swsetup_r>:
   221a4:	008000b4 	movhi	r2,2
   221a8:	10973917 	ldw	r2,23780(r2)
   221ac:	defffd04 	addi	sp,sp,-12
   221b0:	dc400115 	stw	r17,4(sp)
   221b4:	dc000015 	stw	r16,0(sp)
   221b8:	dfc00215 	stw	ra,8(sp)
   221bc:	2023883a 	mov	r17,r4
   221c0:	2821883a 	mov	r16,r5
   221c4:	10000226 	beq	r2,zero,221d0 <__swsetup_r+0x2c>
   221c8:	10c00e17 	ldw	r3,56(r2)
   221cc:	18001d26 	beq	r3,zero,22244 <__swsetup_r+0xa0>
   221d0:	80c0030b 	ldhu	r3,12(r16)
   221d4:	1880020c 	andi	r2,r3,8
   221d8:	10001f26 	beq	r2,zero,22258 <__swsetup_r+0xb4>
   221dc:	80800417 	ldw	r2,16(r16)
   221e0:	10002626 	beq	r2,zero,2227c <__swsetup_r+0xd8>
   221e4:	1900004c 	andi	r4,r3,1
   221e8:	20000b1e 	bne	r4,zero,22218 <__swsetup_r+0x74>
   221ec:	1900008c 	andi	r4,r3,2
   221f0:	20002b1e 	bne	r4,zero,222a0 <__swsetup_r+0xfc>
   221f4:	81000517 	ldw	r4,20(r16)
   221f8:	81000215 	stw	r4,8(r16)
   221fc:	10000b26 	beq	r2,zero,2222c <__swsetup_r+0x88>
   22200:	0005883a 	mov	r2,zero
   22204:	dfc00217 	ldw	ra,8(sp)
   22208:	dc400117 	ldw	r17,4(sp)
   2220c:	dc000017 	ldw	r16,0(sp)
   22210:	dec00304 	addi	sp,sp,12
   22214:	f800283a 	ret
   22218:	81000517 	ldw	r4,20(r16)
   2221c:	80000215 	stw	zero,8(r16)
   22220:	0109c83a 	sub	r4,zero,r4
   22224:	81000615 	stw	r4,24(r16)
   22228:	103ff51e 	bne	r2,zero,22200 <__swsetup_r+0x5c>
   2222c:	1900200c 	andi	r4,r3,128
   22230:	203ff426 	beq	r4,zero,22204 <__swsetup_r+0x60>
   22234:	18c01014 	ori	r3,r3,64
   22238:	80c0030d 	sth	r3,12(r16)
   2223c:	00bfffc4 	movi	r2,-1
   22240:	003ff006 	br	22204 <__swsetup_r+0x60>
   22244:	1009883a 	mov	r4,r2
   22248:	002076c0 	call	2076c <__sinit>
   2224c:	80c0030b 	ldhu	r3,12(r16)
   22250:	1880020c 	andi	r2,r3,8
   22254:	103fe11e 	bne	r2,zero,221dc <__swsetup_r+0x38>
   22258:	1880040c 	andi	r2,r3,16
   2225c:	10002026 	beq	r2,zero,222e0 <__swsetup_r+0x13c>
   22260:	1880010c 	andi	r2,r3,4
   22264:	1000101e 	bne	r2,zero,222a8 <__swsetup_r+0x104>
   22268:	80800417 	ldw	r2,16(r16)
   2226c:	19000214 	ori	r4,r3,8
   22270:	8100030d 	sth	r4,12(r16)
   22274:	2007883a 	mov	r3,r4
   22278:	103fda1e 	bne	r2,zero,221e4 <__swsetup_r+0x40>
   2227c:	1900a00c 	andi	r4,r3,640
   22280:	21008020 	cmpeqi	r4,r4,512
   22284:	203fd71e 	bne	r4,zero,221e4 <__swsetup_r+0x40>
   22288:	800b883a 	mov	r5,r16
   2228c:	8809883a 	mov	r4,r17
   22290:	0022bcc0 	call	22bcc <__smakebuf_r>
   22294:	80c0030b 	ldhu	r3,12(r16)
   22298:	80800417 	ldw	r2,16(r16)
   2229c:	003fd106 	br	221e4 <__swsetup_r+0x40>
   222a0:	0009883a 	mov	r4,zero
   222a4:	003fd406 	br	221f8 <__swsetup_r+0x54>
   222a8:	81400c17 	ldw	r5,48(r16)
   222ac:	28000626 	beq	r5,zero,222c8 <__swsetup_r+0x124>
   222b0:	80801004 	addi	r2,r16,64
   222b4:	28800326 	beq	r5,r2,222c4 <__swsetup_r+0x120>
   222b8:	8809883a 	mov	r4,r17
   222bc:	00228600 	call	22860 <_free_r>
   222c0:	80c0030b 	ldhu	r3,12(r16)
   222c4:	80000c15 	stw	zero,48(r16)
   222c8:	80800417 	ldw	r2,16(r16)
   222cc:	013ff6c4 	movi	r4,-37
   222d0:	20c6703a 	and	r3,r4,r3
   222d4:	80000115 	stw	zero,4(r16)
   222d8:	80800015 	stw	r2,0(r16)
   222dc:	003fe306 	br	2226c <__swsetup_r+0xc8>
   222e0:	00800244 	movi	r2,9
   222e4:	88800015 	stw	r2,0(r17)
   222e8:	18c01014 	ori	r3,r3,64
   222ec:	003fd206 	br	22238 <__swsetup_r+0x94>

000222f0 <_close_r>:
   222f0:	defffe04 	addi	sp,sp,-8
   222f4:	dc000015 	stw	r16,0(sp)
   222f8:	008000b4 	movhi	r2,2
   222fc:	2021883a 	mov	r16,r4
   22300:	2809883a 	mov	r4,r5
   22304:	dfc00115 	stw	ra,4(sp)
   22308:	1019f915 	stw	zero,26596(r2)
   2230c:	002312c0 	call	2312c <close>
   22310:	10ffffd8 	cmpnei	r3,r2,-1
   22314:	18000426 	beq	r3,zero,22328 <_close_r+0x38>
   22318:	dfc00117 	ldw	ra,4(sp)
   2231c:	dc000017 	ldw	r16,0(sp)
   22320:	dec00204 	addi	sp,sp,8
   22324:	f800283a 	ret
   22328:	00c000b4 	movhi	r3,2
   2232c:	18d9f917 	ldw	r3,26596(r3)
   22330:	183ff926 	beq	r3,zero,22318 <_close_r+0x28>
   22334:	80c00015 	stw	r3,0(r16)
   22338:	dfc00117 	ldw	ra,4(sp)
   2233c:	dc000017 	ldw	r16,0(sp)
   22340:	dec00204 	addi	sp,sp,8
   22344:	f800283a 	ret

00022348 <_fclose_r>:
   22348:	defffc04 	addi	sp,sp,-16
   2234c:	dfc00315 	stw	ra,12(sp)
   22350:	dc800215 	stw	r18,8(sp)
   22354:	dc400115 	stw	r17,4(sp)
   22358:	dc000015 	stw	r16,0(sp)
   2235c:	28000726 	beq	r5,zero,2237c <_fclose_r+0x34>
   22360:	2821883a 	mov	r16,r5
   22364:	2023883a 	mov	r17,r4
   22368:	20000226 	beq	r4,zero,22374 <_fclose_r+0x2c>
   2236c:	20800e17 	ldw	r2,56(r4)
   22370:	10002726 	beq	r2,zero,22410 <_fclose_r+0xc8>
   22374:	8080030f 	ldh	r2,12(r16)
   22378:	1000081e 	bne	r2,zero,2239c <_fclose_r+0x54>
   2237c:	0025883a 	mov	r18,zero
   22380:	9005883a 	mov	r2,r18
   22384:	dfc00317 	ldw	ra,12(sp)
   22388:	dc800217 	ldw	r18,8(sp)
   2238c:	dc400117 	ldw	r17,4(sp)
   22390:	dc000017 	ldw	r16,0(sp)
   22394:	dec00404 	addi	sp,sp,16
   22398:	f800283a 	ret
   2239c:	800b883a 	mov	r5,r16
   223a0:	8809883a 	mov	r4,r17
   223a4:	00224500 	call	22450 <__sflush_r>
   223a8:	80c00b17 	ldw	r3,44(r16)
   223ac:	1025883a 	mov	r18,r2
   223b0:	18000426 	beq	r3,zero,223c4 <_fclose_r+0x7c>
   223b4:	81400717 	ldw	r5,28(r16)
   223b8:	8809883a 	mov	r4,r17
   223bc:	183ee83a 	callr	r3
   223c0:	10001716 	blt	r2,zero,22420 <_fclose_r+0xd8>
   223c4:	8080030b 	ldhu	r2,12(r16)
   223c8:	1080200c 	andi	r2,r2,128
   223cc:	1000181e 	bne	r2,zero,22430 <_fclose_r+0xe8>
   223d0:	81400c17 	ldw	r5,48(r16)
   223d4:	28000526 	beq	r5,zero,223ec <_fclose_r+0xa4>
   223d8:	80801004 	addi	r2,r16,64
   223dc:	28800226 	beq	r5,r2,223e8 <_fclose_r+0xa0>
   223e0:	8809883a 	mov	r4,r17
   223e4:	00228600 	call	22860 <_free_r>
   223e8:	80000c15 	stw	zero,48(r16)
   223ec:	81401117 	ldw	r5,68(r16)
   223f0:	28000326 	beq	r5,zero,22400 <_fclose_r+0xb8>
   223f4:	8809883a 	mov	r4,r17
   223f8:	00228600 	call	22860 <_free_r>
   223fc:	80001115 	stw	zero,68(r16)
   22400:	002077c0 	call	2077c <__sfp_lock_acquire>
   22404:	8000030d 	sth	zero,12(r16)
   22408:	00207800 	call	20780 <__sfp_lock_release>
   2240c:	003fdc06 	br	22380 <_fclose_r+0x38>
   22410:	002076c0 	call	2076c <__sinit>
   22414:	8080030f 	ldh	r2,12(r16)
   22418:	103fd826 	beq	r2,zero,2237c <_fclose_r+0x34>
   2241c:	003fdf06 	br	2239c <_fclose_r+0x54>
   22420:	8080030b 	ldhu	r2,12(r16)
   22424:	04bfffc4 	movi	r18,-1
   22428:	1080200c 	andi	r2,r2,128
   2242c:	103fe826 	beq	r2,zero,223d0 <_fclose_r+0x88>
   22430:	81400417 	ldw	r5,16(r16)
   22434:	8809883a 	mov	r4,r17
   22438:	00228600 	call	22860 <_free_r>
   2243c:	003fe406 	br	223d0 <_fclose_r+0x88>

00022440 <fclose>:
   22440:	008000b4 	movhi	r2,2
   22444:	200b883a 	mov	r5,r4
   22448:	11173917 	ldw	r4,23780(r2)
   2244c:	00223481 	jmpi	22348 <_fclose_r>

00022450 <__sflush_r>:
   22450:	2880030b 	ldhu	r2,12(r5)
   22454:	defffb04 	addi	sp,sp,-20
   22458:	dcc00315 	stw	r19,12(sp)
   2245c:	dc000015 	stw	r16,0(sp)
   22460:	dfc00415 	stw	ra,16(sp)
   22464:	dc800215 	stw	r18,8(sp)
   22468:	dc400115 	stw	r17,4(sp)
   2246c:	10c0020c 	andi	r3,r2,8
   22470:	2821883a 	mov	r16,r5
   22474:	2027883a 	mov	r19,r4
   22478:	18003c1e 	bne	r3,zero,2256c <__sflush_r+0x11c>
   2247c:	29000117 	ldw	r4,4(r5)
   22480:	10c20014 	ori	r3,r2,2048
   22484:	28c0030d 	sth	r3,12(r5)
   22488:	0100580e 	bge	zero,r4,225ec <__sflush_r+0x19c>
   2248c:	82000a17 	ldw	r8,40(r16)
   22490:	40003426 	beq	r8,zero,22564 <__sflush_r+0x114>
   22494:	9c400017 	ldw	r17,0(r19)
   22498:	1084000c 	andi	r2,r2,4096
   2249c:	98000015 	stw	zero,0(r19)
   224a0:	81400717 	ldw	r5,28(r16)
   224a4:	1000561e 	bne	r2,zero,22600 <__sflush_r+0x1b0>
   224a8:	000d883a 	mov	r6,zero
   224ac:	01c00044 	movi	r7,1
   224b0:	9809883a 	mov	r4,r19
   224b4:	403ee83a 	callr	r8
   224b8:	100d883a 	mov	r6,r2
   224bc:	10bfffd8 	cmpnei	r2,r2,-1
   224c0:	10005b26 	beq	r2,zero,22630 <__sflush_r+0x1e0>
   224c4:	80c0030b 	ldhu	r3,12(r16)
   224c8:	82000a17 	ldw	r8,40(r16)
   224cc:	18c0010c 	andi	r3,r3,4
   224d0:	18000626 	beq	r3,zero,224ec <__sflush_r+0x9c>
   224d4:	80c00117 	ldw	r3,4(r16)
   224d8:	80800c17 	ldw	r2,48(r16)
   224dc:	30cdc83a 	sub	r6,r6,r3
   224e0:	10000226 	beq	r2,zero,224ec <__sflush_r+0x9c>
   224e4:	80800f17 	ldw	r2,60(r16)
   224e8:	308dc83a 	sub	r6,r6,r2
   224ec:	81400717 	ldw	r5,28(r16)
   224f0:	000f883a 	mov	r7,zero
   224f4:	9809883a 	mov	r4,r19
   224f8:	403ee83a 	callr	r8
   224fc:	10ffffd8 	cmpnei	r3,r2,-1
   22500:	1800411e 	bne	r3,zero,22608 <__sflush_r+0x1b8>
   22504:	99400017 	ldw	r5,0(r19)
   22508:	28c007b0 	cmpltui	r3,r5,30
   2250c:	18002c26 	beq	r3,zero,225c0 <__sflush_r+0x170>
   22510:	00f7f034 	movhi	r3,57280
   22514:	18ffff84 	addi	r3,r3,-2
   22518:	1949d83a 	sra	r4,r3,r5
   2251c:	80c0030b 	ldhu	r3,12(r16)
   22520:	2100004c 	andi	r4,r4,1
   22524:	2000271e 	bne	r4,zero,225c4 <__sflush_r+0x174>
   22528:	81000417 	ldw	r4,16(r16)
   2252c:	19bdffcc 	andi	r6,r3,63487
   22530:	8180030d 	sth	r6,12(r16)
   22534:	80000115 	stw	zero,4(r16)
   22538:	81000015 	stw	r4,0(r16)
   2253c:	18c4000c 	andi	r3,r3,4096
   22540:	1800431e 	bne	r3,zero,22650 <__sflush_r+0x200>
   22544:	81400c17 	ldw	r5,48(r16)
   22548:	9c400015 	stw	r17,0(r19)
   2254c:	28000526 	beq	r5,zero,22564 <__sflush_r+0x114>
   22550:	80801004 	addi	r2,r16,64
   22554:	28800226 	beq	r5,r2,22560 <__sflush_r+0x110>
   22558:	9809883a 	mov	r4,r19
   2255c:	00228600 	call	22860 <_free_r>
   22560:	80000c15 	stw	zero,48(r16)
   22564:	0005883a 	mov	r2,zero
   22568:	00001906 	br	225d0 <__sflush_r+0x180>
   2256c:	2c800417 	ldw	r18,16(r5)
   22570:	903ffc26 	beq	r18,zero,22564 <__sflush_r+0x114>
   22574:	2c400017 	ldw	r17,0(r5)
   22578:	108000cc 	andi	r2,r2,3
   2257c:	2c800015 	stw	r18,0(r5)
   22580:	8ca3c83a 	sub	r17,r17,r18
   22584:	10001c1e 	bne	r2,zero,225f8 <__sflush_r+0x1a8>
   22588:	28800517 	ldw	r2,20(r5)
   2258c:	80800215 	stw	r2,8(r16)
   22590:	04400316 	blt	zero,r17,225a0 <__sflush_r+0x150>
   22594:	003ff306 	br	22564 <__sflush_r+0x114>
   22598:	90a5883a 	add	r18,r18,r2
   2259c:	047ff10e 	bge	zero,r17,22564 <__sflush_r+0x114>
   225a0:	80800917 	ldw	r2,36(r16)
   225a4:	81400717 	ldw	r5,28(r16)
   225a8:	880f883a 	mov	r7,r17
   225ac:	900d883a 	mov	r6,r18
   225b0:	9809883a 	mov	r4,r19
   225b4:	103ee83a 	callr	r2
   225b8:	88a3c83a 	sub	r17,r17,r2
   225bc:	00bff616 	blt	zero,r2,22598 <__sflush_r+0x148>
   225c0:	80c0030b 	ldhu	r3,12(r16)
   225c4:	18c01014 	ori	r3,r3,64
   225c8:	80c0030d 	sth	r3,12(r16)
   225cc:	00bfffc4 	movi	r2,-1
   225d0:	dfc00417 	ldw	ra,16(sp)
   225d4:	dcc00317 	ldw	r19,12(sp)
   225d8:	dc800217 	ldw	r18,8(sp)
   225dc:	dc400117 	ldw	r17,4(sp)
   225e0:	dc000017 	ldw	r16,0(sp)
   225e4:	dec00504 	addi	sp,sp,20
   225e8:	f800283a 	ret
   225ec:	29000f17 	ldw	r4,60(r5)
   225f0:	013fa616 	blt	zero,r4,2248c <__sflush_r+0x3c>
   225f4:	003fdb06 	br	22564 <__sflush_r+0x114>
   225f8:	0005883a 	mov	r2,zero
   225fc:	003fe306 	br	2258c <__sflush_r+0x13c>
   22600:	81801417 	ldw	r6,80(r16)
   22604:	003fb106 	br	224cc <__sflush_r+0x7c>
   22608:	80c0030b 	ldhu	r3,12(r16)
   2260c:	81000417 	ldw	r4,16(r16)
   22610:	80000115 	stw	zero,4(r16)
   22614:	197dffcc 	andi	r5,r3,63487
   22618:	8140030d 	sth	r5,12(r16)
   2261c:	81000015 	stw	r4,0(r16)
   22620:	18c4000c 	andi	r3,r3,4096
   22624:	183fc726 	beq	r3,zero,22544 <__sflush_r+0xf4>
   22628:	80801415 	stw	r2,80(r16)
   2262c:	003fc506 	br	22544 <__sflush_r+0xf4>
   22630:	98800017 	ldw	r2,0(r19)
   22634:	103fa326 	beq	r2,zero,224c4 <__sflush_r+0x74>
   22638:	10c00760 	cmpeqi	r3,r2,29
   2263c:	1800021e 	bne	r3,zero,22648 <__sflush_r+0x1f8>
   22640:	10800598 	cmpnei	r2,r2,22
   22644:	103fde1e 	bne	r2,zero,225c0 <__sflush_r+0x170>
   22648:	9c400015 	stw	r17,0(r19)
   2264c:	003fc506 	br	22564 <__sflush_r+0x114>
   22650:	283fbc1e 	bne	r5,zero,22544 <__sflush_r+0xf4>
   22654:	003ff406 	br	22628 <__sflush_r+0x1d8>

00022658 <_fflush_r>:
   22658:	defffd04 	addi	sp,sp,-12
   2265c:	dc000115 	stw	r16,4(sp)
   22660:	dfc00215 	stw	ra,8(sp)
   22664:	2021883a 	mov	r16,r4
   22668:	20000226 	beq	r4,zero,22674 <_fflush_r+0x1c>
   2266c:	20800e17 	ldw	r2,56(r4)
   22670:	10000726 	beq	r2,zero,22690 <_fflush_r+0x38>
   22674:	2880030f 	ldh	r2,12(r5)
   22678:	10000a1e 	bne	r2,zero,226a4 <_fflush_r+0x4c>
   2267c:	0005883a 	mov	r2,zero
   22680:	dfc00217 	ldw	ra,8(sp)
   22684:	dc000117 	ldw	r16,4(sp)
   22688:	dec00304 	addi	sp,sp,12
   2268c:	f800283a 	ret
   22690:	d9400015 	stw	r5,0(sp)
   22694:	002076c0 	call	2076c <__sinit>
   22698:	d9400017 	ldw	r5,0(sp)
   2269c:	2880030f 	ldh	r2,12(r5)
   226a0:	103ff626 	beq	r2,zero,2267c <_fflush_r+0x24>
   226a4:	8009883a 	mov	r4,r16
   226a8:	dfc00217 	ldw	ra,8(sp)
   226ac:	dc000117 	ldw	r16,4(sp)
   226b0:	dec00304 	addi	sp,sp,12
   226b4:	00224501 	jmpi	22450 <__sflush_r>

000226b8 <fflush>:
   226b8:	20001726 	beq	r4,zero,22718 <fflush+0x60>
   226bc:	008000b4 	movhi	r2,2
   226c0:	200b883a 	mov	r5,r4
   226c4:	11173917 	ldw	r4,23780(r2)
   226c8:	20000226 	beq	r4,zero,226d4 <fflush+0x1c>
   226cc:	20800e17 	ldw	r2,56(r4)
   226d0:	10000526 	beq	r2,zero,226e8 <fflush+0x30>
   226d4:	2880030f 	ldh	r2,12(r5)
   226d8:	1000021e 	bne	r2,zero,226e4 <fflush+0x2c>
   226dc:	0005883a 	mov	r2,zero
   226e0:	f800283a 	ret
   226e4:	00224501 	jmpi	22450 <__sflush_r>
   226e8:	defffd04 	addi	sp,sp,-12
   226ec:	d9400115 	stw	r5,4(sp)
   226f0:	d9000015 	stw	r4,0(sp)
   226f4:	dfc00215 	stw	ra,8(sp)
   226f8:	002076c0 	call	2076c <__sinit>
   226fc:	d9400117 	ldw	r5,4(sp)
   22700:	d9000017 	ldw	r4,0(sp)
   22704:	2880030f 	ldh	r2,12(r5)
   22708:	10000826 	beq	r2,zero,2272c <fflush+0x74>
   2270c:	dfc00217 	ldw	ra,8(sp)
   22710:	dec00304 	addi	sp,sp,12
   22714:	00224501 	jmpi	22450 <__sflush_r>
   22718:	008000b4 	movhi	r2,2
   2271c:	11173817 	ldw	r4,23776(r2)
   22720:	014000b4 	movhi	r5,2
   22724:	29499604 	addi	r5,r5,9816
   22728:	0020cf41 	jmpi	20cf4 <_fwalk_reent>
   2272c:	0005883a 	mov	r2,zero
   22730:	dfc00217 	ldw	ra,8(sp)
   22734:	dec00304 	addi	sp,sp,12
   22738:	f800283a 	ret

0002273c <_malloc_trim_r>:
   2273c:	defffa04 	addi	sp,sp,-24
   22740:	dcc00315 	stw	r19,12(sp)
   22744:	04c000b4 	movhi	r19,2
   22748:	dd000415 	stw	r20,16(sp)
   2274c:	dc800215 	stw	r18,8(sp)
   22750:	dc400115 	stw	r17,4(sp)
   22754:	dc000015 	stw	r16,0(sp)
   22758:	2829883a 	mov	r20,r5
   2275c:	dfc00515 	stw	ra,20(sp)
   22760:	9cd59b04 	addi	r19,r19,22124
   22764:	2025883a 	mov	r18,r4
   22768:	002369c0 	call	2369c <__malloc_lock>
   2276c:	98800217 	ldw	r2,8(r19)
   22770:	14400117 	ldw	r17,4(r2)
   22774:	00bfff04 	movi	r2,-4
   22778:	88a2703a 	and	r17,r17,r2
   2277c:	8c03fbc4 	addi	r16,r17,4079
   22780:	8521c83a 	sub	r16,r16,r20
   22784:	8020d33a 	srli	r16,r16,12
   22788:	843fffc4 	addi	r16,r16,-1
   2278c:	8020933a 	slli	r16,r16,12
   22790:	80840008 	cmpgei	r2,r16,4096
   22794:	10000626 	beq	r2,zero,227b0 <_malloc_trim_r+0x74>
   22798:	000b883a 	mov	r5,zero
   2279c:	9009883a 	mov	r4,r18
   227a0:	0021fa80 	call	21fa8 <_sbrk_r>
   227a4:	98c00217 	ldw	r3,8(r19)
   227a8:	1c47883a 	add	r3,r3,r17
   227ac:	10c00b26 	beq	r2,r3,227dc <_malloc_trim_r+0xa0>
   227b0:	9009883a 	mov	r4,r18
   227b4:	00236c00 	call	236c0 <__malloc_unlock>
   227b8:	0005883a 	mov	r2,zero
   227bc:	dfc00517 	ldw	ra,20(sp)
   227c0:	dd000417 	ldw	r20,16(sp)
   227c4:	dcc00317 	ldw	r19,12(sp)
   227c8:	dc800217 	ldw	r18,8(sp)
   227cc:	dc400117 	ldw	r17,4(sp)
   227d0:	dc000017 	ldw	r16,0(sp)
   227d4:	dec00604 	addi	sp,sp,24
   227d8:	f800283a 	ret
   227dc:	040bc83a 	sub	r5,zero,r16
   227e0:	9009883a 	mov	r4,r18
   227e4:	0021fa80 	call	21fa8 <_sbrk_r>
   227e8:	10bfffd8 	cmpnei	r2,r2,-1
   227ec:	10000d26 	beq	r2,zero,22824 <_malloc_trim_r+0xe8>
   227f0:	008000b4 	movhi	r2,2
   227f4:	1099ff17 	ldw	r2,26620(r2)
   227f8:	98c00217 	ldw	r3,8(r19)
   227fc:	8c23c83a 	sub	r17,r17,r16
   22800:	8c400054 	ori	r17,r17,1
   22804:	1405c83a 	sub	r2,r2,r16
   22808:	1c400115 	stw	r17,4(r3)
   2280c:	9009883a 	mov	r4,r18
   22810:	00c000b4 	movhi	r3,2
   22814:	1899ff15 	stw	r2,26620(r3)
   22818:	00236c00 	call	236c0 <__malloc_unlock>
   2281c:	00800044 	movi	r2,1
   22820:	003fe606 	br	227bc <_malloc_trim_r+0x80>
   22824:	000b883a 	mov	r5,zero
   22828:	9009883a 	mov	r4,r18
   2282c:	0021fa80 	call	21fa8 <_sbrk_r>
   22830:	99000217 	ldw	r4,8(r19)
   22834:	1107c83a 	sub	r3,r2,r4
   22838:	19400410 	cmplti	r5,r3,16
   2283c:	283fdc1e 	bne	r5,zero,227b0 <_malloc_trim_r+0x74>
   22840:	014000b4 	movhi	r5,2
   22844:	29573a17 	ldw	r5,23784(r5)
   22848:	18c00054 	ori	r3,r3,1
   2284c:	20c00115 	stw	r3,4(r4)
   22850:	1145c83a 	sub	r2,r2,r5
   22854:	014000b4 	movhi	r5,2
   22858:	2899ff15 	stw	r2,26620(r5)
   2285c:	003fd406 	br	227b0 <_malloc_trim_r+0x74>

00022860 <_free_r>:
   22860:	28005f26 	beq	r5,zero,229e0 <_free_r+0x180>
   22864:	defffd04 	addi	sp,sp,-12
   22868:	dc400115 	stw	r17,4(sp)
   2286c:	dc000015 	stw	r16,0(sp)
   22870:	2023883a 	mov	r17,r4
   22874:	2821883a 	mov	r16,r5
   22878:	dfc00215 	stw	ra,8(sp)
   2287c:	002369c0 	call	2369c <__malloc_lock>
   22880:	81ffff17 	ldw	r7,-4(r16)
   22884:	00bfff84 	movi	r2,-2
   22888:	80fffe04 	addi	r3,r16,-8
   2288c:	3884703a 	and	r2,r7,r2
   22890:	018000b4 	movhi	r6,2
   22894:	1889883a 	add	r4,r3,r2
   22898:	31959b04 	addi	r6,r6,22124
   2289c:	21400117 	ldw	r5,4(r4)
   228a0:	32000217 	ldw	r8,8(r6)
   228a4:	027fff04 	movi	r9,-4
   228a8:	2a4a703a 	and	r5,r5,r9
   228ac:	41006526 	beq	r8,r4,22a44 <_free_r+0x1e4>
   228b0:	21400115 	stw	r5,4(r4)
   228b4:	39c0004c 	andi	r7,r7,1
   228b8:	2151883a 	add	r8,r4,r5
   228bc:	3800281e 	bne	r7,zero,22960 <_free_r+0x100>
   228c0:	82bffe17 	ldw	r10,-8(r16)
   228c4:	42000117 	ldw	r8,4(r8)
   228c8:	01c000b4 	movhi	r7,2
   228cc:	1a87c83a 	sub	r3,r3,r10
   228d0:	1a400217 	ldw	r9,8(r3)
   228d4:	39d59d04 	addi	r7,r7,22132
   228d8:	1285883a 	add	r2,r2,r10
   228dc:	4200004c 	andi	r8,r8,1
   228e0:	49c04d26 	beq	r9,r7,22a18 <_free_r+0x1b8>
   228e4:	1a800317 	ldw	r10,12(r3)
   228e8:	4a800315 	stw	r10,12(r9)
   228ec:	52400215 	stw	r9,8(r10)
   228f0:	40006926 	beq	r8,zero,22a98 <_free_r+0x238>
   228f4:	11400054 	ori	r5,r2,1
   228f8:	19400115 	stw	r5,4(r3)
   228fc:	20800015 	stw	r2,0(r4)
   22900:	11008028 	cmpgeui	r4,r2,512
   22904:	20001e1e 	bne	r4,zero,22980 <_free_r+0x120>
   22908:	1008d0fa 	srli	r4,r2,3
   2290c:	100ad17a 	srli	r5,r2,5
   22910:	31c00117 	ldw	r7,4(r6)
   22914:	20800044 	addi	r2,r4,1
   22918:	100490fa 	slli	r2,r2,3
   2291c:	01000044 	movi	r4,1
   22920:	2148983a 	sll	r4,r4,r5
   22924:	3085883a 	add	r2,r6,r2
   22928:	11400017 	ldw	r5,0(r2)
   2292c:	21c8b03a 	or	r4,r4,r7
   22930:	11fffe04 	addi	r7,r2,-8
   22934:	19c00315 	stw	r7,12(r3)
   22938:	19400215 	stw	r5,8(r3)
   2293c:	31000115 	stw	r4,4(r6)
   22940:	10c00015 	stw	r3,0(r2)
   22944:	28c00315 	stw	r3,12(r5)
   22948:	8809883a 	mov	r4,r17
   2294c:	dfc00217 	ldw	ra,8(sp)
   22950:	dc400117 	ldw	r17,4(sp)
   22954:	dc000017 	ldw	r16,0(sp)
   22958:	dec00304 	addi	sp,sp,12
   2295c:	00236c01 	jmpi	236c0 <__malloc_unlock>
   22960:	41c00117 	ldw	r7,4(r8)
   22964:	39c0004c 	andi	r7,r7,1
   22968:	38001e26 	beq	r7,zero,229e4 <_free_r+0x184>
   2296c:	11400054 	ori	r5,r2,1
   22970:	817fff15 	stw	r5,-4(r16)
   22974:	20800015 	stw	r2,0(r4)
   22978:	11008028 	cmpgeui	r4,r2,512
   2297c:	203fe226 	beq	r4,zero,22908 <_free_r+0xa8>
   22980:	1008d27a 	srli	r4,r2,9
   22984:	21400168 	cmpgeui	r5,r4,5
   22988:	2800451e 	bne	r5,zero,22aa0 <_free_r+0x240>
   2298c:	1008d1ba 	srli	r4,r2,6
   22990:	21c00e44 	addi	r7,r4,57
   22994:	380e90fa 	slli	r7,r7,3
   22998:	21000e04 	addi	r4,r4,56
   2299c:	31cf883a 	add	r7,r6,r7
   229a0:	39400017 	ldw	r5,0(r7)
   229a4:	39fffe04 	addi	r7,r7,-8
   229a8:	39405326 	beq	r7,r5,22af8 <_free_r+0x298>
   229ac:	01bfff04 	movi	r6,-4
   229b0:	00000206 	br	229bc <_free_r+0x15c>
   229b4:	29400217 	ldw	r5,8(r5)
   229b8:	39400326 	beq	r7,r5,229c8 <_free_r+0x168>
   229bc:	29000117 	ldw	r4,4(r5)
   229c0:	2188703a 	and	r4,r4,r6
   229c4:	113ffb36 	bltu	r2,r4,229b4 <_free_r+0x154>
   229c8:	29c00317 	ldw	r7,12(r5)
   229cc:	19c00315 	stw	r7,12(r3)
   229d0:	19400215 	stw	r5,8(r3)
   229d4:	38c00215 	stw	r3,8(r7)
   229d8:	28c00315 	stw	r3,12(r5)
   229dc:	003fda06 	br	22948 <_free_r+0xe8>
   229e0:	f800283a 	ret
   229e4:	01c000b4 	movhi	r7,2
   229e8:	1145883a 	add	r2,r2,r5
   229ec:	39d59d04 	addi	r7,r7,22132
   229f0:	21400217 	ldw	r5,8(r4)
   229f4:	29c03726 	beq	r5,r7,22ad4 <_free_r+0x274>
   229f8:	22000317 	ldw	r8,12(r4)
   229fc:	11c00054 	ori	r7,r2,1
   22a00:	1889883a 	add	r4,r3,r2
   22a04:	2a000315 	stw	r8,12(r5)
   22a08:	41400215 	stw	r5,8(r8)
   22a0c:	19c00115 	stw	r7,4(r3)
   22a10:	20800015 	stw	r2,0(r4)
   22a14:	003fba06 	br	22900 <_free_r+0xa0>
   22a18:	40004f1e 	bne	r8,zero,22b58 <_free_r+0x2f8>
   22a1c:	21800217 	ldw	r6,8(r4)
   22a20:	21000317 	ldw	r4,12(r4)
   22a24:	288b883a 	add	r5,r5,r2
   22a28:	28800054 	ori	r2,r5,1
   22a2c:	31000315 	stw	r4,12(r6)
   22a30:	21800215 	stw	r6,8(r4)
   22a34:	18800115 	stw	r2,4(r3)
   22a38:	1947883a 	add	r3,r3,r5
   22a3c:	19400015 	stw	r5,0(r3)
   22a40:	003fc106 	br	22948 <_free_r+0xe8>
   22a44:	39c0004c 	andi	r7,r7,1
   22a48:	114b883a 	add	r5,r2,r5
   22a4c:	3800071e 	bne	r7,zero,22a6c <_free_r+0x20c>
   22a50:	81fffe17 	ldw	r7,-8(r16)
   22a54:	19c7c83a 	sub	r3,r3,r7
   22a58:	18800317 	ldw	r2,12(r3)
   22a5c:	19000217 	ldw	r4,8(r3)
   22a60:	29cb883a 	add	r5,r5,r7
   22a64:	20800315 	stw	r2,12(r4)
   22a68:	11000215 	stw	r4,8(r2)
   22a6c:	008000b4 	movhi	r2,2
   22a70:	29000054 	ori	r4,r5,1
   22a74:	10973b17 	ldw	r2,23788(r2)
   22a78:	19000115 	stw	r4,4(r3)
   22a7c:	30c00215 	stw	r3,8(r6)
   22a80:	28bfb136 	bltu	r5,r2,22948 <_free_r+0xe8>
   22a84:	008000b4 	movhi	r2,2
   22a88:	1159f817 	ldw	r5,26592(r2)
   22a8c:	8809883a 	mov	r4,r17
   22a90:	002273c0 	call	2273c <_malloc_trim_r>
   22a94:	003fac06 	br	22948 <_free_r+0xe8>
   22a98:	1145883a 	add	r2,r2,r5
   22a9c:	003fd406 	br	229f0 <_free_r+0x190>
   22aa0:	21400568 	cmpgeui	r5,r4,21
   22aa4:	28000726 	beq	r5,zero,22ac4 <_free_r+0x264>
   22aa8:	21401568 	cmpgeui	r5,r4,85
   22aac:	2800191e 	bne	r5,zero,22b14 <_free_r+0x2b4>
   22ab0:	1008d33a 	srli	r4,r2,12
   22ab4:	21c01bc4 	addi	r7,r4,111
   22ab8:	380e90fa 	slli	r7,r7,3
   22abc:	21001b84 	addi	r4,r4,110
   22ac0:	003fb606 	br	2299c <_free_r+0x13c>
   22ac4:	21c01704 	addi	r7,r4,92
   22ac8:	380e90fa 	slli	r7,r7,3
   22acc:	210016c4 	addi	r4,r4,91
   22ad0:	003fb206 	br	2299c <_free_r+0x13c>
   22ad4:	30c00515 	stw	r3,20(r6)
   22ad8:	30c00415 	stw	r3,16(r6)
   22adc:	11000054 	ori	r4,r2,1
   22ae0:	19c00315 	stw	r7,12(r3)
   22ae4:	19c00215 	stw	r7,8(r3)
   22ae8:	19000115 	stw	r4,4(r3)
   22aec:	1887883a 	add	r3,r3,r2
   22af0:	18800015 	stw	r2,0(r3)
   22af4:	003f9406 	br	22948 <_free_r+0xe8>
   22af8:	2009d0ba 	srai	r4,r4,2
   22afc:	00800044 	movi	r2,1
   22b00:	32000117 	ldw	r8,4(r6)
   22b04:	1104983a 	sll	r2,r2,r4
   22b08:	1204b03a 	or	r2,r2,r8
   22b0c:	30800115 	stw	r2,4(r6)
   22b10:	003fae06 	br	229cc <_free_r+0x16c>
   22b14:	21405568 	cmpgeui	r5,r4,341
   22b18:	2800051e 	bne	r5,zero,22b30 <_free_r+0x2d0>
   22b1c:	1008d3fa 	srli	r4,r2,15
   22b20:	21c01e04 	addi	r7,r4,120
   22b24:	380e90fa 	slli	r7,r7,3
   22b28:	21001dc4 	addi	r4,r4,119
   22b2c:	003f9b06 	br	2299c <_free_r+0x13c>
   22b30:	21015568 	cmpgeui	r4,r4,1365
   22b34:	2000051e 	bne	r4,zero,22b4c <_free_r+0x2ec>
   22b38:	1008d4ba 	srli	r4,r2,18
   22b3c:	21c01f44 	addi	r7,r4,125
   22b40:	380e90fa 	slli	r7,r7,3
   22b44:	21001f04 	addi	r4,r4,124
   22b48:	003f9406 	br	2299c <_free_r+0x13c>
   22b4c:	01c0fe04 	movi	r7,1016
   22b50:	01001f84 	movi	r4,126
   22b54:	003f9106 	br	2299c <_free_r+0x13c>
   22b58:	11400054 	ori	r5,r2,1
   22b5c:	19400115 	stw	r5,4(r3)
   22b60:	20800015 	stw	r2,0(r4)
   22b64:	003f7806 	br	22948 <_free_r+0xe8>

00022b68 <_lseek_r>:
   22b68:	2807883a 	mov	r3,r5
   22b6c:	defffe04 	addi	sp,sp,-8
   22b70:	dc000015 	stw	r16,0(sp)
   22b74:	300b883a 	mov	r5,r6
   22b78:	008000b4 	movhi	r2,2
   22b7c:	380d883a 	mov	r6,r7
   22b80:	2021883a 	mov	r16,r4
   22b84:	1809883a 	mov	r4,r3
   22b88:	dfc00115 	stw	ra,4(sp)
   22b8c:	1019f915 	stw	zero,26596(r2)
   22b90:	00235400 	call	23540 <lseek>
   22b94:	10ffffd8 	cmpnei	r3,r2,-1
   22b98:	18000426 	beq	r3,zero,22bac <_lseek_r+0x44>
   22b9c:	dfc00117 	ldw	ra,4(sp)
   22ba0:	dc000017 	ldw	r16,0(sp)
   22ba4:	dec00204 	addi	sp,sp,8
   22ba8:	f800283a 	ret
   22bac:	00c000b4 	movhi	r3,2
   22bb0:	18d9f917 	ldw	r3,26596(r3)
   22bb4:	183ff926 	beq	r3,zero,22b9c <_lseek_r+0x34>
   22bb8:	80c00015 	stw	r3,0(r16)
   22bbc:	dfc00117 	ldw	ra,4(sp)
   22bc0:	dc000017 	ldw	r16,0(sp)
   22bc4:	dec00204 	addi	sp,sp,8
   22bc8:	f800283a 	ret

00022bcc <__smakebuf_r>:
   22bcc:	2880030b 	ldhu	r2,12(r5)
   22bd0:	deffe804 	addi	sp,sp,-96
   22bd4:	dc001215 	stw	r16,72(sp)
   22bd8:	dfc01715 	stw	ra,92(sp)
   22bdc:	dd001615 	stw	r20,88(sp)
   22be0:	dcc01515 	stw	r19,84(sp)
   22be4:	dc801415 	stw	r18,80(sp)
   22be8:	dc401315 	stw	r17,76(sp)
   22bec:	10c0008c 	andi	r3,r2,2
   22bf0:	2821883a 	mov	r16,r5
   22bf4:	18000d26 	beq	r3,zero,22c2c <__smakebuf_r+0x60>
   22bf8:	288010c4 	addi	r2,r5,67
   22bfc:	28800015 	stw	r2,0(r5)
   22c00:	28800415 	stw	r2,16(r5)
   22c04:	00800044 	movi	r2,1
   22c08:	28800515 	stw	r2,20(r5)
   22c0c:	dfc01717 	ldw	ra,92(sp)
   22c10:	dd001617 	ldw	r20,88(sp)
   22c14:	dcc01517 	ldw	r19,84(sp)
   22c18:	dc801417 	ldw	r18,80(sp)
   22c1c:	dc401317 	ldw	r17,76(sp)
   22c20:	dc001217 	ldw	r16,72(sp)
   22c24:	dec01804 	addi	sp,sp,96
   22c28:	f800283a 	ret
   22c2c:	2940038f 	ldh	r5,14(r5)
   22c30:	2023883a 	mov	r17,r4
   22c34:	28002816 	blt	r5,zero,22cd8 <__smakebuf_r+0x10c>
   22c38:	d80d883a 	mov	r6,sp
   22c3c:	0022e5c0 	call	22e5c <_fstat_r>
   22c40:	10002416 	blt	r2,zero,22cd4 <__smakebuf_r+0x108>
   22c44:	d8800117 	ldw	r2,4(sp)
   22c48:	10bc000c 	andi	r2,r2,61440
   22c4c:	10880018 	cmpnei	r2,r2,8192
   22c50:	1000421e 	bne	r2,zero,22d5c <__smakebuf_r+0x190>
   22c54:	8140038f 	ldh	r5,14(r16)
   22c58:	8809883a 	mov	r4,r17
   22c5c:	0022ebc0 	call	22ebc <_isatty_r>
   22c60:	10000826 	beq	r2,zero,22c84 <__smakebuf_r+0xb8>
   22c64:	8080030b 	ldhu	r2,12(r16)
   22c68:	80c010c4 	addi	r3,r16,67
   22c6c:	80c00015 	stw	r3,0(r16)
   22c70:	10800054 	ori	r2,r2,1
   22c74:	8080030d 	sth	r2,12(r16)
   22c78:	00800044 	movi	r2,1
   22c7c:	80c00415 	stw	r3,16(r16)
   22c80:	80800515 	stw	r2,20(r16)
   22c84:	04c00044 	movi	r19,1
   22c88:	05010004 	movi	r20,1024
   22c8c:	04820004 	movi	r18,2048
   22c90:	a00b883a 	mov	r5,r20
   22c94:	8809883a 	mov	r4,r17
   22c98:	0020d9c0 	call	20d9c <_malloc_r>
   22c9c:	10001726 	beq	r2,zero,22cfc <__smakebuf_r+0x130>
   22ca0:	80c0030b 	ldhu	r3,12(r16)
   22ca4:	010000b4 	movhi	r4,2
   22ca8:	21010c04 	addi	r4,r4,1072
   22cac:	89000f15 	stw	r4,60(r17)
   22cb0:	18c02014 	ori	r3,r3,128
   22cb4:	80c0030d 	sth	r3,12(r16)
   22cb8:	80800015 	stw	r2,0(r16)
   22cbc:	80800415 	stw	r2,16(r16)
   22cc0:	85000515 	stw	r20,20(r16)
   22cc4:	98001d1e 	bne	r19,zero,22d3c <__smakebuf_r+0x170>
   22cc8:	90e4b03a 	or	r18,r18,r3
   22ccc:	8480030d 	sth	r18,12(r16)
   22cd0:	003fce06 	br	22c0c <__smakebuf_r+0x40>
   22cd4:	8080030b 	ldhu	r2,12(r16)
   22cd8:	1080200c 	andi	r2,r2,128
   22cdc:	0027883a 	mov	r19,zero
   22ce0:	10001326 	beq	r2,zero,22d30 <__smakebuf_r+0x164>
   22ce4:	05001004 	movi	r20,64
   22ce8:	a00b883a 	mov	r5,r20
   22cec:	8809883a 	mov	r4,r17
   22cf0:	0025883a 	mov	r18,zero
   22cf4:	0020d9c0 	call	20d9c <_malloc_r>
   22cf8:	103fe91e 	bne	r2,zero,22ca0 <__smakebuf_r+0xd4>
   22cfc:	8080030b 	ldhu	r2,12(r16)
   22d00:	10c0800c 	andi	r3,r2,512
   22d04:	183fc11e 	bne	r3,zero,22c0c <__smakebuf_r+0x40>
   22d08:	00ffff04 	movi	r3,-4
   22d0c:	10c4703a 	and	r2,r2,r3
   22d10:	10800094 	ori	r2,r2,2
   22d14:	80c010c4 	addi	r3,r16,67
   22d18:	8080030d 	sth	r2,12(r16)
   22d1c:	00800044 	movi	r2,1
   22d20:	80c00015 	stw	r3,0(r16)
   22d24:	80c00415 	stw	r3,16(r16)
   22d28:	80800515 	stw	r2,20(r16)
   22d2c:	003fb706 	br	22c0c <__smakebuf_r+0x40>
   22d30:	05010004 	movi	r20,1024
   22d34:	0025883a 	mov	r18,zero
   22d38:	003fd506 	br	22c90 <__smakebuf_r+0xc4>
   22d3c:	8140038f 	ldh	r5,14(r16)
   22d40:	8809883a 	mov	r4,r17
   22d44:	0022ebc0 	call	22ebc <_isatty_r>
   22d48:	80c0030b 	ldhu	r3,12(r16)
   22d4c:	103fde26 	beq	r2,zero,22cc8 <__smakebuf_r+0xfc>
   22d50:	18ffff0c 	andi	r3,r3,65532
   22d54:	18c00054 	ori	r3,r3,1
   22d58:	003fdb06 	br	22cc8 <__smakebuf_r+0xfc>
   22d5c:	0027883a 	mov	r19,zero
   22d60:	05010004 	movi	r20,1024
   22d64:	04820004 	movi	r18,2048
   22d68:	003fc906 	br	22c90 <__smakebuf_r+0xc4>

00022d6c <__swhatbuf_r>:
   22d6c:	deffea04 	addi	sp,sp,-88
   22d70:	dc001215 	stw	r16,72(sp)
   22d74:	2821883a 	mov	r16,r5
   22d78:	2940038f 	ldh	r5,14(r5)
   22d7c:	dc801415 	stw	r18,80(sp)
   22d80:	dc401315 	stw	r17,76(sp)
   22d84:	dfc01515 	stw	ra,84(sp)
   22d88:	3023883a 	mov	r17,r6
   22d8c:	3825883a 	mov	r18,r7
   22d90:	28001016 	blt	r5,zero,22dd4 <__swhatbuf_r+0x68>
   22d94:	d80d883a 	mov	r6,sp
   22d98:	0022e5c0 	call	22e5c <_fstat_r>
   22d9c:	10000d16 	blt	r2,zero,22dd4 <__swhatbuf_r+0x68>
   22da0:	d8c00117 	ldw	r3,4(sp)
   22da4:	01010004 	movi	r4,1024
   22da8:	00820004 	movi	r2,2048
   22dac:	18fc000c 	andi	r3,r3,61440
   22db0:	18c80020 	cmpeqi	r3,r3,8192
   22db4:	90c00015 	stw	r3,0(r18)
   22db8:	89000015 	stw	r4,0(r17)
   22dbc:	dfc01517 	ldw	ra,84(sp)
   22dc0:	dc801417 	ldw	r18,80(sp)
   22dc4:	dc401317 	ldw	r17,76(sp)
   22dc8:	dc001217 	ldw	r16,72(sp)
   22dcc:	dec01604 	addi	sp,sp,88
   22dd0:	f800283a 	ret
   22dd4:	8080030b 	ldhu	r2,12(r16)
   22dd8:	0007883a 	mov	r3,zero
   22ddc:	1080200c 	andi	r2,r2,128
   22de0:	10000326 	beq	r2,zero,22df0 <__swhatbuf_r+0x84>
   22de4:	01001004 	movi	r4,64
   22de8:	0005883a 	mov	r2,zero
   22dec:	003ff106 	br	22db4 <__swhatbuf_r+0x48>
   22df0:	01010004 	movi	r4,1024
   22df4:	003fef06 	br	22db4 <__swhatbuf_r+0x48>

00022df8 <_read_r>:
   22df8:	2807883a 	mov	r3,r5
   22dfc:	defffe04 	addi	sp,sp,-8
   22e00:	dc000015 	stw	r16,0(sp)
   22e04:	300b883a 	mov	r5,r6
   22e08:	008000b4 	movhi	r2,2
   22e0c:	380d883a 	mov	r6,r7
   22e10:	2021883a 	mov	r16,r4
   22e14:	1809883a 	mov	r4,r3
   22e18:	dfc00115 	stw	ra,4(sp)
   22e1c:	1019f915 	stw	zero,26596(r2)
   22e20:	00237200 	call	23720 <read>
   22e24:	10ffffd8 	cmpnei	r3,r2,-1
   22e28:	18000426 	beq	r3,zero,22e3c <_read_r+0x44>
   22e2c:	dfc00117 	ldw	ra,4(sp)
   22e30:	dc000017 	ldw	r16,0(sp)
   22e34:	dec00204 	addi	sp,sp,8
   22e38:	f800283a 	ret
   22e3c:	00c000b4 	movhi	r3,2
   22e40:	18d9f917 	ldw	r3,26596(r3)
   22e44:	183ff926 	beq	r3,zero,22e2c <_read_r+0x34>
   22e48:	80c00015 	stw	r3,0(r16)
   22e4c:	dfc00117 	ldw	ra,4(sp)
   22e50:	dc000017 	ldw	r16,0(sp)
   22e54:	dec00204 	addi	sp,sp,8
   22e58:	f800283a 	ret

00022e5c <_fstat_r>:
   22e5c:	2807883a 	mov	r3,r5
   22e60:	defffe04 	addi	sp,sp,-8
   22e64:	dc000015 	stw	r16,0(sp)
   22e68:	008000b4 	movhi	r2,2
   22e6c:	300b883a 	mov	r5,r6
   22e70:	2021883a 	mov	r16,r4
   22e74:	1809883a 	mov	r4,r3
   22e78:	dfc00115 	stw	ra,4(sp)
   22e7c:	1019f915 	stw	zero,26596(r2)
   22e80:	00232700 	call	23270 <fstat>
   22e84:	10ffffd8 	cmpnei	r3,r2,-1
   22e88:	18000426 	beq	r3,zero,22e9c <_fstat_r+0x40>
   22e8c:	dfc00117 	ldw	ra,4(sp)
   22e90:	dc000017 	ldw	r16,0(sp)
   22e94:	dec00204 	addi	sp,sp,8
   22e98:	f800283a 	ret
   22e9c:	00c000b4 	movhi	r3,2
   22ea0:	18d9f917 	ldw	r3,26596(r3)
   22ea4:	183ff926 	beq	r3,zero,22e8c <_fstat_r+0x30>
   22ea8:	80c00015 	stw	r3,0(r16)
   22eac:	dfc00117 	ldw	ra,4(sp)
   22eb0:	dc000017 	ldw	r16,0(sp)
   22eb4:	dec00204 	addi	sp,sp,8
   22eb8:	f800283a 	ret

00022ebc <_isatty_r>:
   22ebc:	defffe04 	addi	sp,sp,-8
   22ec0:	dc000015 	stw	r16,0(sp)
   22ec4:	008000b4 	movhi	r2,2
   22ec8:	2021883a 	mov	r16,r4
   22ecc:	2809883a 	mov	r4,r5
   22ed0:	dfc00115 	stw	ra,4(sp)
   22ed4:	1019f915 	stw	zero,26596(r2)
   22ed8:	00233680 	call	23368 <isatty>
   22edc:	10ffffd8 	cmpnei	r3,r2,-1
   22ee0:	18000426 	beq	r3,zero,22ef4 <_isatty_r+0x38>
   22ee4:	dfc00117 	ldw	ra,4(sp)
   22ee8:	dc000017 	ldw	r16,0(sp)
   22eec:	dec00204 	addi	sp,sp,8
   22ef0:	f800283a 	ret
   22ef4:	00c000b4 	movhi	r3,2
   22ef8:	18d9f917 	ldw	r3,26596(r3)
   22efc:	183ff926 	beq	r3,zero,22ee4 <_isatty_r+0x28>
   22f00:	80c00015 	stw	r3,0(r16)
   22f04:	dfc00117 	ldw	ra,4(sp)
   22f08:	dc000017 	ldw	r16,0(sp)
   22f0c:	dec00204 	addi	sp,sp,8
   22f10:	f800283a 	ret

00022f14 <__divsi3>:
   22f14:	20001a16 	blt	r4,zero,22f80 <__divsi3+0x6c>
   22f18:	000f883a 	mov	r7,zero
   22f1c:	2800020e 	bge	r5,zero,22f28 <__divsi3+0x14>
   22f20:	014bc83a 	sub	r5,zero,r5
   22f24:	39c0005c 	xori	r7,r7,1
   22f28:	200d883a 	mov	r6,r4
   22f2c:	00c00044 	movi	r3,1
   22f30:	2900092e 	bgeu	r5,r4,22f58 <__divsi3+0x44>
   22f34:	00800804 	movi	r2,32
   22f38:	00c00044 	movi	r3,1
   22f3c:	00000106 	br	22f44 <__divsi3+0x30>
   22f40:	10001226 	beq	r2,zero,22f8c <__divsi3+0x78>
   22f44:	294b883a 	add	r5,r5,r5
   22f48:	10bfffc4 	addi	r2,r2,-1
   22f4c:	18c7883a 	add	r3,r3,r3
   22f50:	293ffb36 	bltu	r5,r4,22f40 <__divsi3+0x2c>
   22f54:	18000d26 	beq	r3,zero,22f8c <__divsi3+0x78>
   22f58:	0005883a 	mov	r2,zero
   22f5c:	31400236 	bltu	r6,r5,22f68 <__divsi3+0x54>
   22f60:	314dc83a 	sub	r6,r6,r5
   22f64:	10c4b03a 	or	r2,r2,r3
   22f68:	1806d07a 	srli	r3,r3,1
   22f6c:	280ad07a 	srli	r5,r5,1
   22f70:	183ffa1e 	bne	r3,zero,22f5c <__divsi3+0x48>
   22f74:	38000126 	beq	r7,zero,22f7c <__divsi3+0x68>
   22f78:	0085c83a 	sub	r2,zero,r2
   22f7c:	f800283a 	ret
   22f80:	0109c83a 	sub	r4,zero,r4
   22f84:	01c00044 	movi	r7,1
   22f88:	003fe406 	br	22f1c <__divsi3+0x8>
   22f8c:	0005883a 	mov	r2,zero
   22f90:	003ff806 	br	22f74 <__divsi3+0x60>

00022f94 <__modsi3>:
   22f94:	20001716 	blt	r4,zero,22ff4 <__modsi3+0x60>
   22f98:	000f883a 	mov	r7,zero
   22f9c:	2005883a 	mov	r2,r4
   22fa0:	2800010e 	bge	r5,zero,22fa8 <__modsi3+0x14>
   22fa4:	014bc83a 	sub	r5,zero,r5
   22fa8:	00c00044 	movi	r3,1
   22fac:	2900092e 	bgeu	r5,r4,22fd4 <__modsi3+0x40>
   22fb0:	01800804 	movi	r6,32
   22fb4:	00c00044 	movi	r3,1
   22fb8:	00000106 	br	22fc0 <__modsi3+0x2c>
   22fbc:	30001026 	beq	r6,zero,23000 <__modsi3+0x6c>
   22fc0:	294b883a 	add	r5,r5,r5
   22fc4:	31bfffc4 	addi	r6,r6,-1
   22fc8:	18c7883a 	add	r3,r3,r3
   22fcc:	293ffb36 	bltu	r5,r4,22fbc <__modsi3+0x28>
   22fd0:	18000b26 	beq	r3,zero,23000 <__modsi3+0x6c>
   22fd4:	1806d07a 	srli	r3,r3,1
   22fd8:	11400136 	bltu	r2,r5,22fe0 <__modsi3+0x4c>
   22fdc:	1145c83a 	sub	r2,r2,r5
   22fe0:	280ad07a 	srli	r5,r5,1
   22fe4:	183ffb1e 	bne	r3,zero,22fd4 <__modsi3+0x40>
   22fe8:	38000126 	beq	r7,zero,22ff0 <__modsi3+0x5c>
   22fec:	0085c83a 	sub	r2,zero,r2
   22ff0:	f800283a 	ret
   22ff4:	0109c83a 	sub	r4,zero,r4
   22ff8:	01c00044 	movi	r7,1
   22ffc:	003fe706 	br	22f9c <__modsi3+0x8>
   23000:	2005883a 	mov	r2,r4
   23004:	003ff806 	br	22fe8 <__modsi3+0x54>

00023008 <__udivsi3>:
   23008:	200d883a 	mov	r6,r4
   2300c:	2900152e 	bgeu	r5,r4,23064 <__udivsi3+0x5c>
   23010:	28001416 	blt	r5,zero,23064 <__udivsi3+0x5c>
   23014:	00800804 	movi	r2,32
   23018:	00c00044 	movi	r3,1
   2301c:	00000206 	br	23028 <__udivsi3+0x20>
   23020:	10000e26 	beq	r2,zero,2305c <__udivsi3+0x54>
   23024:	28000416 	blt	r5,zero,23038 <__udivsi3+0x30>
   23028:	294b883a 	add	r5,r5,r5
   2302c:	10bfffc4 	addi	r2,r2,-1
   23030:	18c7883a 	add	r3,r3,r3
   23034:	293ffa36 	bltu	r5,r4,23020 <__udivsi3+0x18>
   23038:	18000826 	beq	r3,zero,2305c <__udivsi3+0x54>
   2303c:	0005883a 	mov	r2,zero
   23040:	31400236 	bltu	r6,r5,2304c <__udivsi3+0x44>
   23044:	314dc83a 	sub	r6,r6,r5
   23048:	10c4b03a 	or	r2,r2,r3
   2304c:	1806d07a 	srli	r3,r3,1
   23050:	280ad07a 	srli	r5,r5,1
   23054:	183ffa1e 	bne	r3,zero,23040 <__udivsi3+0x38>
   23058:	f800283a 	ret
   2305c:	0005883a 	mov	r2,zero
   23060:	f800283a 	ret
   23064:	00c00044 	movi	r3,1
   23068:	003ff406 	br	2303c <__udivsi3+0x34>

0002306c <__umodsi3>:
   2306c:	2005883a 	mov	r2,r4
   23070:	2900132e 	bgeu	r5,r4,230c0 <__umodsi3+0x54>
   23074:	28001216 	blt	r5,zero,230c0 <__umodsi3+0x54>
   23078:	01800804 	movi	r6,32
   2307c:	00c00044 	movi	r3,1
   23080:	00000206 	br	2308c <__umodsi3+0x20>
   23084:	30000c26 	beq	r6,zero,230b8 <__umodsi3+0x4c>
   23088:	28000416 	blt	r5,zero,2309c <__umodsi3+0x30>
   2308c:	294b883a 	add	r5,r5,r5
   23090:	31bfffc4 	addi	r6,r6,-1
   23094:	18c7883a 	add	r3,r3,r3
   23098:	293ffa36 	bltu	r5,r4,23084 <__umodsi3+0x18>
   2309c:	18000626 	beq	r3,zero,230b8 <__umodsi3+0x4c>
   230a0:	1806d07a 	srli	r3,r3,1
   230a4:	11400136 	bltu	r2,r5,230ac <__umodsi3+0x40>
   230a8:	1145c83a 	sub	r2,r2,r5
   230ac:	280ad07a 	srli	r5,r5,1
   230b0:	183ffb1e 	bne	r3,zero,230a0 <__umodsi3+0x34>
   230b4:	f800283a 	ret
   230b8:	2005883a 	mov	r2,r4
   230bc:	f800283a 	ret
   230c0:	00c00044 	movi	r3,1
   230c4:	003ff606 	br	230a0 <__umodsi3+0x34>

000230c8 <__mulsi3>:
   230c8:	0005883a 	mov	r2,zero
   230cc:	20000726 	beq	r4,zero,230ec <__mulsi3+0x24>
   230d0:	20c0004c 	andi	r3,r4,1
   230d4:	2008d07a 	srli	r4,r4,1
   230d8:	18000126 	beq	r3,zero,230e0 <__mulsi3+0x18>
   230dc:	1145883a 	add	r2,r2,r5
   230e0:	294b883a 	add	r5,r5,r5
   230e4:	203ffa1e 	bne	r4,zero,230d0 <__mulsi3+0x8>
   230e8:	f800283a 	ret
   230ec:	f800283a 	ret

000230f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   230f0:	defffe04 	addi	sp,sp,-8
   230f4:	dfc00115 	stw	ra,4(sp)
   230f8:	df000015 	stw	fp,0(sp)
   230fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23100:	d0a00917 	ldw	r2,-32732(gp)
   23104:	10000326 	beq	r2,zero,23114 <alt_get_errno+0x24>
   23108:	d0a00917 	ldw	r2,-32732(gp)
   2310c:	103ee83a 	callr	r2
   23110:	00000106 	br	23118 <alt_get_errno+0x28>
   23114:	d0a2c104 	addi	r2,gp,-29948
}
   23118:	e037883a 	mov	sp,fp
   2311c:	dfc00117 	ldw	ra,4(sp)
   23120:	df000017 	ldw	fp,0(sp)
   23124:	dec00204 	addi	sp,sp,8
   23128:	f800283a 	ret

0002312c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2312c:	defffb04 	addi	sp,sp,-20
   23130:	dfc00415 	stw	ra,16(sp)
   23134:	df000315 	stw	fp,12(sp)
   23138:	df000304 	addi	fp,sp,12
   2313c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   23140:	e0bffd17 	ldw	r2,-12(fp)
   23144:	10000916 	blt	r2,zero,2316c <close+0x40>
   23148:	e0fffd17 	ldw	r3,-12(fp)
   2314c:	1805883a 	mov	r2,r3
   23150:	1085883a 	add	r2,r2,r2
   23154:	10c5883a 	add	r2,r2,r3
   23158:	100490ba 	slli	r2,r2,2
   2315c:	00c000b4 	movhi	r3,2
   23160:	18d6a704 	addi	r3,r3,23196
   23164:	10c5883a 	add	r2,r2,r3
   23168:	00000106 	br	23170 <close+0x44>
   2316c:	0005883a 	mov	r2,zero
   23170:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   23174:	e0bfff17 	ldw	r2,-4(fp)
   23178:	10001926 	beq	r2,zero,231e0 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2317c:	e0bfff17 	ldw	r2,-4(fp)
   23180:	10800017 	ldw	r2,0(r2)
   23184:	10800417 	ldw	r2,16(r2)
   23188:	10000626 	beq	r2,zero,231a4 <close+0x78>
   2318c:	e0bfff17 	ldw	r2,-4(fp)
   23190:	10800017 	ldw	r2,0(r2)
   23194:	10800417 	ldw	r2,16(r2)
   23198:	e13fff17 	ldw	r4,-4(fp)
   2319c:	103ee83a 	callr	r2
   231a0:	00000106 	br	231a8 <close+0x7c>
   231a4:	0005883a 	mov	r2,zero
   231a8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   231ac:	e13ffd17 	ldw	r4,-12(fp)
   231b0:	00238280 	call	23828 <alt_release_fd>
    if (rval < 0)
   231b4:	e0bffe17 	ldw	r2,-8(fp)
   231b8:	1000070e 	bge	r2,zero,231d8 <close+0xac>
    {
      ALT_ERRNO = -rval;
   231bc:	00230f00 	call	230f0 <alt_get_errno>
   231c0:	1007883a 	mov	r3,r2
   231c4:	e0bffe17 	ldw	r2,-8(fp)
   231c8:	0085c83a 	sub	r2,zero,r2
   231cc:	18800015 	stw	r2,0(r3)
      return -1;
   231d0:	00bfffc4 	movi	r2,-1
   231d4:	00000706 	br	231f4 <close+0xc8>
    }
    return 0;
   231d8:	0005883a 	mov	r2,zero
   231dc:	00000506 	br	231f4 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   231e0:	00230f00 	call	230f0 <alt_get_errno>
   231e4:	1007883a 	mov	r3,r2
   231e8:	00801444 	movi	r2,81
   231ec:	18800015 	stw	r2,0(r3)
    return -1;
   231f0:	00bfffc4 	movi	r2,-1
  }
}
   231f4:	e037883a 	mov	sp,fp
   231f8:	dfc00117 	ldw	ra,4(sp)
   231fc:	df000017 	ldw	fp,0(sp)
   23200:	dec00204 	addi	sp,sp,8
   23204:	f800283a 	ret

00023208 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   23208:	defffc04 	addi	sp,sp,-16
   2320c:	df000315 	stw	fp,12(sp)
   23210:	df000304 	addi	fp,sp,12
   23214:	e13fff15 	stw	r4,-4(fp)
   23218:	e17ffe15 	stw	r5,-8(fp)
   2321c:	e1bffd15 	stw	r6,-12(fp)
  return len;
   23220:	e0bffd17 	ldw	r2,-12(fp)
}
   23224:	e037883a 	mov	sp,fp
   23228:	df000017 	ldw	fp,0(sp)
   2322c:	dec00104 	addi	sp,sp,4
   23230:	f800283a 	ret

00023234 <alt_get_errno>:
{
   23234:	defffe04 	addi	sp,sp,-8
   23238:	dfc00115 	stw	ra,4(sp)
   2323c:	df000015 	stw	fp,0(sp)
   23240:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23244:	d0a00917 	ldw	r2,-32732(gp)
   23248:	10000326 	beq	r2,zero,23258 <alt_get_errno+0x24>
   2324c:	d0a00917 	ldw	r2,-32732(gp)
   23250:	103ee83a 	callr	r2
   23254:	00000106 	br	2325c <alt_get_errno+0x28>
   23258:	d0a2c104 	addi	r2,gp,-29948
}
   2325c:	e037883a 	mov	sp,fp
   23260:	dfc00117 	ldw	ra,4(sp)
   23264:	df000017 	ldw	fp,0(sp)
   23268:	dec00204 	addi	sp,sp,8
   2326c:	f800283a 	ret

00023270 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   23270:	defffb04 	addi	sp,sp,-20
   23274:	dfc00415 	stw	ra,16(sp)
   23278:	df000315 	stw	fp,12(sp)
   2327c:	df000304 	addi	fp,sp,12
   23280:	e13ffe15 	stw	r4,-8(fp)
   23284:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23288:	e0bffe17 	ldw	r2,-8(fp)
   2328c:	10000916 	blt	r2,zero,232b4 <fstat+0x44>
   23290:	e0fffe17 	ldw	r3,-8(fp)
   23294:	1805883a 	mov	r2,r3
   23298:	1085883a 	add	r2,r2,r2
   2329c:	10c5883a 	add	r2,r2,r3
   232a0:	100490ba 	slli	r2,r2,2
   232a4:	00c000b4 	movhi	r3,2
   232a8:	18d6a704 	addi	r3,r3,23196
   232ac:	10c5883a 	add	r2,r2,r3
   232b0:	00000106 	br	232b8 <fstat+0x48>
   232b4:	0005883a 	mov	r2,zero
   232b8:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   232bc:	e0bfff17 	ldw	r2,-4(fp)
   232c0:	10001026 	beq	r2,zero,23304 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   232c4:	e0bfff17 	ldw	r2,-4(fp)
   232c8:	10800017 	ldw	r2,0(r2)
   232cc:	10800817 	ldw	r2,32(r2)
   232d0:	10000726 	beq	r2,zero,232f0 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
   232d4:	e0bfff17 	ldw	r2,-4(fp)
   232d8:	10800017 	ldw	r2,0(r2)
   232dc:	10800817 	ldw	r2,32(r2)
   232e0:	e17ffd17 	ldw	r5,-12(fp)
   232e4:	e13fff17 	ldw	r4,-4(fp)
   232e8:	103ee83a 	callr	r2
   232ec:	00000a06 	br	23318 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   232f0:	e0bffd17 	ldw	r2,-12(fp)
   232f4:	00c80004 	movi	r3,8192
   232f8:	10c00115 	stw	r3,4(r2)
      return 0;
   232fc:	0005883a 	mov	r2,zero
   23300:	00000506 	br	23318 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23304:	00232340 	call	23234 <alt_get_errno>
   23308:	1007883a 	mov	r3,r2
   2330c:	00801444 	movi	r2,81
   23310:	18800015 	stw	r2,0(r3)
    return -1;
   23314:	00bfffc4 	movi	r2,-1
  }
}
   23318:	e037883a 	mov	sp,fp
   2331c:	dfc00117 	ldw	ra,4(sp)
   23320:	df000017 	ldw	fp,0(sp)
   23324:	dec00204 	addi	sp,sp,8
   23328:	f800283a 	ret

0002332c <alt_get_errno>:
{
   2332c:	defffe04 	addi	sp,sp,-8
   23330:	dfc00115 	stw	ra,4(sp)
   23334:	df000015 	stw	fp,0(sp)
   23338:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2333c:	d0a00917 	ldw	r2,-32732(gp)
   23340:	10000326 	beq	r2,zero,23350 <alt_get_errno+0x24>
   23344:	d0a00917 	ldw	r2,-32732(gp)
   23348:	103ee83a 	callr	r2
   2334c:	00000106 	br	23354 <alt_get_errno+0x28>
   23350:	d0a2c104 	addi	r2,gp,-29948
}
   23354:	e037883a 	mov	sp,fp
   23358:	dfc00117 	ldw	ra,4(sp)
   2335c:	df000017 	ldw	fp,0(sp)
   23360:	dec00204 	addi	sp,sp,8
   23364:	f800283a 	ret

00023368 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   23368:	deffea04 	addi	sp,sp,-88
   2336c:	dfc01515 	stw	ra,84(sp)
   23370:	df001415 	stw	fp,80(sp)
   23374:	df001404 	addi	fp,sp,80
   23378:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2337c:	e0bfec17 	ldw	r2,-80(fp)
   23380:	10000916 	blt	r2,zero,233a8 <isatty+0x40>
   23384:	e0ffec17 	ldw	r3,-80(fp)
   23388:	1805883a 	mov	r2,r3
   2338c:	1085883a 	add	r2,r2,r2
   23390:	10c5883a 	add	r2,r2,r3
   23394:	100490ba 	slli	r2,r2,2
   23398:	00c000b4 	movhi	r3,2
   2339c:	18d6a704 	addi	r3,r3,23196
   233a0:	10c5883a 	add	r2,r2,r3
   233a4:	00000106 	br	233ac <isatty+0x44>
   233a8:	0005883a 	mov	r2,zero
   233ac:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   233b0:	e0bfff17 	ldw	r2,-4(fp)
   233b4:	10000e26 	beq	r2,zero,233f0 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   233b8:	e0bfff17 	ldw	r2,-4(fp)
   233bc:	10800017 	ldw	r2,0(r2)
   233c0:	10800817 	ldw	r2,32(r2)
   233c4:	1000021e 	bne	r2,zero,233d0 <isatty+0x68>
    {
      return 1;
   233c8:	00800044 	movi	r2,1
   233cc:	00000d06 	br	23404 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   233d0:	e0bfed04 	addi	r2,fp,-76
   233d4:	100b883a 	mov	r5,r2
   233d8:	e13fec17 	ldw	r4,-80(fp)
   233dc:	00232700 	call	23270 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   233e0:	e0bfee17 	ldw	r2,-72(fp)
   233e4:	10880020 	cmpeqi	r2,r2,8192
   233e8:	10803fcc 	andi	r2,r2,255
   233ec:	00000506 	br	23404 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   233f0:	002332c0 	call	2332c <alt_get_errno>
   233f4:	1007883a 	mov	r3,r2
   233f8:	00801444 	movi	r2,81
   233fc:	18800015 	stw	r2,0(r3)
    return 0;
   23400:	0005883a 	mov	r2,zero
  }
}
   23404:	e037883a 	mov	sp,fp
   23408:	dfc00117 	ldw	ra,4(sp)
   2340c:	df000017 	ldw	fp,0(sp)
   23410:	dec00204 	addi	sp,sp,8
   23414:	f800283a 	ret

00023418 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   23418:	defffc04 	addi	sp,sp,-16
   2341c:	df000315 	stw	fp,12(sp)
   23420:	df000304 	addi	fp,sp,12
   23424:	e13fff15 	stw	r4,-4(fp)
   23428:	e17ffe15 	stw	r5,-8(fp)
   2342c:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   23430:	e0fffe17 	ldw	r3,-8(fp)
   23434:	e0bfff17 	ldw	r2,-4(fp)
   23438:	18800c26 	beq	r3,r2,2346c <alt_load_section+0x54>
  {
    while( to != end )
   2343c:	00000806 	br	23460 <alt_load_section+0x48>
    {
      *to++ = *from++;
   23440:	e0ffff17 	ldw	r3,-4(fp)
   23444:	18800104 	addi	r2,r3,4
   23448:	e0bfff15 	stw	r2,-4(fp)
   2344c:	e0bffe17 	ldw	r2,-8(fp)
   23450:	11000104 	addi	r4,r2,4
   23454:	e13ffe15 	stw	r4,-8(fp)
   23458:	18c00017 	ldw	r3,0(r3)
   2345c:	10c00015 	stw	r3,0(r2)
    while( to != end )
   23460:	e0fffe17 	ldw	r3,-8(fp)
   23464:	e0bffd17 	ldw	r2,-12(fp)
   23468:	18bff51e 	bne	r3,r2,23440 <alt_load_section+0x28>
    }
  }
}
   2346c:	0001883a 	nop
   23470:	e037883a 	mov	sp,fp
   23474:	df000017 	ldw	fp,0(sp)
   23478:	dec00104 	addi	sp,sp,4
   2347c:	f800283a 	ret

00023480 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   23480:	defffe04 	addi	sp,sp,-8
   23484:	dfc00115 	stw	ra,4(sp)
   23488:	df000015 	stw	fp,0(sp)
   2348c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   23490:	018000b4 	movhi	r6,2
   23494:	31974404 	addi	r6,r6,23824
   23498:	014000b4 	movhi	r5,2
   2349c:	29549204 	addi	r5,r5,21064
   234a0:	010000b4 	movhi	r4,2
   234a4:	21174404 	addi	r4,r4,23824
   234a8:	00234180 	call	23418 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   234ac:	018000b4 	movhi	r6,2
   234b0:	31808904 	addi	r6,r6,548
   234b4:	014000b4 	movhi	r5,2
   234b8:	29400804 	addi	r5,r5,32
   234bc:	010000b4 	movhi	r4,2
   234c0:	21000804 	addi	r4,r4,32
   234c4:	00234180 	call	23418 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   234c8:	018000b4 	movhi	r6,2
   234cc:	31949204 	addi	r6,r6,21064
   234d0:	014000b4 	movhi	r5,2
   234d4:	29548304 	addi	r5,r5,21004
   234d8:	010000b4 	movhi	r4,2
   234dc:	21148304 	addi	r4,r4,21004
   234e0:	00234180 	call	23418 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   234e4:	002442c0 	call	2442c <alt_dcache_flush_all>
  alt_icache_flush_all();
   234e8:	00245f80 	call	245f8 <alt_icache_flush_all>
}
   234ec:	0001883a 	nop
   234f0:	e037883a 	mov	sp,fp
   234f4:	dfc00117 	ldw	ra,4(sp)
   234f8:	df000017 	ldw	fp,0(sp)
   234fc:	dec00204 	addi	sp,sp,8
   23500:	f800283a 	ret

00023504 <alt_get_errno>:
{
   23504:	defffe04 	addi	sp,sp,-8
   23508:	dfc00115 	stw	ra,4(sp)
   2350c:	df000015 	stw	fp,0(sp)
   23510:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23514:	d0a00917 	ldw	r2,-32732(gp)
   23518:	10000326 	beq	r2,zero,23528 <alt_get_errno+0x24>
   2351c:	d0a00917 	ldw	r2,-32732(gp)
   23520:	103ee83a 	callr	r2
   23524:	00000106 	br	2352c <alt_get_errno+0x28>
   23528:	d0a2c104 	addi	r2,gp,-29948
}
   2352c:	e037883a 	mov	sp,fp
   23530:	dfc00117 	ldw	ra,4(sp)
   23534:	df000017 	ldw	fp,0(sp)
   23538:	dec00204 	addi	sp,sp,8
   2353c:	f800283a 	ret

00023540 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   23540:	defff904 	addi	sp,sp,-28
   23544:	dfc00615 	stw	ra,24(sp)
   23548:	df000515 	stw	fp,20(sp)
   2354c:	df000504 	addi	fp,sp,20
   23550:	e13ffd15 	stw	r4,-12(fp)
   23554:	e17ffc15 	stw	r5,-16(fp)
   23558:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2355c:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23560:	e0bffd17 	ldw	r2,-12(fp)
   23564:	10000916 	blt	r2,zero,2358c <lseek+0x4c>
   23568:	e0fffd17 	ldw	r3,-12(fp)
   2356c:	1805883a 	mov	r2,r3
   23570:	1085883a 	add	r2,r2,r2
   23574:	10c5883a 	add	r2,r2,r3
   23578:	100490ba 	slli	r2,r2,2
   2357c:	00c000b4 	movhi	r3,2
   23580:	18d6a704 	addi	r3,r3,23196
   23584:	10c5883a 	add	r2,r2,r3
   23588:	00000106 	br	23590 <lseek+0x50>
   2358c:	0005883a 	mov	r2,zero
   23590:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
   23594:	e0bffe17 	ldw	r2,-8(fp)
   23598:	10001026 	beq	r2,zero,235dc <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2359c:	e0bffe17 	ldw	r2,-8(fp)
   235a0:	10800017 	ldw	r2,0(r2)
   235a4:	10800717 	ldw	r2,28(r2)
   235a8:	10000926 	beq	r2,zero,235d0 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   235ac:	e0bffe17 	ldw	r2,-8(fp)
   235b0:	10800017 	ldw	r2,0(r2)
   235b4:	10800717 	ldw	r2,28(r2)
   235b8:	e1bffb17 	ldw	r6,-20(fp)
   235bc:	e17ffc17 	ldw	r5,-16(fp)
   235c0:	e13ffe17 	ldw	r4,-8(fp)
   235c4:	103ee83a 	callr	r2
   235c8:	e0bfff15 	stw	r2,-4(fp)
   235cc:	00000506 	br	235e4 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   235d0:	00bfde84 	movi	r2,-134
   235d4:	e0bfff15 	stw	r2,-4(fp)
   235d8:	00000206 	br	235e4 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
   235dc:	00bfebc4 	movi	r2,-81
   235e0:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
   235e4:	e0bfff17 	ldw	r2,-4(fp)
   235e8:	1000070e 	bge	r2,zero,23608 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
   235ec:	00235040 	call	23504 <alt_get_errno>
   235f0:	1007883a 	mov	r3,r2
   235f4:	e0bfff17 	ldw	r2,-4(fp)
   235f8:	0085c83a 	sub	r2,zero,r2
   235fc:	18800015 	stw	r2,0(r3)
    rc = -1;
   23600:	00bfffc4 	movi	r2,-1
   23604:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
   23608:	e0bfff17 	ldw	r2,-4(fp)
}
   2360c:	e037883a 	mov	sp,fp
   23610:	dfc00117 	ldw	ra,4(sp)
   23614:	df000017 	ldw	fp,0(sp)
   23618:	dec00204 	addi	sp,sp,8
   2361c:	f800283a 	ret

00023620 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   23620:	defffd04 	addi	sp,sp,-12
   23624:	dfc00215 	stw	ra,8(sp)
   23628:	df000115 	stw	fp,4(sp)
   2362c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   23630:	0009883a 	mov	r4,zero
   23634:	0023ac40 	call	23ac4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   23638:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2363c:	0023b000 	call	23b00 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   23640:	018000b4 	movhi	r6,2
   23644:	31948c04 	addi	r6,r6,21040
   23648:	014000b4 	movhi	r5,2
   2364c:	29548c04 	addi	r5,r5,21040
   23650:	010000b4 	movhi	r4,2
   23654:	21148c04 	addi	r4,r4,21040
   23658:	00249840 	call	24984 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2365c:	00245300 	call	24530 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   23660:	010000b4 	movhi	r4,2
   23664:	21116504 	addi	r4,r4,17812
   23668:	0024f600 	call	24f60 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2366c:	d0a2c217 	ldw	r2,-29944(gp)
   23670:	d0e2c317 	ldw	r3,-29940(gp)
   23674:	d122c417 	ldw	r4,-29936(gp)
   23678:	200d883a 	mov	r6,r4
   2367c:	180b883a 	mov	r5,r3
   23680:	1009883a 	mov	r4,r2
   23684:	00202600 	call	20260 <main>
   23688:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2368c:	01000044 	movi	r4,1
   23690:	002312c0 	call	2312c <close>
  exit (result);
   23694:	e13fff17 	ldw	r4,-4(fp)
   23698:	0024f740 	call	24f74 <exit>

0002369c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   2369c:	defffe04 	addi	sp,sp,-8
   236a0:	df000115 	stw	fp,4(sp)
   236a4:	df000104 	addi	fp,sp,4
   236a8:	e13fff15 	stw	r4,-4(fp)
}
   236ac:	0001883a 	nop
   236b0:	e037883a 	mov	sp,fp
   236b4:	df000017 	ldw	fp,0(sp)
   236b8:	dec00104 	addi	sp,sp,4
   236bc:	f800283a 	ret

000236c0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   236c0:	defffe04 	addi	sp,sp,-8
   236c4:	df000115 	stw	fp,4(sp)
   236c8:	df000104 	addi	fp,sp,4
   236cc:	e13fff15 	stw	r4,-4(fp)
}
   236d0:	0001883a 	nop
   236d4:	e037883a 	mov	sp,fp
   236d8:	df000017 	ldw	fp,0(sp)
   236dc:	dec00104 	addi	sp,sp,4
   236e0:	f800283a 	ret

000236e4 <alt_get_errno>:
{
   236e4:	defffe04 	addi	sp,sp,-8
   236e8:	dfc00115 	stw	ra,4(sp)
   236ec:	df000015 	stw	fp,0(sp)
   236f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   236f4:	d0a00917 	ldw	r2,-32732(gp)
   236f8:	10000326 	beq	r2,zero,23708 <alt_get_errno+0x24>
   236fc:	d0a00917 	ldw	r2,-32732(gp)
   23700:	103ee83a 	callr	r2
   23704:	00000106 	br	2370c <alt_get_errno+0x28>
   23708:	d0a2c104 	addi	r2,gp,-29948
}
   2370c:	e037883a 	mov	sp,fp
   23710:	dfc00117 	ldw	ra,4(sp)
   23714:	df000017 	ldw	fp,0(sp)
   23718:	dec00204 	addi	sp,sp,8
   2371c:	f800283a 	ret

00023720 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   23720:	defff904 	addi	sp,sp,-28
   23724:	dfc00615 	stw	ra,24(sp)
   23728:	df000515 	stw	fp,20(sp)
   2372c:	df000504 	addi	fp,sp,20
   23730:	e13ffd15 	stw	r4,-12(fp)
   23734:	e17ffc15 	stw	r5,-16(fp)
   23738:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2373c:	e0bffd17 	ldw	r2,-12(fp)
   23740:	10000916 	blt	r2,zero,23768 <read+0x48>
   23744:	e0fffd17 	ldw	r3,-12(fp)
   23748:	1805883a 	mov	r2,r3
   2374c:	1085883a 	add	r2,r2,r2
   23750:	10c5883a 	add	r2,r2,r3
   23754:	100490ba 	slli	r2,r2,2
   23758:	00c000b4 	movhi	r3,2
   2375c:	18d6a704 	addi	r3,r3,23196
   23760:	10c5883a 	add	r2,r2,r3
   23764:	00000106 	br	2376c <read+0x4c>
   23768:	0005883a 	mov	r2,zero
   2376c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   23770:	e0bfff17 	ldw	r2,-4(fp)
   23774:	10002226 	beq	r2,zero,23800 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23778:	e0bfff17 	ldw	r2,-4(fp)
   2377c:	10800217 	ldw	r2,8(r2)
   23780:	108000cc 	andi	r2,r2,3
   23784:	10800060 	cmpeqi	r2,r2,1
   23788:	1000181e 	bne	r2,zero,237ec <read+0xcc>
        (fd->dev->read))
   2378c:	e0bfff17 	ldw	r2,-4(fp)
   23790:	10800017 	ldw	r2,0(r2)
   23794:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23798:	10001426 	beq	r2,zero,237ec <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2379c:	e0bfff17 	ldw	r2,-4(fp)
   237a0:	10800017 	ldw	r2,0(r2)
   237a4:	10800517 	ldw	r2,20(r2)
   237a8:	e0fffb17 	ldw	r3,-20(fp)
   237ac:	180d883a 	mov	r6,r3
   237b0:	e17ffc17 	ldw	r5,-16(fp)
   237b4:	e13fff17 	ldw	r4,-4(fp)
   237b8:	103ee83a 	callr	r2
   237bc:	e0bffe15 	stw	r2,-8(fp)
   237c0:	e0bffe17 	ldw	r2,-8(fp)
   237c4:	1000070e 	bge	r2,zero,237e4 <read+0xc4>
        {
          ALT_ERRNO = -rval;
   237c8:	00236e40 	call	236e4 <alt_get_errno>
   237cc:	1007883a 	mov	r3,r2
   237d0:	e0bffe17 	ldw	r2,-8(fp)
   237d4:	0085c83a 	sub	r2,zero,r2
   237d8:	18800015 	stw	r2,0(r3)
          return -1;
   237dc:	00bfffc4 	movi	r2,-1
   237e0:	00000c06 	br	23814 <read+0xf4>
        }
        return rval;
   237e4:	e0bffe17 	ldw	r2,-8(fp)
   237e8:	00000a06 	br	23814 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
   237ec:	00236e40 	call	236e4 <alt_get_errno>
   237f0:	1007883a 	mov	r3,r2
   237f4:	00800344 	movi	r2,13
   237f8:	18800015 	stw	r2,0(r3)
   237fc:	00000406 	br	23810 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   23800:	00236e40 	call	236e4 <alt_get_errno>
   23804:	1007883a 	mov	r3,r2
   23808:	00801444 	movi	r2,81
   2380c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23810:	00bfffc4 	movi	r2,-1
}
   23814:	e037883a 	mov	sp,fp
   23818:	dfc00117 	ldw	ra,4(sp)
   2381c:	df000017 	ldw	fp,0(sp)
   23820:	dec00204 	addi	sp,sp,8
   23824:	f800283a 	ret

00023828 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   23828:	defffe04 	addi	sp,sp,-8
   2382c:	df000115 	stw	fp,4(sp)
   23830:	df000104 	addi	fp,sp,4
   23834:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   23838:	e0bfff17 	ldw	r2,-4(fp)
   2383c:	108000d0 	cmplti	r2,r2,3
   23840:	1000101e 	bne	r2,zero,23884 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
   23844:	e0ffff17 	ldw	r3,-4(fp)
   23848:	1805883a 	mov	r2,r3
   2384c:	1085883a 	add	r2,r2,r2
   23850:	10c5883a 	add	r2,r2,r3
   23854:	100490ba 	slli	r2,r2,2
   23858:	00c000b4 	movhi	r3,2
   2385c:	10c7883a 	add	r3,r2,r3
   23860:	1816a915 	stw	zero,23204(r3)
    alt_fd_list[fd].dev      = 0;
   23864:	e0ffff17 	ldw	r3,-4(fp)
   23868:	1805883a 	mov	r2,r3
   2386c:	1085883a 	add	r2,r2,r2
   23870:	10c5883a 	add	r2,r2,r3
   23874:	100490ba 	slli	r2,r2,2
   23878:	00c000b4 	movhi	r3,2
   2387c:	10c7883a 	add	r3,r2,r3
   23880:	1816a715 	stw	zero,23196(r3)
  }
}
   23884:	0001883a 	nop
   23888:	e037883a 	mov	sp,fp
   2388c:	df000017 	ldw	fp,0(sp)
   23890:	dec00104 	addi	sp,sp,4
   23894:	f800283a 	ret

00023898 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   23898:	defff904 	addi	sp,sp,-28
   2389c:	df000615 	stw	fp,24(sp)
   238a0:	df000604 	addi	fp,sp,24
   238a4:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
   238a8:	0005303a 	rdctl	r2,status
   238ac:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   238b0:	e0fffd17 	ldw	r3,-12(fp)
   238b4:	00bfff84 	movi	r2,-2
   238b8:	1884703a 	and	r2,r3,r2
   238bc:	1001703a 	wrctl	status,r2
  return context;
   238c0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   238c4:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   238c8:	d0a00a17 	ldw	r2,-32728(gp)
   238cc:	10c000c4 	addi	r3,r2,3
   238d0:	00bfff04 	movi	r2,-4
   238d4:	1884703a 	and	r2,r3,r2
   238d8:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   238dc:	d0e00a17 	ldw	r3,-32728(gp)
   238e0:	e0bffa17 	ldw	r2,-24(fp)
   238e4:	1887883a 	add	r3,r3,r2
   238e8:	008000f4 	movhi	r2,3
   238ec:	10860004 	addi	r2,r2,6144
   238f0:	10c0072e 	bgeu	r2,r3,23910 <sbrk+0x78>
   238f4:	e0bfff17 	ldw	r2,-4(fp)
   238f8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   238fc:	e0bffc17 	ldw	r2,-16(fp)
   23900:	1001703a 	wrctl	status,r2
}
   23904:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   23908:	00bfffc4 	movi	r2,-1
   2390c:	00000c06 	br	23940 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   23910:	d0a00a17 	ldw	r2,-32728(gp)
   23914:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
   23918:	d0e00a17 	ldw	r3,-32728(gp)
   2391c:	e0bffa17 	ldw	r2,-24(fp)
   23920:	1885883a 	add	r2,r3,r2
   23924:	d0a00a15 	stw	r2,-32728(gp)
   23928:	e0bfff17 	ldw	r2,-4(fp)
   2392c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   23930:	e0bffb17 	ldw	r2,-20(fp)
   23934:	1001703a 	wrctl	status,r2
}
   23938:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   2393c:	e0bffe17 	ldw	r2,-8(fp)
} 
   23940:	e037883a 	mov	sp,fp
   23944:	df000017 	ldw	fp,0(sp)
   23948:	dec00104 	addi	sp,sp,4
   2394c:	f800283a 	ret

00023950 <alt_get_errno>:
{
   23950:	defffe04 	addi	sp,sp,-8
   23954:	dfc00115 	stw	ra,4(sp)
   23958:	df000015 	stw	fp,0(sp)
   2395c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23960:	d0a00917 	ldw	r2,-32732(gp)
   23964:	10000326 	beq	r2,zero,23974 <alt_get_errno+0x24>
   23968:	d0a00917 	ldw	r2,-32732(gp)
   2396c:	103ee83a 	callr	r2
   23970:	00000106 	br	23978 <alt_get_errno+0x28>
   23974:	d0a2c104 	addi	r2,gp,-29948
}
   23978:	e037883a 	mov	sp,fp
   2397c:	dfc00117 	ldw	ra,4(sp)
   23980:	df000017 	ldw	fp,0(sp)
   23984:	dec00204 	addi	sp,sp,8
   23988:	f800283a 	ret

0002398c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2398c:	defff904 	addi	sp,sp,-28
   23990:	dfc00615 	stw	ra,24(sp)
   23994:	df000515 	stw	fp,20(sp)
   23998:	df000504 	addi	fp,sp,20
   2399c:	e13ffd15 	stw	r4,-12(fp)
   239a0:	e17ffc15 	stw	r5,-16(fp)
   239a4:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   239a8:	e0bffd17 	ldw	r2,-12(fp)
   239ac:	10000916 	blt	r2,zero,239d4 <write+0x48>
   239b0:	e0fffd17 	ldw	r3,-12(fp)
   239b4:	1805883a 	mov	r2,r3
   239b8:	1085883a 	add	r2,r2,r2
   239bc:	10c5883a 	add	r2,r2,r3
   239c0:	100490ba 	slli	r2,r2,2
   239c4:	00c000b4 	movhi	r3,2
   239c8:	18d6a704 	addi	r3,r3,23196
   239cc:	10c5883a 	add	r2,r2,r3
   239d0:	00000106 	br	239d8 <write+0x4c>
   239d4:	0005883a 	mov	r2,zero
   239d8:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   239dc:	e0bfff17 	ldw	r2,-4(fp)
   239e0:	10002126 	beq	r2,zero,23a68 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   239e4:	e0bfff17 	ldw	r2,-4(fp)
   239e8:	10800217 	ldw	r2,8(r2)
   239ec:	108000cc 	andi	r2,r2,3
   239f0:	10001826 	beq	r2,zero,23a54 <write+0xc8>
   239f4:	e0bfff17 	ldw	r2,-4(fp)
   239f8:	10800017 	ldw	r2,0(r2)
   239fc:	10800617 	ldw	r2,24(r2)
   23a00:	10001426 	beq	r2,zero,23a54 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   23a04:	e0bfff17 	ldw	r2,-4(fp)
   23a08:	10800017 	ldw	r2,0(r2)
   23a0c:	10800617 	ldw	r2,24(r2)
   23a10:	e0fffb17 	ldw	r3,-20(fp)
   23a14:	180d883a 	mov	r6,r3
   23a18:	e17ffc17 	ldw	r5,-16(fp)
   23a1c:	e13fff17 	ldw	r4,-4(fp)
   23a20:	103ee83a 	callr	r2
   23a24:	e0bffe15 	stw	r2,-8(fp)
   23a28:	e0bffe17 	ldw	r2,-8(fp)
   23a2c:	1000070e 	bge	r2,zero,23a4c <write+0xc0>
      {
        ALT_ERRNO = -rval;
   23a30:	00239500 	call	23950 <alt_get_errno>
   23a34:	1007883a 	mov	r3,r2
   23a38:	e0bffe17 	ldw	r2,-8(fp)
   23a3c:	0085c83a 	sub	r2,zero,r2
   23a40:	18800015 	stw	r2,0(r3)
        return -1;
   23a44:	00bfffc4 	movi	r2,-1
   23a48:	00000c06 	br	23a7c <write+0xf0>
      }
      return rval;
   23a4c:	e0bffe17 	ldw	r2,-8(fp)
   23a50:	00000a06 	br	23a7c <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
   23a54:	00239500 	call	23950 <alt_get_errno>
   23a58:	1007883a 	mov	r3,r2
   23a5c:	00800344 	movi	r2,13
   23a60:	18800015 	stw	r2,0(r3)
   23a64:	00000406 	br	23a78 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   23a68:	00239500 	call	23950 <alt_get_errno>
   23a6c:	1007883a 	mov	r3,r2
   23a70:	00801444 	movi	r2,81
   23a74:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23a78:	00bfffc4 	movi	r2,-1
}
   23a7c:	e037883a 	mov	sp,fp
   23a80:	dfc00117 	ldw	ra,4(sp)
   23a84:	df000017 	ldw	fp,0(sp)
   23a88:	dec00204 	addi	sp,sp,8
   23a8c:	f800283a 	ret

00023a90 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   23a90:	defffd04 	addi	sp,sp,-12
   23a94:	dfc00215 	stw	ra,8(sp)
   23a98:	df000115 	stw	fp,4(sp)
   23a9c:	df000104 	addi	fp,sp,4
   23aa0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   23aa4:	d1600604 	addi	r5,gp,-32744
   23aa8:	e13fff17 	ldw	r4,-4(fp)
   23aac:	00244880 	call	24488 <alt_dev_llist_insert>
}
   23ab0:	e037883a 	mov	sp,fp
   23ab4:	dfc00117 	ldw	ra,4(sp)
   23ab8:	df000017 	ldw	fp,0(sp)
   23abc:	dec00204 	addi	sp,sp,8
   23ac0:	f800283a 	ret

00023ac4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   23ac4:	defffd04 	addi	sp,sp,-12
   23ac8:	dfc00215 	stw	ra,8(sp)
   23acc:	df000115 	stw	fp,4(sp)
   23ad0:	df000104 	addi	fp,sp,4
   23ad4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   23ad8:	0024c780 	call	24c78 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   23adc:	00800044 	movi	r2,1
   23ae0:	1001703a 	wrctl	status,r2
}
   23ae4:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
   23ae8:	0001883a 	nop
   23aec:	e037883a 	mov	sp,fp
   23af0:	dfc00117 	ldw	ra,4(sp)
   23af4:	df000017 	ldw	fp,0(sp)
   23af8:	dec00204 	addi	sp,sp,8
   23afc:	f800283a 	ret

00023b00 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   23b00:	defffe04 	addi	sp,sp,-8
   23b04:	dfc00115 	stw	ra,4(sp)
   23b08:	df000015 	stw	fp,0(sp)
   23b0c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
   23b10:	000d883a 	mov	r6,zero
   23b14:	000b883a 	mov	r5,zero
   23b18:	010000b4 	movhi	r4,2
   23b1c:	21171104 	addi	r4,r4,23620
   23b20:	0023c580 	call	23c58 <altera_avalon_uart_init>
   23b24:	010000b4 	movhi	r4,2
   23b28:	21170704 	addi	r4,r4,23580
   23b2c:	0023a900 	call	23a90 <alt_dev_reg>
}
   23b30:	0001883a 	nop
   23b34:	e037883a 	mov	sp,fp
   23b38:	dfc00117 	ldw	ra,4(sp)
   23b3c:	df000017 	ldw	fp,0(sp)
   23b40:	dec00204 	addi	sp,sp,8
   23b44:	f800283a 	ret

00023b48 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   23b48:	defffa04 	addi	sp,sp,-24
   23b4c:	dfc00515 	stw	ra,20(sp)
   23b50:	df000415 	stw	fp,16(sp)
   23b54:	df000404 	addi	fp,sp,16
   23b58:	e13ffe15 	stw	r4,-8(fp)
   23b5c:	e17ffd15 	stw	r5,-12(fp)
   23b60:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   23b64:	e0bffe17 	ldw	r2,-8(fp)
   23b68:	10800017 	ldw	r2,0(r2)
   23b6c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   23b70:	e0bfff17 	ldw	r2,-4(fp)
   23b74:	10c00a04 	addi	r3,r2,40
   23b78:	e0bffe17 	ldw	r2,-8(fp)
   23b7c:	10800217 	ldw	r2,8(r2)
   23b80:	100f883a 	mov	r7,r2
   23b84:	e1bffc17 	ldw	r6,-16(fp)
   23b88:	e17ffd17 	ldw	r5,-12(fp)
   23b8c:	1809883a 	mov	r4,r3
   23b90:	00240540 	call	24054 <altera_avalon_uart_read>
      fd->fd_flags);
}
   23b94:	e037883a 	mov	sp,fp
   23b98:	dfc00117 	ldw	ra,4(sp)
   23b9c:	df000017 	ldw	fp,0(sp)
   23ba0:	dec00204 	addi	sp,sp,8
   23ba4:	f800283a 	ret

00023ba8 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   23ba8:	defffa04 	addi	sp,sp,-24
   23bac:	dfc00515 	stw	ra,20(sp)
   23bb0:	df000415 	stw	fp,16(sp)
   23bb4:	df000404 	addi	fp,sp,16
   23bb8:	e13ffe15 	stw	r4,-8(fp)
   23bbc:	e17ffd15 	stw	r5,-12(fp)
   23bc0:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   23bc4:	e0bffe17 	ldw	r2,-8(fp)
   23bc8:	10800017 	ldw	r2,0(r2)
   23bcc:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   23bd0:	e0bfff17 	ldw	r2,-4(fp)
   23bd4:	10c00a04 	addi	r3,r2,40
   23bd8:	e0bffe17 	ldw	r2,-8(fp)
   23bdc:	10800217 	ldw	r2,8(r2)
   23be0:	100f883a 	mov	r7,r2
   23be4:	e1bffc17 	ldw	r6,-16(fp)
   23be8:	e17ffd17 	ldw	r5,-12(fp)
   23bec:	1809883a 	mov	r4,r3
   23bf0:	00242780 	call	24278 <altera_avalon_uart_write>
      fd->fd_flags);
}
   23bf4:	e037883a 	mov	sp,fp
   23bf8:	dfc00117 	ldw	ra,4(sp)
   23bfc:	df000017 	ldw	fp,0(sp)
   23c00:	dec00204 	addi	sp,sp,8
   23c04:	f800283a 	ret

00023c08 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   23c08:	defffc04 	addi	sp,sp,-16
   23c0c:	dfc00315 	stw	ra,12(sp)
   23c10:	df000215 	stw	fp,8(sp)
   23c14:	df000204 	addi	fp,sp,8
   23c18:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   23c1c:	e0bffe17 	ldw	r2,-8(fp)
   23c20:	10800017 	ldw	r2,0(r2)
   23c24:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   23c28:	e0bfff17 	ldw	r2,-4(fp)
   23c2c:	10c00a04 	addi	r3,r2,40
   23c30:	e0bffe17 	ldw	r2,-8(fp)
   23c34:	10800217 	ldw	r2,8(r2)
   23c38:	100b883a 	mov	r5,r2
   23c3c:	1809883a 	mov	r4,r3
   23c40:	0023fc40 	call	23fc4 <altera_avalon_uart_close>
}
   23c44:	e037883a 	mov	sp,fp
   23c48:	dfc00117 	ldw	ra,4(sp)
   23c4c:	df000017 	ldw	fp,0(sp)
   23c50:	dec00204 	addi	sp,sp,8
   23c54:	f800283a 	ret

00023c58 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   23c58:	defff804 	addi	sp,sp,-32
   23c5c:	dfc00715 	stw	ra,28(sp)
   23c60:	df000615 	stw	fp,24(sp)
   23c64:	df000604 	addi	fp,sp,24
   23c68:	e13ffd15 	stw	r4,-12(fp)
   23c6c:	e17ffc15 	stw	r5,-16(fp)
   23c70:	e1bffb15 	stw	r6,-20(fp)
  void* base = sp->base;
   23c74:	e0bffd17 	ldw	r2,-12(fp)
   23c78:	10800017 	ldw	r2,0(r2)
   23c7c:	e0bfff15 	stw	r2,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   23c80:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   23c84:	1000041e 	bne	r2,zero,23c98 <altera_avalon_uart_init+0x40>
   23c88:	0005883a 	mov	r2,zero
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   23c8c:	1000021e 	bne	r2,zero,23c98 <altera_avalon_uart_init+0x40>
   23c90:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   23c94:	10000226 	beq	r2,zero,23ca0 <altera_avalon_uart_init+0x48>
   23c98:	00800044 	movi	r2,1
   23c9c:	00000106 	br	23ca4 <altera_avalon_uart_init+0x4c>
   23ca0:	0005883a 	mov	r2,zero
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   23ca4:	e0bffe15 	stw	r2,-8(fp)
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   23ca8:	e0bffe17 	ldw	r2,-8(fp)
   23cac:	10000f1e 	bne	r2,zero,23cec <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   23cb0:	e0bffd17 	ldw	r2,-12(fp)
   23cb4:	00c32004 	movi	r3,3200
   23cb8:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   23cbc:	e0bfff17 	ldw	r2,-4(fp)
   23cc0:	10800304 	addi	r2,r2,12
   23cc4:	e0fffd17 	ldw	r3,-12(fp)
   23cc8:	18c00117 	ldw	r3,4(r3)
   23ccc:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   23cd0:	d8000015 	stw	zero,0(sp)
   23cd4:	e1fffd17 	ldw	r7,-12(fp)
   23cd8:	018000b4 	movhi	r6,2
   23cdc:	318f4104 	addi	r6,r6,15620
   23ce0:	e17ffb17 	ldw	r5,-20(fp)
   23ce4:	e13ffc17 	ldw	r4,-16(fp)
   23ce8:	00246180 	call	24618 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   23cec:	0001883a 	nop
   23cf0:	e037883a 	mov	sp,fp
   23cf4:	dfc00117 	ldw	ra,4(sp)
   23cf8:	df000017 	ldw	fp,0(sp)
   23cfc:	dec00204 	addi	sp,sp,8
   23d00:	f800283a 	ret

00023d04 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   23d04:	defffa04 	addi	sp,sp,-24
   23d08:	dfc00515 	stw	ra,20(sp)
   23d0c:	df000415 	stw	fp,16(sp)
   23d10:	df000404 	addi	fp,sp,16
   23d14:	e13ffc15 	stw	r4,-16(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   23d18:	e0bffc17 	ldw	r2,-16(fp)
   23d1c:	e0bfff15 	stw	r2,-4(fp)
  void* base               = sp->base;
   23d20:	e0bfff17 	ldw	r2,-4(fp)
   23d24:	10800017 	ldw	r2,0(r2)
   23d28:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   23d2c:	e0bffe17 	ldw	r2,-8(fp)
   23d30:	10800204 	addi	r2,r2,8
   23d34:	10800037 	ldwio	r2,0(r2)
   23d38:	e0bffd15 	stw	r2,-12(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   23d3c:	e0bffe17 	ldw	r2,-8(fp)
   23d40:	10800204 	addi	r2,r2,8
   23d44:	0007883a 	mov	r3,zero
   23d48:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   23d4c:	e0bffe17 	ldw	r2,-8(fp)
   23d50:	10800204 	addi	r2,r2,8
   23d54:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   23d58:	e0bffd17 	ldw	r2,-12(fp)
   23d5c:	1080200c 	andi	r2,r2,128
   23d60:	10000326 	beq	r2,zero,23d70 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   23d64:	e17ffd17 	ldw	r5,-12(fp)
   23d68:	e13fff17 	ldw	r4,-4(fp)
   23d6c:	0023da00 	call	23da0 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   23d70:	e0bffd17 	ldw	r2,-12(fp)
   23d74:	1081100c 	andi	r2,r2,1088
   23d78:	10000326 	beq	r2,zero,23d88 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   23d7c:	e17ffd17 	ldw	r5,-12(fp)
   23d80:	e13fff17 	ldw	r4,-4(fp)
   23d84:	0023e800 	call	23e80 <altera_avalon_uart_txirq>
  }
  

}
   23d88:	0001883a 	nop
   23d8c:	e037883a 	mov	sp,fp
   23d90:	dfc00117 	ldw	ra,4(sp)
   23d94:	df000017 	ldw	fp,0(sp)
   23d98:	dec00204 	addi	sp,sp,8
   23d9c:	f800283a 	ret

00023da0 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   23da0:	defffc04 	addi	sp,sp,-16
   23da4:	df000315 	stw	fp,12(sp)
   23da8:	df000304 	addi	fp,sp,12
   23dac:	e13ffe15 	stw	r4,-8(fp)
   23db0:	e17ffd15 	stw	r5,-12(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   23db4:	e0bffd17 	ldw	r2,-12(fp)
   23db8:	108000cc 	andi	r2,r2,3
   23dbc:	10002b1e 	bne	r2,zero,23e6c <altera_avalon_uart_rxirq+0xcc>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   23dc0:	e0bffe17 	ldw	r2,-8(fp)
   23dc4:	10800317 	ldw	r2,12(r2)
   23dc8:	e0bffe17 	ldw	r2,-8(fp)
   23dcc:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   23dd0:	e0bffe17 	ldw	r2,-8(fp)
   23dd4:	10800317 	ldw	r2,12(r2)
   23dd8:	10800044 	addi	r2,r2,1
   23ddc:	10800fcc 	andi	r2,r2,63
   23de0:	e0bfff15 	stw	r2,-4(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   23de4:	e0bffe17 	ldw	r2,-8(fp)
   23de8:	10800017 	ldw	r2,0(r2)
   23dec:	10c00037 	ldwio	r3,0(r2)
   23df0:	e0bffe17 	ldw	r2,-8(fp)
   23df4:	10800317 	ldw	r2,12(r2)
   23df8:	1809883a 	mov	r4,r3
   23dfc:	e0fffe17 	ldw	r3,-8(fp)
   23e00:	1885883a 	add	r2,r3,r2
   23e04:	11000705 	stb	r4,28(r2)

  sp->rx_end = next;
   23e08:	e0bffe17 	ldw	r2,-8(fp)
   23e0c:	e0ffff17 	ldw	r3,-4(fp)
   23e10:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   23e14:	e0bffe17 	ldw	r2,-8(fp)
   23e18:	10800317 	ldw	r2,12(r2)
   23e1c:	10800044 	addi	r2,r2,1
   23e20:	10800fcc 	andi	r2,r2,63
   23e24:	e0bfff15 	stw	r2,-4(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   23e28:	e0bffe17 	ldw	r2,-8(fp)
   23e2c:	10800217 	ldw	r2,8(r2)
   23e30:	e0ffff17 	ldw	r3,-4(fp)
   23e34:	18800e1e 	bne	r3,r2,23e70 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   23e38:	e0bffe17 	ldw	r2,-8(fp)
   23e3c:	10c00117 	ldw	r3,4(r2)
   23e40:	00bfdfc4 	movi	r2,-129
   23e44:	1886703a 	and	r3,r3,r2
   23e48:	e0bffe17 	ldw	r2,-8(fp)
   23e4c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   23e50:	e0bffe17 	ldw	r2,-8(fp)
   23e54:	10800017 	ldw	r2,0(r2)
   23e58:	10800304 	addi	r2,r2,12
   23e5c:	e0fffe17 	ldw	r3,-8(fp)
   23e60:	18c00117 	ldw	r3,4(r3)
   23e64:	10c00035 	stwio	r3,0(r2)
   23e68:	00000106 	br	23e70 <altera_avalon_uart_rxirq+0xd0>
    return;
   23e6c:	0001883a 	nop
  }   
}
   23e70:	e037883a 	mov	sp,fp
   23e74:	df000017 	ldw	fp,0(sp)
   23e78:	dec00104 	addi	sp,sp,4
   23e7c:	f800283a 	ret

00023e80 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   23e80:	defffd04 	addi	sp,sp,-12
   23e84:	df000215 	stw	fp,8(sp)
   23e88:	df000204 	addi	fp,sp,8
   23e8c:	e13fff15 	stw	r4,-4(fp)
   23e90:	e17ffe15 	stw	r5,-8(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   23e94:	e0bfff17 	ldw	r2,-4(fp)
   23e98:	10c00417 	ldw	r3,16(r2)
   23e9c:	e0bfff17 	ldw	r2,-4(fp)
   23ea0:	10800517 	ldw	r2,20(r2)
   23ea4:	18803126 	beq	r3,r2,23f6c <altera_avalon_uart_txirq+0xec>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   23ea8:	e0bfff17 	ldw	r2,-4(fp)
   23eac:	10800617 	ldw	r2,24(r2)
   23eb0:	1080008c 	andi	r2,r2,2
   23eb4:	10000326 	beq	r2,zero,23ec4 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   23eb8:	e0bffe17 	ldw	r2,-8(fp)
   23ebc:	1082000c 	andi	r2,r2,2048
    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   23ec0:	10001c26 	beq	r2,zero,23f34 <altera_avalon_uart_txirq+0xb4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   23ec4:	e0bfff17 	ldw	r2,-4(fp)
   23ec8:	10800417 	ldw	r2,16(r2)
   23ecc:	e0bfff17 	ldw	r2,-4(fp)
   23ed0:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   23ed4:	e0bfff17 	ldw	r2,-4(fp)
   23ed8:	10800017 	ldw	r2,0(r2)
   23edc:	10800104 	addi	r2,r2,4
   23ee0:	e0ffff17 	ldw	r3,-4(fp)
   23ee4:	18c00417 	ldw	r3,16(r3)
   23ee8:	e13fff17 	ldw	r4,-4(fp)
   23eec:	20c7883a 	add	r3,r4,r3
   23ef0:	18c01703 	ldbu	r3,92(r3)
   23ef4:	18c03fcc 	andi	r3,r3,255
   23ef8:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   23efc:	e0bfff17 	ldw	r2,-4(fp)
   23f00:	10800417 	ldw	r2,16(r2)
   23f04:	10800044 	addi	r2,r2,1
   23f08:	e0ffff17 	ldw	r3,-4(fp)
   23f0c:	18800415 	stw	r2,16(r3)
   23f10:	10c00fcc 	andi	r3,r2,63
   23f14:	e0bfff17 	ldw	r2,-4(fp)
   23f18:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   23f1c:	e0bfff17 	ldw	r2,-4(fp)
   23f20:	10800117 	ldw	r2,4(r2)
   23f24:	10c01014 	ori	r3,r2,64
   23f28:	e0bfff17 	ldw	r2,-4(fp)
   23f2c:	10c00115 	stw	r3,4(r2)
   23f30:	00000e06 	br	23f6c <altera_avalon_uart_txirq+0xec>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   23f34:	e0bfff17 	ldw	r2,-4(fp)
   23f38:	10800017 	ldw	r2,0(r2)
   23f3c:	10800204 	addi	r2,r2,8
   23f40:	10800037 	ldwio	r2,0(r2)
   23f44:	e0bffe15 	stw	r2,-8(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   23f48:	e0bffe17 	ldw	r2,-8(fp)
   23f4c:	1082000c 	andi	r2,r2,2048
   23f50:	1000061e 	bne	r2,zero,23f6c <altera_avalon_uart_txirq+0xec>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   23f54:	e0bfff17 	ldw	r2,-4(fp)
   23f58:	10c00117 	ldw	r3,4(r2)
   23f5c:	00bfefc4 	movi	r2,-65
   23f60:	1886703a 	and	r3,r3,r2
   23f64:	e0bfff17 	ldw	r2,-4(fp)
   23f68:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   23f6c:	e0bfff17 	ldw	r2,-4(fp)
   23f70:	10c00417 	ldw	r3,16(r2)
   23f74:	e0bfff17 	ldw	r2,-4(fp)
   23f78:	10800517 	ldw	r2,20(r2)
   23f7c:	1880061e 	bne	r3,r2,23f98 <altera_avalon_uart_txirq+0x118>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   23f80:	e0bfff17 	ldw	r2,-4(fp)
   23f84:	10c00117 	ldw	r3,4(r2)
   23f88:	00beefc4 	movi	r2,-1089
   23f8c:	1886703a 	and	r3,r3,r2
   23f90:	e0bfff17 	ldw	r2,-4(fp)
   23f94:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   23f98:	e0bfff17 	ldw	r2,-4(fp)
   23f9c:	10800017 	ldw	r2,0(r2)
   23fa0:	10800304 	addi	r2,r2,12
   23fa4:	e0ffff17 	ldw	r3,-4(fp)
   23fa8:	18c00117 	ldw	r3,4(r3)
   23fac:	10c00035 	stwio	r3,0(r2)
}
   23fb0:	0001883a 	nop
   23fb4:	e037883a 	mov	sp,fp
   23fb8:	df000017 	ldw	fp,0(sp)
   23fbc:	dec00104 	addi	sp,sp,4
   23fc0:	f800283a 	ret

00023fc4 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   23fc4:	defffd04 	addi	sp,sp,-12
   23fc8:	df000215 	stw	fp,8(sp)
   23fcc:	df000204 	addi	fp,sp,8
   23fd0:	e13fff15 	stw	r4,-4(fp)
   23fd4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   23fd8:	00000506 	br	23ff0 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   23fdc:	e0bffe17 	ldw	r2,-8(fp)
   23fe0:	1090000c 	andi	r2,r2,16384
   23fe4:	10000226 	beq	r2,zero,23ff0 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   23fe8:	00bffd44 	movi	r2,-11
   23fec:	00000606 	br	24008 <altera_avalon_uart_close+0x44>
  while (sp->tx_start != sp->tx_end) {
   23ff0:	e0bfff17 	ldw	r2,-4(fp)
   23ff4:	10c00417 	ldw	r3,16(r2)
   23ff8:	e0bfff17 	ldw	r2,-4(fp)
   23ffc:	10800517 	ldw	r2,20(r2)
   24000:	18bff61e 	bne	r3,r2,23fdc <altera_avalon_uart_close+0x18>
    }
  }

  return 0;
   24004:	0005883a 	mov	r2,zero
}
   24008:	e037883a 	mov	sp,fp
   2400c:	df000017 	ldw	fp,0(sp)
   24010:	dec00104 	addi	sp,sp,4
   24014:	f800283a 	ret

00024018 <alt_get_errno>:
{
   24018:	defffe04 	addi	sp,sp,-8
   2401c:	dfc00115 	stw	ra,4(sp)
   24020:	df000015 	stw	fp,0(sp)
   24024:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24028:	d0a00917 	ldw	r2,-32732(gp)
   2402c:	10000326 	beq	r2,zero,2403c <alt_get_errno+0x24>
   24030:	d0a00917 	ldw	r2,-32732(gp)
   24034:	103ee83a 	callr	r2
   24038:	00000106 	br	24040 <alt_get_errno+0x28>
   2403c:	d0a2c104 	addi	r2,gp,-29948
}
   24040:	e037883a 	mov	sp,fp
   24044:	dfc00117 	ldw	ra,4(sp)
   24048:	df000017 	ldw	fp,0(sp)
   2404c:	dec00204 	addi	sp,sp,8
   24050:	f800283a 	ret

00024054 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   24054:	defff204 	addi	sp,sp,-56
   24058:	dfc00d15 	stw	ra,52(sp)
   2405c:	df000c15 	stw	fp,48(sp)
   24060:	df000c04 	addi	fp,sp,48
   24064:	e13ff715 	stw	r4,-36(fp)
   24068:	e17ff615 	stw	r5,-40(fp)
   2406c:	e1bff515 	stw	r6,-44(fp)
   24070:	e1fff415 	stw	r7,-48(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   24074:	e03fffc5 	stb	zero,-1(fp)
  int             count = 0;
   24078:	e03ffe15 	stw	zero,-8(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   2407c:	e0bff417 	ldw	r2,-48(fp)
   24080:	1090000c 	andi	r2,r2,16384
   24084:	1005003a 	cmpeq	r2,r2,zero
   24088:	10803fcc 	andi	r2,r2,255
   2408c:	e0bffd15 	stw	r2,-12(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   24090:	00001306 	br	240e0 <altera_avalon_uart_read+0x8c>
    {
      count++;
   24094:	e0bffe17 	ldw	r2,-8(fp)
   24098:	10800044 	addi	r2,r2,1
   2409c:	e0bffe15 	stw	r2,-8(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   240a0:	e0bff717 	ldw	r2,-36(fp)
   240a4:	10800217 	ldw	r2,8(r2)
   240a8:	e0fff717 	ldw	r3,-36(fp)
   240ac:	1885883a 	add	r2,r3,r2
   240b0:	11000703 	ldbu	r4,28(r2)
   240b4:	e0bff617 	ldw	r2,-40(fp)
   240b8:	10c00044 	addi	r3,r2,1
   240bc:	e0fff615 	stw	r3,-40(fp)
   240c0:	2007883a 	mov	r3,r4
   240c4:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   240c8:	e0bff717 	ldw	r2,-36(fp)
   240cc:	10800217 	ldw	r2,8(r2)
   240d0:	10800044 	addi	r2,r2,1
   240d4:	10c00fcc 	andi	r3,r2,63
   240d8:	e0bff717 	ldw	r2,-36(fp)
   240dc:	10c00215 	stw	r3,8(r2)
    while ((count < len) && (sp->rx_start != sp->rx_end))
   240e0:	e0fffe17 	ldw	r3,-8(fp)
   240e4:	e0bff517 	ldw	r2,-44(fp)
   240e8:	1880050e 	bge	r3,r2,24100 <altera_avalon_uart_read+0xac>
   240ec:	e0bff717 	ldw	r2,-36(fp)
   240f0:	10c00217 	ldw	r3,8(r2)
   240f4:	e0bff717 	ldw	r2,-36(fp)
   240f8:	10800317 	ldw	r2,12(r2)
   240fc:	18bfe51e 	bne	r3,r2,24094 <altera_avalon_uart_read+0x40>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   24100:	e0bffe17 	ldw	r2,-8(fp)
   24104:	1000271e 	bne	r2,zero,241a4 <altera_avalon_uart_read+0x150>
   24108:	e0bff717 	ldw	r2,-36(fp)
   2410c:	10c00217 	ldw	r3,8(r2)
   24110:	e0bff717 	ldw	r2,-36(fp)
   24114:	10800317 	ldw	r2,12(r2)
   24118:	1880221e 	bne	r3,r2,241a4 <altera_avalon_uart_read+0x150>
    {
      if (!block)
   2411c:	e0bffd17 	ldw	r2,-12(fp)
   24120:	1000071e 	bne	r2,zero,24140 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   24124:	00240180 	call	24018 <alt_get_errno>
   24128:	1007883a 	mov	r3,r2
   2412c:	008002c4 	movi	r2,11
   24130:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   24134:	00800044 	movi	r2,1
   24138:	e0bfffc5 	stb	r2,-1(fp)
        break;
   2413c:	00001d06 	br	241b4 <altera_avalon_uart_read+0x160>
  NIOS2_READ_STATUS (context);
   24140:	0005303a 	rdctl	r2,status
   24144:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24148:	e0fffa17 	ldw	r3,-24(fp)
   2414c:	00bfff84 	movi	r2,-2
   24150:	1884703a 	and	r2,r3,r2
   24154:	1001703a 	wrctl	status,r2
  return context;
   24158:	e0bffa17 	ldw	r2,-24(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   2415c:	e0bffc15 	stw	r2,-16(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   24160:	e0bff717 	ldw	r2,-36(fp)
   24164:	10800117 	ldw	r2,4(r2)
   24168:	10c02014 	ori	r3,r2,128
   2416c:	e0bff717 	ldw	r2,-36(fp)
   24170:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   24174:	e0bff717 	ldw	r2,-36(fp)
   24178:	10800017 	ldw	r2,0(r2)
   2417c:	10800304 	addi	r2,r2,12
   24180:	e0fff717 	ldw	r3,-36(fp)
   24184:	18c00117 	ldw	r3,4(r3)
   24188:	10c00035 	stwio	r3,0(r2)
   2418c:	e0bffc17 	ldw	r2,-16(fp)
   24190:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   24194:	e0bffb17 	ldw	r2,-20(fp)
   24198:	1001703a 	wrctl	status,r2
}
   2419c:	0001883a 	nop
   241a0:	0001883a 	nop
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   241a4:	e0bffe17 	ldw	r2,-8(fp)
   241a8:	1000021e 	bne	r2,zero,241b4 <altera_avalon_uart_read+0x160>
   241ac:	e0bff517 	ldw	r2,-44(fp)
   241b0:	103fcb1e 	bne	r2,zero,240e0 <altera_avalon_uart_read+0x8c>
  NIOS2_READ_STATUS (context);
   241b4:	0005303a 	rdctl	r2,status
   241b8:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   241bc:	e0fff817 	ldw	r3,-32(fp)
   241c0:	00bfff84 	movi	r2,-2
   241c4:	1884703a 	and	r2,r3,r2
   241c8:	1001703a 	wrctl	status,r2
  return context;
   241cc:	e0bff817 	ldw	r2,-32(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   241d0:	e0bffc15 	stw	r2,-16(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   241d4:	e0bff717 	ldw	r2,-36(fp)
   241d8:	10800117 	ldw	r2,4(r2)
   241dc:	10c02014 	ori	r3,r2,128
   241e0:	e0bff717 	ldw	r2,-36(fp)
   241e4:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   241e8:	e0bff717 	ldw	r2,-36(fp)
   241ec:	10800017 	ldw	r2,0(r2)
   241f0:	10800304 	addi	r2,r2,12
   241f4:	e0fff717 	ldw	r3,-36(fp)
   241f8:	18c00117 	ldw	r3,4(r3)
   241fc:	10c00035 	stwio	r3,0(r2)
   24200:	e0bffc17 	ldw	r2,-16(fp)
   24204:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   24208:	e0bff917 	ldw	r2,-28(fp)
   2420c:	1001703a 	wrctl	status,r2
}
   24210:	0001883a 	nop
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   24214:	e0bfffc3 	ldbu	r2,-1(fp)
   24218:	10000226 	beq	r2,zero,24224 <altera_avalon_uart_read+0x1d0>
    return -EWOULDBLOCK;
   2421c:	00bffd44 	movi	r2,-11
   24220:	00000106 	br	24228 <altera_avalon_uart_read+0x1d4>
  }
  else {
    return count;
   24224:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   24228:	e037883a 	mov	sp,fp
   2422c:	dfc00117 	ldw	ra,4(sp)
   24230:	df000017 	ldw	fp,0(sp)
   24234:	dec00204 	addi	sp,sp,8
   24238:	f800283a 	ret

0002423c <alt_get_errno>:
{
   2423c:	defffe04 	addi	sp,sp,-8
   24240:	dfc00115 	stw	ra,4(sp)
   24244:	df000015 	stw	fp,0(sp)
   24248:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2424c:	d0a00917 	ldw	r2,-32732(gp)
   24250:	10000326 	beq	r2,zero,24260 <alt_get_errno+0x24>
   24254:	d0a00917 	ldw	r2,-32732(gp)
   24258:	103ee83a 	callr	r2
   2425c:	00000106 	br	24264 <alt_get_errno+0x28>
   24260:	d0a2c104 	addi	r2,gp,-29948
}
   24264:	e037883a 	mov	sp,fp
   24268:	dfc00117 	ldw	ra,4(sp)
   2426c:	df000017 	ldw	fp,0(sp)
   24270:	dec00204 	addi	sp,sp,8
   24274:	f800283a 	ret

00024278 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   24278:	defff204 	addi	sp,sp,-56
   2427c:	dfc00d15 	stw	ra,52(sp)
   24280:	df000c15 	stw	fp,48(sp)
   24284:	df000c04 	addi	fp,sp,48
   24288:	e13ff715 	stw	r4,-36(fp)
   2428c:	e17ff615 	stw	r5,-40(fp)
   24290:	e1bff515 	stw	r6,-44(fp)
   24294:	e1fff415 	stw	r7,-48(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   24298:	e0bff517 	ldw	r2,-44(fp)
   2429c:	e0bfff15 	stw	r2,-4(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   242a0:	e0bff417 	ldw	r2,-48(fp)
   242a4:	1090000c 	andi	r2,r2,16384
   242a8:	e0bffe15 	stw	r2,-8(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   242ac:	00003d06 	br	243a4 <altera_avalon_uart_write+0x12c>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   242b0:	e0bff717 	ldw	r2,-36(fp)
   242b4:	10800517 	ldw	r2,20(r2)
   242b8:	10800044 	addi	r2,r2,1
   242bc:	10800fcc 	andi	r2,r2,63
   242c0:	e0bffd15 	stw	r2,-12(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   242c4:	e0bff717 	ldw	r2,-36(fp)
   242c8:	10800417 	ldw	r2,16(r2)
   242cc:	e0fffd17 	ldw	r3,-12(fp)
   242d0:	1880241e 	bne	r3,r2,24364 <altera_avalon_uart_write+0xec>
    {
      if (no_block)
   242d4:	e0bffe17 	ldw	r2,-8(fp)
   242d8:	10000526 	beq	r2,zero,242f0 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   242dc:	002423c0 	call	2423c <alt_get_errno>
   242e0:	1007883a 	mov	r3,r2
   242e4:	008002c4 	movi	r2,11
   242e8:	18800015 	stw	r2,0(r3)
        break;
   242ec:	00002f06 	br	243ac <altera_avalon_uart_write+0x134>
  NIOS2_READ_STATUS (context);
   242f0:	0005303a 	rdctl	r2,status
   242f4:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   242f8:	e0fffa17 	ldw	r3,-24(fp)
   242fc:	00bfff84 	movi	r2,-2
   24300:	1884703a 	and	r2,r3,r2
   24304:	1001703a 	wrctl	status,r2
  return context;
   24308:	e0bffa17 	ldw	r2,-24(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   2430c:	e0bffc15 	stw	r2,-16(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   24310:	e0bff717 	ldw	r2,-36(fp)
   24314:	10800117 	ldw	r2,4(r2)
   24318:	10c11014 	ori	r3,r2,1088
   2431c:	e0bff717 	ldw	r2,-36(fp)
   24320:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   24324:	e0bff717 	ldw	r2,-36(fp)
   24328:	10800017 	ldw	r2,0(r2)
   2432c:	10800304 	addi	r2,r2,12
   24330:	e0fff717 	ldw	r3,-36(fp)
   24334:	18c00117 	ldw	r3,4(r3)
   24338:	10c00035 	stwio	r3,0(r2)
   2433c:	e0bffc17 	ldw	r2,-16(fp)
   24340:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   24344:	e0bffb17 	ldw	r2,-20(fp)
   24348:	1001703a 	wrctl	status,r2
}
   2434c:	0001883a 	nop
   24350:	0001883a 	nop
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   24354:	e0bff717 	ldw	r2,-36(fp)
   24358:	10800417 	ldw	r2,16(r2)
   2435c:	e0fffd17 	ldw	r3,-12(fp)
   24360:	18bffb26 	beq	r3,r2,24350 <altera_avalon_uart_write+0xd8>
      }
    }

    count--;
   24364:	e0bfff17 	ldw	r2,-4(fp)
   24368:	10bfffc4 	addi	r2,r2,-1
   2436c:	e0bfff15 	stw	r2,-4(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   24370:	e0bff617 	ldw	r2,-40(fp)
   24374:	10c00044 	addi	r3,r2,1
   24378:	e0fff615 	stw	r3,-40(fp)
   2437c:	10c00003 	ldbu	r3,0(r2)
   24380:	e0bff717 	ldw	r2,-36(fp)
   24384:	10800517 	ldw	r2,20(r2)
   24388:	1809883a 	mov	r4,r3
   2438c:	e0fff717 	ldw	r3,-36(fp)
   24390:	1885883a 	add	r2,r3,r2
   24394:	11001705 	stb	r4,92(r2)
    sp->tx_end = next;
   24398:	e0bff717 	ldw	r2,-36(fp)
   2439c:	e0fffd17 	ldw	r3,-12(fp)
   243a0:	10c00515 	stw	r3,20(r2)
  while (count)
   243a4:	e0bfff17 	ldw	r2,-4(fp)
   243a8:	103fc11e 	bne	r2,zero,242b0 <altera_avalon_uart_write+0x38>
  NIOS2_READ_STATUS (context);
   243ac:	0005303a 	rdctl	r2,status
   243b0:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   243b4:	e0fff817 	ldw	r3,-32(fp)
   243b8:	00bfff84 	movi	r2,-2
   243bc:	1884703a 	and	r2,r3,r2
   243c0:	1001703a 	wrctl	status,r2
  return context;
   243c4:	e0bff817 	ldw	r2,-32(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   243c8:	e0bffc15 	stw	r2,-16(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   243cc:	e0bff717 	ldw	r2,-36(fp)
   243d0:	10800117 	ldw	r2,4(r2)
   243d4:	10c11014 	ori	r3,r2,1088
   243d8:	e0bff717 	ldw	r2,-36(fp)
   243dc:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   243e0:	e0bff717 	ldw	r2,-36(fp)
   243e4:	10800017 	ldw	r2,0(r2)
   243e8:	10800304 	addi	r2,r2,12
   243ec:	e0fff717 	ldw	r3,-36(fp)
   243f0:	18c00117 	ldw	r3,4(r3)
   243f4:	10c00035 	stwio	r3,0(r2)
   243f8:	e0bffc17 	ldw	r2,-16(fp)
   243fc:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   24400:	e0bff917 	ldw	r2,-28(fp)
   24404:	1001703a 	wrctl	status,r2
}
   24408:	0001883a 	nop
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   2440c:	e0fff517 	ldw	r3,-44(fp)
   24410:	e0bfff17 	ldw	r2,-4(fp)
   24414:	1885c83a 	sub	r2,r3,r2
}
   24418:	e037883a 	mov	sp,fp
   2441c:	dfc00117 	ldw	ra,4(sp)
   24420:	df000017 	ldw	fp,0(sp)
   24424:	dec00204 	addi	sp,sp,8
   24428:	f800283a 	ret

0002442c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2442c:	deffff04 	addi	sp,sp,-4
   24430:	df000015 	stw	fp,0(sp)
   24434:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   24438:	0001883a 	nop
   2443c:	e037883a 	mov	sp,fp
   24440:	df000017 	ldw	fp,0(sp)
   24444:	dec00104 	addi	sp,sp,4
   24448:	f800283a 	ret

0002444c <alt_get_errno>:
{
   2444c:	defffe04 	addi	sp,sp,-8
   24450:	dfc00115 	stw	ra,4(sp)
   24454:	df000015 	stw	fp,0(sp)
   24458:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2445c:	d0a00917 	ldw	r2,-32732(gp)
   24460:	10000326 	beq	r2,zero,24470 <alt_get_errno+0x24>
   24464:	d0a00917 	ldw	r2,-32732(gp)
   24468:	103ee83a 	callr	r2
   2446c:	00000106 	br	24474 <alt_get_errno+0x28>
   24470:	d0a2c104 	addi	r2,gp,-29948
}
   24474:	e037883a 	mov	sp,fp
   24478:	dfc00117 	ldw	ra,4(sp)
   2447c:	df000017 	ldw	fp,0(sp)
   24480:	dec00204 	addi	sp,sp,8
   24484:	f800283a 	ret

00024488 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   24488:	defffa04 	addi	sp,sp,-24
   2448c:	dfc00515 	stw	ra,20(sp)
   24490:	df000415 	stw	fp,16(sp)
   24494:	df000404 	addi	fp,sp,16
   24498:	e13ffd15 	stw	r4,-12(fp)
   2449c:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   244a0:	e0bffd17 	ldw	r2,-12(fp)
   244a4:	10000326 	beq	r2,zero,244b4 <alt_dev_llist_insert+0x2c>
   244a8:	e0bffd17 	ldw	r2,-12(fp)
   244ac:	10800217 	ldw	r2,8(r2)
   244b0:	1000061e 	bne	r2,zero,244cc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   244b4:	002444c0 	call	2444c <alt_get_errno>
   244b8:	1007883a 	mov	r3,r2
   244bc:	00800584 	movi	r2,22
   244c0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   244c4:	00bffa84 	movi	r2,-22
   244c8:	00001406 	br	2451c <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   244cc:	e0bffd17 	ldw	r2,-12(fp)
   244d0:	e0fffc17 	ldw	r3,-16(fp)
   244d4:	e0ffff15 	stw	r3,-4(fp)
   244d8:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   244dc:	e0bffe17 	ldw	r2,-8(fp)
   244e0:	e0ffff17 	ldw	r3,-4(fp)
   244e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   244e8:	e0bfff17 	ldw	r2,-4(fp)
   244ec:	10c00017 	ldw	r3,0(r2)
   244f0:	e0bffe17 	ldw	r2,-8(fp)
   244f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   244f8:	e0bfff17 	ldw	r2,-4(fp)
   244fc:	10800017 	ldw	r2,0(r2)
   24500:	e0fffe17 	ldw	r3,-8(fp)
   24504:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   24508:	e0bfff17 	ldw	r2,-4(fp)
   2450c:	e0fffe17 	ldw	r3,-8(fp)
   24510:	10c00015 	stw	r3,0(r2)
}
   24514:	0001883a 	nop

  return 0;  
   24518:	0005883a 	mov	r2,zero
}
   2451c:	e037883a 	mov	sp,fp
   24520:	dfc00117 	ldw	ra,4(sp)
   24524:	df000017 	ldw	fp,0(sp)
   24528:	dec00204 	addi	sp,sp,8
   2452c:	f800283a 	ret

00024530 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   24530:	defffd04 	addi	sp,sp,-12
   24534:	dfc00215 	stw	ra,8(sp)
   24538:	df000115 	stw	fp,4(sp)
   2453c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   24540:	008000b4 	movhi	r2,2
   24544:	10948204 	addi	r2,r2,21000
   24548:	e0bfff15 	stw	r2,-4(fp)
   2454c:	00000606 	br	24568 <_do_ctors+0x38>
        (*ctor) (); 
   24550:	e0bfff17 	ldw	r2,-4(fp)
   24554:	10800017 	ldw	r2,0(r2)
   24558:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2455c:	e0bfff17 	ldw	r2,-4(fp)
   24560:	10bfff04 	addi	r2,r2,-4
   24564:	e0bfff15 	stw	r2,-4(fp)
   24568:	e0ffff17 	ldw	r3,-4(fp)
   2456c:	008000b4 	movhi	r2,2
   24570:	10948304 	addi	r2,r2,21004
   24574:	18bff62e 	bgeu	r3,r2,24550 <_do_ctors+0x20>
}
   24578:	0001883a 	nop
   2457c:	0001883a 	nop
   24580:	e037883a 	mov	sp,fp
   24584:	dfc00117 	ldw	ra,4(sp)
   24588:	df000017 	ldw	fp,0(sp)
   2458c:	dec00204 	addi	sp,sp,8
   24590:	f800283a 	ret

00024594 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   24594:	defffd04 	addi	sp,sp,-12
   24598:	dfc00215 	stw	ra,8(sp)
   2459c:	df000115 	stw	fp,4(sp)
   245a0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   245a4:	008000b4 	movhi	r2,2
   245a8:	10948204 	addi	r2,r2,21000
   245ac:	e0bfff15 	stw	r2,-4(fp)
   245b0:	00000606 	br	245cc <_do_dtors+0x38>
        (*dtor) (); 
   245b4:	e0bfff17 	ldw	r2,-4(fp)
   245b8:	10800017 	ldw	r2,0(r2)
   245bc:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   245c0:	e0bfff17 	ldw	r2,-4(fp)
   245c4:	10bfff04 	addi	r2,r2,-4
   245c8:	e0bfff15 	stw	r2,-4(fp)
   245cc:	e0ffff17 	ldw	r3,-4(fp)
   245d0:	008000b4 	movhi	r2,2
   245d4:	10948304 	addi	r2,r2,21004
   245d8:	18bff62e 	bgeu	r3,r2,245b4 <_do_dtors+0x20>
}
   245dc:	0001883a 	nop
   245e0:	0001883a 	nop
   245e4:	e037883a 	mov	sp,fp
   245e8:	dfc00117 	ldw	ra,4(sp)
   245ec:	df000017 	ldw	fp,0(sp)
   245f0:	dec00204 	addi	sp,sp,8
   245f4:	f800283a 	ret

000245f8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   245f8:	deffff04 	addi	sp,sp,-4
   245fc:	df000015 	stw	fp,0(sp)
   24600:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   24604:	0001883a 	nop
   24608:	e037883a 	mov	sp,fp
   2460c:	df000017 	ldw	fp,0(sp)
   24610:	dec00104 	addi	sp,sp,4
   24614:	f800283a 	ret

00024618 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   24618:	defff904 	addi	sp,sp,-28
   2461c:	dfc00615 	stw	ra,24(sp)
   24620:	df000515 	stw	fp,20(sp)
   24624:	df000504 	addi	fp,sp,20
   24628:	e13fff15 	stw	r4,-4(fp)
   2462c:	e17ffe15 	stw	r5,-8(fp)
   24630:	e1bffd15 	stw	r6,-12(fp)
   24634:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   24638:	e0800217 	ldw	r2,8(fp)
   2463c:	d8800015 	stw	r2,0(sp)
   24640:	e1fffc17 	ldw	r7,-16(fp)
   24644:	e1bffd17 	ldw	r6,-12(fp)
   24648:	e17ffe17 	ldw	r5,-8(fp)
   2464c:	e13fff17 	ldw	r4,-4(fp)
   24650:	00247c80 	call	247c8 <alt_iic_isr_register>
}  
   24654:	e037883a 	mov	sp,fp
   24658:	dfc00117 	ldw	ra,4(sp)
   2465c:	df000017 	ldw	fp,0(sp)
   24660:	dec00204 	addi	sp,sp,8
   24664:	f800283a 	ret

00024668 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   24668:	defff904 	addi	sp,sp,-28
   2466c:	df000615 	stw	fp,24(sp)
   24670:	df000604 	addi	fp,sp,24
   24674:	e13ffb15 	stw	r4,-20(fp)
   24678:	e17ffa15 	stw	r5,-24(fp)
   2467c:	e0bffa17 	ldw	r2,-24(fp)
   24680:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   24684:	0005303a 	rdctl	r2,status
   24688:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2468c:	e0fffe17 	ldw	r3,-8(fp)
   24690:	00bfff84 	movi	r2,-2
   24694:	1884703a 	and	r2,r3,r2
   24698:	1001703a 	wrctl	status,r2
  return context;
   2469c:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   246a0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   246a4:	00c00044 	movi	r3,1
   246a8:	e0bfff17 	ldw	r2,-4(fp)
   246ac:	1884983a 	sll	r2,r3,r2
   246b0:	1007883a 	mov	r3,r2
   246b4:	d0a2c517 	ldw	r2,-29932(gp)
   246b8:	1884b03a 	or	r2,r3,r2
   246bc:	d0a2c515 	stw	r2,-29932(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   246c0:	d0a2c517 	ldw	r2,-29932(gp)
   246c4:	100170fa 	wrctl	ienable,r2
   246c8:	e0bffd17 	ldw	r2,-12(fp)
   246cc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   246d0:	e0bffc17 	ldw	r2,-16(fp)
   246d4:	1001703a 	wrctl	status,r2
}
   246d8:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   246dc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   246e0:	e037883a 	mov	sp,fp
   246e4:	df000017 	ldw	fp,0(sp)
   246e8:	dec00104 	addi	sp,sp,4
   246ec:	f800283a 	ret

000246f0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   246f0:	defff904 	addi	sp,sp,-28
   246f4:	df000615 	stw	fp,24(sp)
   246f8:	df000604 	addi	fp,sp,24
   246fc:	e13ffb15 	stw	r4,-20(fp)
   24700:	e17ffa15 	stw	r5,-24(fp)
   24704:	e0bffa17 	ldw	r2,-24(fp)
   24708:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   2470c:	0005303a 	rdctl	r2,status
   24710:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24714:	e0fffe17 	ldw	r3,-8(fp)
   24718:	00bfff84 	movi	r2,-2
   2471c:	1884703a 	and	r2,r3,r2
   24720:	1001703a 	wrctl	status,r2
  return context;
   24724:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
   24728:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
   2472c:	00c00044 	movi	r3,1
   24730:	e0bfff17 	ldw	r2,-4(fp)
   24734:	1884983a 	sll	r2,r3,r2
   24738:	0084303a 	nor	r2,zero,r2
   2473c:	1007883a 	mov	r3,r2
   24740:	d0a2c517 	ldw	r2,-29932(gp)
   24744:	1884703a 	and	r2,r3,r2
   24748:	d0a2c515 	stw	r2,-29932(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2474c:	d0a2c517 	ldw	r2,-29932(gp)
   24750:	100170fa 	wrctl	ienable,r2
   24754:	e0bffd17 	ldw	r2,-12(fp)
   24758:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   2475c:	e0bffc17 	ldw	r2,-16(fp)
   24760:	1001703a 	wrctl	status,r2
}
   24764:	0001883a 	nop
  return 0;
   24768:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   2476c:	e037883a 	mov	sp,fp
   24770:	df000017 	ldw	fp,0(sp)
   24774:	dec00104 	addi	sp,sp,4
   24778:	f800283a 	ret

0002477c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   2477c:	defffc04 	addi	sp,sp,-16
   24780:	df000315 	stw	fp,12(sp)
   24784:	df000304 	addi	fp,sp,12
   24788:	e13ffe15 	stw	r4,-8(fp)
   2478c:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   24790:	000530fa 	rdctl	r2,ienable
   24794:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   24798:	00c00044 	movi	r3,1
   2479c:	e0bffd17 	ldw	r2,-12(fp)
   247a0:	1884983a 	sll	r2,r3,r2
   247a4:	1007883a 	mov	r3,r2
   247a8:	e0bfff17 	ldw	r2,-4(fp)
   247ac:	1884703a 	and	r2,r3,r2
   247b0:	1004c03a 	cmpne	r2,r2,zero
   247b4:	10803fcc 	andi	r2,r2,255
}
   247b8:	e037883a 	mov	sp,fp
   247bc:	df000017 	ldw	fp,0(sp)
   247c0:	dec00104 	addi	sp,sp,4
   247c4:	f800283a 	ret

000247c8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   247c8:	defff504 	addi	sp,sp,-44
   247cc:	dfc00a15 	stw	ra,40(sp)
   247d0:	df000915 	stw	fp,36(sp)
   247d4:	df000904 	addi	fp,sp,36
   247d8:	e13ffa15 	stw	r4,-24(fp)
   247dc:	e17ff915 	stw	r5,-28(fp)
   247e0:	e1bff815 	stw	r6,-32(fp)
   247e4:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
   247e8:	00bffa84 	movi	r2,-22
   247ec:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   247f0:	e0bff917 	ldw	r2,-28(fp)
   247f4:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   247f8:	e0bffe17 	ldw	r2,-8(fp)
   247fc:	10800808 	cmpgei	r2,r2,32
   24800:	1000251e 	bne	r2,zero,24898 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
   24804:	0005303a 	rdctl	r2,status
   24808:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2480c:	e0fffc17 	ldw	r3,-16(fp)
   24810:	00bfff84 	movi	r2,-2
   24814:	1884703a 	and	r2,r3,r2
   24818:	1001703a 	wrctl	status,r2
  return context;
   2481c:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   24820:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
   24824:	e0bffe17 	ldw	r2,-8(fp)
   24828:	100890fa 	slli	r4,r2,3
   2482c:	e0fff817 	ldw	r3,-32(fp)
   24830:	008000b4 	movhi	r2,2
   24834:	2085883a 	add	r2,r4,r2
   24838:	10da0915 	stw	r3,26660(r2)
    alt_irq[id].context = isr_context;
   2483c:	e0bffe17 	ldw	r2,-8(fp)
   24840:	100890fa 	slli	r4,r2,3
   24844:	e0fff717 	ldw	r3,-36(fp)
   24848:	008000b4 	movhi	r2,2
   2484c:	2085883a 	add	r2,r4,r2
   24850:	10da0a15 	stw	r3,26664(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   24854:	e0bff817 	ldw	r2,-32(fp)
   24858:	10000526 	beq	r2,zero,24870 <alt_iic_isr_register+0xa8>
   2485c:	e0bffe17 	ldw	r2,-8(fp)
   24860:	100b883a 	mov	r5,r2
   24864:	e13ffa17 	ldw	r4,-24(fp)
   24868:	00246680 	call	24668 <alt_ic_irq_enable>
   2486c:	00000406 	br	24880 <alt_iic_isr_register+0xb8>
   24870:	e0bffe17 	ldw	r2,-8(fp)
   24874:	100b883a 	mov	r5,r2
   24878:	e13ffa17 	ldw	r4,-24(fp)
   2487c:	00246f00 	call	246f0 <alt_ic_irq_disable>
   24880:	e0bfff15 	stw	r2,-4(fp)
   24884:	e0bffd17 	ldw	r2,-12(fp)
   24888:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   2488c:	e0bffb17 	ldw	r2,-20(fp)
   24890:	1001703a 	wrctl	status,r2
}
   24894:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
   24898:	e0bfff17 	ldw	r2,-4(fp)
}
   2489c:	e037883a 	mov	sp,fp
   248a0:	dfc00117 	ldw	ra,4(sp)
   248a4:	df000017 	ldw	fp,0(sp)
   248a8:	dec00204 	addi	sp,sp,8
   248ac:	f800283a 	ret

000248b0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   248b0:	defff904 	addi	sp,sp,-28
   248b4:	dfc00615 	stw	ra,24(sp)
   248b8:	df000515 	stw	fp,20(sp)
   248bc:	df000504 	addi	fp,sp,20
   248c0:	e13ffe15 	stw	r4,-8(fp)
   248c4:	e17ffd15 	stw	r5,-12(fp)
   248c8:	e1bffc15 	stw	r6,-16(fp)
   248cc:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   248d0:	e1bffb17 	ldw	r6,-20(fp)
   248d4:	e17ffc17 	ldw	r5,-16(fp)
   248d8:	e13ffd17 	ldw	r4,-12(fp)
   248dc:	0024b180 	call	24b18 <open>
   248e0:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   248e4:	e0bfff17 	ldw	r2,-4(fp)
   248e8:	10002016 	blt	r2,zero,2496c <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
   248ec:	e0ffff17 	ldw	r3,-4(fp)
   248f0:	1805883a 	mov	r2,r3
   248f4:	1085883a 	add	r2,r2,r2
   248f8:	10c5883a 	add	r2,r2,r3
   248fc:	100490ba 	slli	r2,r2,2
   24900:	00c000b4 	movhi	r3,2
   24904:	10c7883a 	add	r3,r2,r3
   24908:	18d6a717 	ldw	r3,23196(r3)
   2490c:	e0bffe17 	ldw	r2,-8(fp)
   24910:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   24914:	e0ffff17 	ldw	r3,-4(fp)
   24918:	1805883a 	mov	r2,r3
   2491c:	1085883a 	add	r2,r2,r2
   24920:	10c5883a 	add	r2,r2,r3
   24924:	100490ba 	slli	r2,r2,2
   24928:	00c000b4 	movhi	r3,2
   2492c:	10c7883a 	add	r3,r2,r3
   24930:	18d6a817 	ldw	r3,23200(r3)
   24934:	e0bffe17 	ldw	r2,-8(fp)
   24938:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   2493c:	e0ffff17 	ldw	r3,-4(fp)
   24940:	1805883a 	mov	r2,r3
   24944:	1085883a 	add	r2,r2,r2
   24948:	10c5883a 	add	r2,r2,r3
   2494c:	100490ba 	slli	r2,r2,2
   24950:	00c000b4 	movhi	r3,2
   24954:	10c7883a 	add	r3,r2,r3
   24958:	18d6a917 	ldw	r3,23204(r3)
   2495c:	e0bffe17 	ldw	r2,-8(fp)
   24960:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   24964:	e13fff17 	ldw	r4,-4(fp)
   24968:	00238280 	call	23828 <alt_release_fd>
  }
} 
   2496c:	0001883a 	nop
   24970:	e037883a 	mov	sp,fp
   24974:	dfc00117 	ldw	ra,4(sp)
   24978:	df000017 	ldw	fp,0(sp)
   2497c:	dec00204 	addi	sp,sp,8
   24980:	f800283a 	ret

00024984 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   24984:	defffb04 	addi	sp,sp,-20
   24988:	dfc00415 	stw	ra,16(sp)
   2498c:	df000315 	stw	fp,12(sp)
   24990:	df000304 	addi	fp,sp,12
   24994:	e13fff15 	stw	r4,-4(fp)
   24998:	e17ffe15 	stw	r5,-8(fp)
   2499c:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   249a0:	01c07fc4 	movi	r7,511
   249a4:	01800044 	movi	r6,1
   249a8:	e17fff17 	ldw	r5,-4(fp)
   249ac:	010000b4 	movhi	r4,2
   249b0:	2116aa04 	addi	r4,r4,23208
   249b4:	00248b00 	call	248b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   249b8:	01c07fc4 	movi	r7,511
   249bc:	000d883a 	mov	r6,zero
   249c0:	e17ffe17 	ldw	r5,-8(fp)
   249c4:	010000b4 	movhi	r4,2
   249c8:	2116a704 	addi	r4,r4,23196
   249cc:	00248b00 	call	248b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   249d0:	01c07fc4 	movi	r7,511
   249d4:	01800044 	movi	r6,1
   249d8:	e17ffd17 	ldw	r5,-12(fp)
   249dc:	010000b4 	movhi	r4,2
   249e0:	2116ad04 	addi	r4,r4,23220
   249e4:	00248b00 	call	248b0 <alt_open_fd>
}  
   249e8:	0001883a 	nop
   249ec:	e037883a 	mov	sp,fp
   249f0:	dfc00117 	ldw	ra,4(sp)
   249f4:	df000017 	ldw	fp,0(sp)
   249f8:	dec00204 	addi	sp,sp,8
   249fc:	f800283a 	ret

00024a00 <alt_get_errno>:
{
   24a00:	defffe04 	addi	sp,sp,-8
   24a04:	dfc00115 	stw	ra,4(sp)
   24a08:	df000015 	stw	fp,0(sp)
   24a0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24a10:	d0a00917 	ldw	r2,-32732(gp)
   24a14:	10000326 	beq	r2,zero,24a24 <alt_get_errno+0x24>
   24a18:	d0a00917 	ldw	r2,-32732(gp)
   24a1c:	103ee83a 	callr	r2
   24a20:	00000106 	br	24a28 <alt_get_errno+0x28>
   24a24:	d0a2c104 	addi	r2,gp,-29948
}
   24a28:	e037883a 	mov	sp,fp
   24a2c:	dfc00117 	ldw	ra,4(sp)
   24a30:	df000017 	ldw	fp,0(sp)
   24a34:	dec00204 	addi	sp,sp,8
   24a38:	f800283a 	ret

00024a3c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   24a3c:	defffd04 	addi	sp,sp,-12
   24a40:	df000215 	stw	fp,8(sp)
   24a44:	df000204 	addi	fp,sp,8
   24a48:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   24a4c:	e0bffe17 	ldw	r2,-8(fp)
   24a50:	10800217 	ldw	r2,8(r2)
   24a54:	10d00034 	orhi	r3,r2,16384
   24a58:	e0bffe17 	ldw	r2,-8(fp)
   24a5c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   24a60:	e03fff15 	stw	zero,-4(fp)
   24a64:	00002306 	br	24af4 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   24a68:	e0ffff17 	ldw	r3,-4(fp)
   24a6c:	1805883a 	mov	r2,r3
   24a70:	1085883a 	add	r2,r2,r2
   24a74:	10c5883a 	add	r2,r2,r3
   24a78:	100490ba 	slli	r2,r2,2
   24a7c:	00c000b4 	movhi	r3,2
   24a80:	10c7883a 	add	r3,r2,r3
   24a84:	18d6a717 	ldw	r3,23196(r3)
   24a88:	e0bffe17 	ldw	r2,-8(fp)
   24a8c:	10800017 	ldw	r2,0(r2)
   24a90:	1880151e 	bne	r3,r2,24ae8 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   24a94:	e0ffff17 	ldw	r3,-4(fp)
   24a98:	1805883a 	mov	r2,r3
   24a9c:	1085883a 	add	r2,r2,r2
   24aa0:	10c5883a 	add	r2,r2,r3
   24aa4:	100490ba 	slli	r2,r2,2
   24aa8:	00c000b4 	movhi	r3,2
   24aac:	10c7883a 	add	r3,r2,r3
   24ab0:	1896a917 	ldw	r2,23204(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
   24ab4:	10000c0e 	bge	r2,zero,24ae8 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
   24ab8:	e0ffff17 	ldw	r3,-4(fp)
   24abc:	1805883a 	mov	r2,r3
   24ac0:	1085883a 	add	r2,r2,r2
   24ac4:	10c5883a 	add	r2,r2,r3
   24ac8:	100490ba 	slli	r2,r2,2
   24acc:	00c000b4 	movhi	r3,2
   24ad0:	18d6a704 	addi	r3,r3,23196
   24ad4:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   24ad8:	e0fffe17 	ldw	r3,-8(fp)
   24adc:	18800226 	beq	r3,r2,24ae8 <alt_file_locked+0xac>
    {
      return -EACCES;
   24ae0:	00bffcc4 	movi	r2,-13
   24ae4:	00000806 	br	24b08 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
   24ae8:	e0bfff17 	ldw	r2,-4(fp)
   24aec:	10800044 	addi	r2,r2,1
   24af0:	e0bfff15 	stw	r2,-4(fp)
   24af4:	d0a00817 	ldw	r2,-32736(gp)
   24af8:	1007883a 	mov	r3,r2
   24afc:	e0bfff17 	ldw	r2,-4(fp)
   24b00:	18bfd92e 	bgeu	r3,r2,24a68 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   24b04:	0005883a 	mov	r2,zero
}
   24b08:	e037883a 	mov	sp,fp
   24b0c:	df000017 	ldw	fp,0(sp)
   24b10:	dec00104 	addi	sp,sp,4
   24b14:	f800283a 	ret

00024b18 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   24b18:	defff604 	addi	sp,sp,-40
   24b1c:	dfc00915 	stw	ra,36(sp)
   24b20:	df000815 	stw	fp,32(sp)
   24b24:	df000804 	addi	fp,sp,32
   24b28:	e13ffa15 	stw	r4,-24(fp)
   24b2c:	e17ff915 	stw	r5,-28(fp)
   24b30:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   24b34:	00bfffc4 	movi	r2,-1
   24b38:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   24b3c:	00bffb44 	movi	r2,-19
   24b40:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   24b44:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   24b48:	d1600604 	addi	r5,gp,-32744
   24b4c:	e13ffa17 	ldw	r4,-24(fp)
   24b50:	0024c9c0 	call	24c9c <alt_find_dev>
   24b54:	e0bfff15 	stw	r2,-4(fp)
   24b58:	e0bfff17 	ldw	r2,-4(fp)
   24b5c:	1000051e 	bne	r2,zero,24b74 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   24b60:	e13ffa17 	ldw	r4,-24(fp)
   24b64:	0024d2c0 	call	24d2c <alt_find_file>
   24b68:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   24b6c:	00800044 	movi	r2,1
   24b70:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   24b74:	e0bfff17 	ldw	r2,-4(fp)
   24b78:	10002c26 	beq	r2,zero,24c2c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   24b7c:	e13fff17 	ldw	r4,-4(fp)
   24b80:	0024e340 	call	24e34 <alt_get_fd>
   24b84:	e0bffe15 	stw	r2,-8(fp)
   24b88:	e0bffe17 	ldw	r2,-8(fp)
   24b8c:	1000030e 	bge	r2,zero,24b9c <open+0x84>
    {
      status = index;
   24b90:	e0bffe17 	ldw	r2,-8(fp)
   24b94:	e0bffd15 	stw	r2,-12(fp)
   24b98:	00002606 	br	24c34 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   24b9c:	e0fffe17 	ldw	r3,-8(fp)
   24ba0:	1805883a 	mov	r2,r3
   24ba4:	1085883a 	add	r2,r2,r2
   24ba8:	10c5883a 	add	r2,r2,r3
   24bac:	100490ba 	slli	r2,r2,2
   24bb0:	00c000b4 	movhi	r3,2
   24bb4:	18d6a704 	addi	r3,r3,23196
   24bb8:	10c5883a 	add	r2,r2,r3
   24bbc:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   24bc0:	e0fff917 	ldw	r3,-28(fp)
   24bc4:	00900034 	movhi	r2,16384
   24bc8:	10bfffc4 	addi	r2,r2,-1
   24bcc:	1886703a 	and	r3,r3,r2
   24bd0:	e0bffb17 	ldw	r2,-20(fp)
   24bd4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   24bd8:	e0bffc17 	ldw	r2,-16(fp)
   24bdc:	1000051e 	bne	r2,zero,24bf4 <open+0xdc>
   24be0:	e13ffb17 	ldw	r4,-20(fp)
   24be4:	0024a3c0 	call	24a3c <alt_file_locked>
   24be8:	e0bffd15 	stw	r2,-12(fp)
   24bec:	e0bffd17 	ldw	r2,-12(fp)
   24bf0:	10001016 	blt	r2,zero,24c34 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   24bf4:	e0bfff17 	ldw	r2,-4(fp)
   24bf8:	10800317 	ldw	r2,12(r2)
   24bfc:	10000826 	beq	r2,zero,24c20 <open+0x108>
   24c00:	e0bfff17 	ldw	r2,-4(fp)
   24c04:	10800317 	ldw	r2,12(r2)
   24c08:	e1fff817 	ldw	r7,-32(fp)
   24c0c:	e1bff917 	ldw	r6,-28(fp)
   24c10:	e17ffa17 	ldw	r5,-24(fp)
   24c14:	e13ffb17 	ldw	r4,-20(fp)
   24c18:	103ee83a 	callr	r2
   24c1c:	00000106 	br	24c24 <open+0x10c>
   24c20:	0005883a 	mov	r2,zero
   24c24:	e0bffd15 	stw	r2,-12(fp)
   24c28:	00000206 	br	24c34 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   24c2c:	00bffb44 	movi	r2,-19
   24c30:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   24c34:	e0bffd17 	ldw	r2,-12(fp)
   24c38:	1000090e 	bge	r2,zero,24c60 <open+0x148>
  {
    alt_release_fd (index);  
   24c3c:	e13ffe17 	ldw	r4,-8(fp)
   24c40:	00238280 	call	23828 <alt_release_fd>
    ALT_ERRNO = -status;
   24c44:	0024a000 	call	24a00 <alt_get_errno>
   24c48:	1007883a 	mov	r3,r2
   24c4c:	e0bffd17 	ldw	r2,-12(fp)
   24c50:	0085c83a 	sub	r2,zero,r2
   24c54:	18800015 	stw	r2,0(r3)
    return -1;
   24c58:	00bfffc4 	movi	r2,-1
   24c5c:	00000106 	br	24c64 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   24c60:	e0bffe17 	ldw	r2,-8(fp)
}
   24c64:	e037883a 	mov	sp,fp
   24c68:	dfc00117 	ldw	ra,4(sp)
   24c6c:	df000017 	ldw	fp,0(sp)
   24c70:	dec00204 	addi	sp,sp,8
   24c74:	f800283a 	ret

00024c78 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   24c78:	deffff04 	addi	sp,sp,-4
   24c7c:	df000015 	stw	fp,0(sp)
   24c80:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   24c84:	000170fa 	wrctl	ienable,zero
}
   24c88:	0001883a 	nop
   24c8c:	e037883a 	mov	sp,fp
   24c90:	df000017 	ldw	fp,0(sp)
   24c94:	dec00104 	addi	sp,sp,4
   24c98:	f800283a 	ret

00024c9c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   24c9c:	defffa04 	addi	sp,sp,-24
   24ca0:	dfc00515 	stw	ra,20(sp)
   24ca4:	df000415 	stw	fp,16(sp)
   24ca8:	df000404 	addi	fp,sp,16
   24cac:	e13ffd15 	stw	r4,-12(fp)
   24cb0:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   24cb4:	e0bffc17 	ldw	r2,-16(fp)
   24cb8:	10800017 	ldw	r2,0(r2)
   24cbc:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   24cc0:	e13ffd17 	ldw	r4,-12(fp)
   24cc4:	00203900 	call	20390 <strlen>
   24cc8:	10800044 	addi	r2,r2,1
   24ccc:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   24cd0:	00000d06 	br	24d08 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   24cd4:	e0bfff17 	ldw	r2,-4(fp)
   24cd8:	10800217 	ldw	r2,8(r2)
   24cdc:	e0fffe17 	ldw	r3,-8(fp)
   24ce0:	180d883a 	mov	r6,r3
   24ce4:	e17ffd17 	ldw	r5,-12(fp)
   24ce8:	1009883a 	mov	r4,r2
   24cec:	0024fa80 	call	24fa8 <memcmp>
   24cf0:	1000021e 	bne	r2,zero,24cfc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   24cf4:	e0bfff17 	ldw	r2,-4(fp)
   24cf8:	00000706 	br	24d18 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   24cfc:	e0bfff17 	ldw	r2,-4(fp)
   24d00:	10800017 	ldw	r2,0(r2)
   24d04:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   24d08:	e0ffff17 	ldw	r3,-4(fp)
   24d0c:	e0bffc17 	ldw	r2,-16(fp)
   24d10:	18bff01e 	bne	r3,r2,24cd4 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   24d14:	0005883a 	mov	r2,zero
}
   24d18:	e037883a 	mov	sp,fp
   24d1c:	dfc00117 	ldw	ra,4(sp)
   24d20:	df000017 	ldw	fp,0(sp)
   24d24:	dec00204 	addi	sp,sp,8
   24d28:	f800283a 	ret

00024d2c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   24d2c:	defffb04 	addi	sp,sp,-20
   24d30:	dfc00415 	stw	ra,16(sp)
   24d34:	df000315 	stw	fp,12(sp)
   24d38:	df000304 	addi	fp,sp,12
   24d3c:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   24d40:	d0a00417 	ldw	r2,-32752(gp)
   24d44:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   24d48:	00003106 	br	24e10 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   24d4c:	e0bfff17 	ldw	r2,-4(fp)
   24d50:	10800217 	ldw	r2,8(r2)
   24d54:	1009883a 	mov	r4,r2
   24d58:	00203900 	call	20390 <strlen>
   24d5c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   24d60:	e0bfff17 	ldw	r2,-4(fp)
   24d64:	10c00217 	ldw	r3,8(r2)
   24d68:	e0bffe17 	ldw	r2,-8(fp)
   24d6c:	10bfffc4 	addi	r2,r2,-1
   24d70:	1885883a 	add	r2,r3,r2
   24d74:	10800003 	ldbu	r2,0(r2)
   24d78:	10803fcc 	andi	r2,r2,255
   24d7c:	1080201c 	xori	r2,r2,128
   24d80:	10bfe004 	addi	r2,r2,-128
   24d84:	10800bd8 	cmpnei	r2,r2,47
   24d88:	1000031e 	bne	r2,zero,24d98 <alt_find_file+0x6c>
    {
      len -= 1;
   24d8c:	e0bffe17 	ldw	r2,-8(fp)
   24d90:	10bfffc4 	addi	r2,r2,-1
   24d94:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   24d98:	e0bffe17 	ldw	r2,-8(fp)
   24d9c:	e0fffd17 	ldw	r3,-12(fp)
   24da0:	1885883a 	add	r2,r3,r2
   24da4:	10800003 	ldbu	r2,0(r2)
   24da8:	10803fcc 	andi	r2,r2,255
   24dac:	1080201c 	xori	r2,r2,128
   24db0:	10bfe004 	addi	r2,r2,-128
   24db4:	10800be0 	cmpeqi	r2,r2,47
   24db8:	1000081e 	bne	r2,zero,24ddc <alt_find_file+0xb0>
   24dbc:	e0bffe17 	ldw	r2,-8(fp)
   24dc0:	e0fffd17 	ldw	r3,-12(fp)
   24dc4:	1885883a 	add	r2,r3,r2
   24dc8:	10800003 	ldbu	r2,0(r2)
   24dcc:	10803fcc 	andi	r2,r2,255
   24dd0:	1080201c 	xori	r2,r2,128
   24dd4:	10bfe004 	addi	r2,r2,-128
   24dd8:	10000a1e 	bne	r2,zero,24e04 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   24ddc:	e0bfff17 	ldw	r2,-4(fp)
   24de0:	10800217 	ldw	r2,8(r2)
   24de4:	e0fffe17 	ldw	r3,-8(fp)
   24de8:	180d883a 	mov	r6,r3
   24dec:	e17ffd17 	ldw	r5,-12(fp)
   24df0:	1009883a 	mov	r4,r2
   24df4:	0024fa80 	call	24fa8 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   24df8:	1000021e 	bne	r2,zero,24e04 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   24dfc:	e0bfff17 	ldw	r2,-4(fp)
   24e00:	00000706 	br	24e20 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   24e04:	e0bfff17 	ldw	r2,-4(fp)
   24e08:	10800017 	ldw	r2,0(r2)
   24e0c:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   24e10:	e0ffff17 	ldw	r3,-4(fp)
   24e14:	d0a00404 	addi	r2,gp,-32752
   24e18:	18bfcc1e 	bne	r3,r2,24d4c <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   24e1c:	0005883a 	mov	r2,zero
}
   24e20:	e037883a 	mov	sp,fp
   24e24:	dfc00117 	ldw	ra,4(sp)
   24e28:	df000017 	ldw	fp,0(sp)
   24e2c:	dec00204 	addi	sp,sp,8
   24e30:	f800283a 	ret

00024e34 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   24e34:	defffc04 	addi	sp,sp,-16
   24e38:	df000315 	stw	fp,12(sp)
   24e3c:	df000304 	addi	fp,sp,12
   24e40:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   24e44:	00bffa04 	movi	r2,-24
   24e48:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   24e4c:	e03fff15 	stw	zero,-4(fp)
   24e50:	00001d06 	br	24ec8 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   24e54:	e0ffff17 	ldw	r3,-4(fp)
   24e58:	1805883a 	mov	r2,r3
   24e5c:	1085883a 	add	r2,r2,r2
   24e60:	10c5883a 	add	r2,r2,r3
   24e64:	100490ba 	slli	r2,r2,2
   24e68:	00c000b4 	movhi	r3,2
   24e6c:	10c7883a 	add	r3,r2,r3
   24e70:	1896a717 	ldw	r2,23196(r3)
   24e74:	1000111e 	bne	r2,zero,24ebc <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   24e78:	e0ffff17 	ldw	r3,-4(fp)
   24e7c:	1805883a 	mov	r2,r3
   24e80:	1085883a 	add	r2,r2,r2
   24e84:	10c5883a 	add	r2,r2,r3
   24e88:	100490ba 	slli	r2,r2,2
   24e8c:	e13ffd17 	ldw	r4,-12(fp)
   24e90:	00c000b4 	movhi	r3,2
   24e94:	10c7883a 	add	r3,r2,r3
   24e98:	1916a715 	stw	r4,23196(r3)
      if (i > alt_max_fd)
   24e9c:	d0e00817 	ldw	r3,-32736(gp)
   24ea0:	e0bfff17 	ldw	r2,-4(fp)
   24ea4:	1880020e 	bge	r3,r2,24eb0 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   24ea8:	e0bfff17 	ldw	r2,-4(fp)
   24eac:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   24eb0:	e0bfff17 	ldw	r2,-4(fp)
   24eb4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   24eb8:	00000706 	br	24ed8 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
   24ebc:	e0bfff17 	ldw	r2,-4(fp)
   24ec0:	10800044 	addi	r2,r2,1
   24ec4:	e0bfff15 	stw	r2,-4(fp)
   24ec8:	e0bfff17 	ldw	r2,-4(fp)
   24ecc:	10800810 	cmplti	r2,r2,32
   24ed0:	103fe01e 	bne	r2,zero,24e54 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   24ed4:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   24ed8:	e0bffe17 	ldw	r2,-8(fp)
}
   24edc:	e037883a 	mov	sp,fp
   24ee0:	df000017 	ldw	fp,0(sp)
   24ee4:	dec00104 	addi	sp,sp,4
   24ee8:	f800283a 	ret

00024eec <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   24eec:	defffe04 	addi	sp,sp,-8
   24ef0:	df000115 	stw	fp,4(sp)
   24ef4:	df000104 	addi	fp,sp,4
   24ef8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   24efc:	e0bfff17 	ldw	r2,-4(fp)
   24f00:	10bffe84 	addi	r2,r2,-6
   24f04:	10c00428 	cmpgeui	r3,r2,16
   24f08:	18c03fcc 	andi	r3,r3,255
   24f0c:	18000f1e 	bne	r3,zero,24f4c <alt_exception_cause_generated_bad_addr+0x60>
   24f10:	00c00044 	movi	r3,1
   24f14:	1884983a 	sll	r2,r3,r2
   24f18:	10e2c8cc 	andi	r3,r2,35619
   24f1c:	1806c03a 	cmpne	r3,r3,zero
   24f20:	18c03fcc 	andi	r3,r3,255
   24f24:	1800051e 	bne	r3,zero,24f3c <alt_exception_cause_generated_bad_addr+0x50>
   24f28:	1084100c 	andi	r2,r2,4160
   24f2c:	1004c03a 	cmpne	r2,r2,zero
   24f30:	10803fcc 	andi	r2,r2,255
   24f34:	1000031e 	bne	r2,zero,24f44 <alt_exception_cause_generated_bad_addr+0x58>
   24f38:	00000406 	br	24f4c <alt_exception_cause_generated_bad_addr+0x60>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   24f3c:	00800044 	movi	r2,1
   24f40:	00000306 	br	24f50 <alt_exception_cause_generated_bad_addr+0x64>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   24f44:	0005883a 	mov	r2,zero
   24f48:	00000106 	br	24f50 <alt_exception_cause_generated_bad_addr+0x64>

  default:
    return 0;
   24f4c:	0005883a 	mov	r2,zero
  }
}
   24f50:	e037883a 	mov	sp,fp
   24f54:	df000017 	ldw	fp,0(sp)
   24f58:	dec00104 	addi	sp,sp,4
   24f5c:	f800283a 	ret

00024f60 <atexit>:
   24f60:	200b883a 	mov	r5,r4
   24f64:	000f883a 	mov	r7,zero
   24f68:	000d883a 	mov	r6,zero
   24f6c:	0009883a 	mov	r4,zero
   24f70:	00250201 	jmpi	25020 <__register_exitproc>

00024f74 <exit>:
   24f74:	defffe04 	addi	sp,sp,-8
   24f78:	000b883a 	mov	r5,zero
   24f7c:	dc000015 	stw	r16,0(sp)
   24f80:	dfc00115 	stw	ra,4(sp)
   24f84:	2021883a 	mov	r16,r4
   24f88:	00250b00 	call	250b0 <__call_exitprocs>
   24f8c:	008000b4 	movhi	r2,2
   24f90:	11173817 	ldw	r4,23776(r2)
   24f94:	20800f17 	ldw	r2,60(r4)
   24f98:	10000126 	beq	r2,zero,24fa0 <exit+0x2c>
   24f9c:	103ee83a 	callr	r2
   24fa0:	8009883a 	mov	r4,r16
   24fa4:	00251d00 	call	251d0 <_exit>

00024fa8 <memcmp>:
   24fa8:	30800128 	cmpgeui	r2,r6,4
   24fac:	10000d26 	beq	r2,zero,24fe4 <memcmp+0x3c>
   24fb0:	2144b03a 	or	r2,r4,r5
   24fb4:	108000cc 	andi	r2,r2,3
   24fb8:	10000726 	beq	r2,zero,24fd8 <memcmp+0x30>
   24fbc:	30bfffc4 	addi	r2,r6,-1
   24fc0:	00000a06 	br	24fec <memcmp+0x44>
   24fc4:	31bfff04 	addi	r6,r6,-4
   24fc8:	30800128 	cmpgeui	r2,r6,4
   24fcc:	21000104 	addi	r4,r4,4
   24fd0:	29400104 	addi	r5,r5,4
   24fd4:	10000326 	beq	r2,zero,24fe4 <memcmp+0x3c>
   24fd8:	20c00017 	ldw	r3,0(r4)
   24fdc:	28800017 	ldw	r2,0(r5)
   24fe0:	18bff826 	beq	r3,r2,24fc4 <memcmp+0x1c>
   24fe4:	30bfffc4 	addi	r2,r6,-1
   24fe8:	30000b26 	beq	r6,zero,25018 <memcmp+0x70>
   24fec:	11800044 	addi	r6,r2,1
   24ff0:	218d883a 	add	r6,r4,r6
   24ff4:	00000106 	br	24ffc <memcmp+0x54>
   24ff8:	21800726 	beq	r4,r6,25018 <memcmp+0x70>
   24ffc:	20800003 	ldbu	r2,0(r4)
   25000:	28c00003 	ldbu	r3,0(r5)
   25004:	21000044 	addi	r4,r4,1
   25008:	29400044 	addi	r5,r5,1
   2500c:	10fffa26 	beq	r2,r3,24ff8 <memcmp+0x50>
   25010:	10c5c83a 	sub	r2,r2,r3
   25014:	f800283a 	ret
   25018:	0005883a 	mov	r2,zero
   2501c:	f800283a 	ret

00025020 <__register_exitproc>:
   25020:	008000b4 	movhi	r2,2
   25024:	10d73817 	ldw	r3,23776(r2)
   25028:	18805217 	ldw	r2,328(r3)
   2502c:	10001726 	beq	r2,zero,2508c <__register_exitproc+0x6c>
   25030:	10c00117 	ldw	r3,4(r2)
   25034:	1a000808 	cmpgei	r8,r3,32
   25038:	40001b1e 	bne	r8,zero,250a8 <__register_exitproc+0x88>
   2503c:	20000b26 	beq	r4,zero,2506c <__register_exitproc+0x4c>
   25040:	181090ba 	slli	r8,r3,2
   25044:	02400044 	movi	r9,1
   25048:	48d2983a 	sll	r9,r9,r3
   2504c:	1211883a 	add	r8,r2,r8
   25050:	41802215 	stw	r6,136(r8)
   25054:	11806217 	ldw	r6,392(r2)
   25058:	21000098 	cmpnei	r4,r4,2
   2505c:	324cb03a 	or	r6,r6,r9
   25060:	11806215 	stw	r6,392(r2)
   25064:	41c04215 	stw	r7,264(r8)
   25068:	20000b26 	beq	r4,zero,25098 <__register_exitproc+0x78>
   2506c:	19000084 	addi	r4,r3,2
   25070:	200890ba 	slli	r4,r4,2
   25074:	18c00044 	addi	r3,r3,1
   25078:	10c00115 	stw	r3,4(r2)
   2507c:	1105883a 	add	r2,r2,r4
   25080:	11400015 	stw	r5,0(r2)
   25084:	0005883a 	mov	r2,zero
   25088:	f800283a 	ret
   2508c:	18805304 	addi	r2,r3,332
   25090:	18805215 	stw	r2,328(r3)
   25094:	003fe606 	br	25030 <__register_exitproc+0x10>
   25098:	11006317 	ldw	r4,396(r2)
   2509c:	2248b03a 	or	r4,r4,r9
   250a0:	11006315 	stw	r4,396(r2)
   250a4:	003ff106 	br	2506c <__register_exitproc+0x4c>
   250a8:	00bfffc4 	movi	r2,-1
   250ac:	f800283a 	ret

000250b0 <__call_exitprocs>:
   250b0:	defff704 	addi	sp,sp,-36
   250b4:	008000b4 	movhi	r2,2
   250b8:	dcc00315 	stw	r19,12(sp)
   250bc:	14d73817 	ldw	r19,23776(r2)
   250c0:	dc800215 	stw	r18,8(sp)
   250c4:	dfc00815 	stw	ra,32(sp)
   250c8:	9c805217 	ldw	r18,328(r19)
   250cc:	ddc00715 	stw	r23,28(sp)
   250d0:	dd800615 	stw	r22,24(sp)
   250d4:	dd400515 	stw	r21,20(sp)
   250d8:	dd000415 	stw	r20,16(sp)
   250dc:	dc400115 	stw	r17,4(sp)
   250e0:	dc000015 	stw	r16,0(sp)
   250e4:	90001026 	beq	r18,zero,25128 <__call_exitprocs+0x78>
   250e8:	202b883a 	mov	r21,r4
   250ec:	282d883a 	mov	r22,r5
   250f0:	05000044 	movi	r20,1
   250f4:	94000117 	ldw	r16,4(r18)
   250f8:	847fffc4 	addi	r17,r16,-1
   250fc:	88000a16 	blt	r17,zero,25128 <__call_exitprocs+0x78>
   25100:	84000044 	addi	r16,r16,1
   25104:	802090ba 	slli	r16,r16,2
   25108:	9421883a 	add	r16,r18,r16
   2510c:	b0001126 	beq	r22,zero,25154 <__call_exitprocs+0xa4>
   25110:	80804017 	ldw	r2,256(r16)
   25114:	15800f26 	beq	r2,r22,25154 <__call_exitprocs+0xa4>
   25118:	8c7fffc4 	addi	r17,r17,-1
   2511c:	88bfffd8 	cmpnei	r2,r17,-1
   25120:	843fff04 	addi	r16,r16,-4
   25124:	103ff91e 	bne	r2,zero,2510c <__call_exitprocs+0x5c>
   25128:	dfc00817 	ldw	ra,32(sp)
   2512c:	ddc00717 	ldw	r23,28(sp)
   25130:	dd800617 	ldw	r22,24(sp)
   25134:	dd400517 	ldw	r21,20(sp)
   25138:	dd000417 	ldw	r20,16(sp)
   2513c:	dcc00317 	ldw	r19,12(sp)
   25140:	dc800217 	ldw	r18,8(sp)
   25144:	dc400117 	ldw	r17,4(sp)
   25148:	dc000017 	ldw	r16,0(sp)
   2514c:	dec00904 	addi	sp,sp,36
   25150:	f800283a 	ret
   25154:	90800117 	ldw	r2,4(r18)
   25158:	81800017 	ldw	r6,0(r16)
   2515c:	10bfffc4 	addi	r2,r2,-1
   25160:	14401726 	beq	r2,r17,251c0 <__call_exitprocs+0x110>
   25164:	80000015 	stw	zero,0(r16)
   25168:	303feb26 	beq	r6,zero,25118 <__call_exitprocs+0x68>
   2516c:	a446983a 	sll	r3,r20,r17
   25170:	90806217 	ldw	r2,392(r18)
   25174:	95c00117 	ldw	r23,4(r18)
   25178:	1884703a 	and	r2,r3,r2
   2517c:	1000081e 	bne	r2,zero,251a0 <__call_exitprocs+0xf0>
   25180:	303ee83a 	callr	r6
   25184:	90c00117 	ldw	r3,4(r18)
   25188:	98805217 	ldw	r2,328(r19)
   2518c:	1dc0011e 	bne	r3,r23,25194 <__call_exitprocs+0xe4>
   25190:	14bfe126 	beq	r2,r18,25118 <__call_exitprocs+0x68>
   25194:	103fe426 	beq	r2,zero,25128 <__call_exitprocs+0x78>
   25198:	1025883a 	mov	r18,r2
   2519c:	003fd506 	br	250f4 <__call_exitprocs+0x44>
   251a0:	90806317 	ldw	r2,396(r18)
   251a4:	81002017 	ldw	r4,128(r16)
   251a8:	1886703a 	and	r3,r3,r2
   251ac:	1800061e 	bne	r3,zero,251c8 <__call_exitprocs+0x118>
   251b0:	200b883a 	mov	r5,r4
   251b4:	a809883a 	mov	r4,r21
   251b8:	303ee83a 	callr	r6
   251bc:	003ff106 	br	25184 <__call_exitprocs+0xd4>
   251c0:	94400115 	stw	r17,4(r18)
   251c4:	003fe806 	br	25168 <__call_exitprocs+0xb8>
   251c8:	303ee83a 	callr	r6
   251cc:	003fed06 	br	25184 <__call_exitprocs+0xd4>

000251d0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   251d0:	defffd04 	addi	sp,sp,-12
   251d4:	df000215 	stw	fp,8(sp)
   251d8:	df000204 	addi	fp,sp,8
   251dc:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   251e0:	0001883a 	nop
   251e4:	e0bffe17 	ldw	r2,-8(fp)
   251e8:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   251ec:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   251f0:	10000226 	beq	r2,zero,251fc <_exit+0x2c>
    ALT_SIM_FAIL();
   251f4:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   251f8:	00000106 	br	25200 <_exit+0x30>
    ALT_SIM_PASS();
   251fc:	002af0b0 	cmpltui	zero,zero,43970
}
   25200:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   25204:	0001883a 	nop
   25208:	003ffe06 	br	25204 <_exit+0x34>
