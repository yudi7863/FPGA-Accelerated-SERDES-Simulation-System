
hello.elf:     file format elf32-littlenios2
hello.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020020

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00000464 memsz 0x00000464 flags r-x
    LOAD off    0x00001484 vaddr 0x00020484 paddr 0x0002089c align 2**12
         filesz 0x00000418 memsz 0x00000418 flags rw-
    LOAD off    0x00000cb4 vaddr 0x00020cb4 paddr 0x00020cb4 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00020020  00020020  0000189c  2**0
                  CONTENTS
  2 .text         0000044c  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  0002046c  0002046c  0000146c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000418  00020484  0002089c  00001484  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00020cb4  00020cb4  00001cb4  2**2
                  ALLOC, SMALL_DATA
  6 .on_chip_mem  00000000  00020cc4  00020cc4  0000189c  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  0000189c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001b8  00000000  00000000  000018d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00000edc  00000000  00000000  00001a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000971  00000000  00000000  00002964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   000008c6  00000000  00000000  000032d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  000001ec  00000000  00000000  00003b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00000488  00000000  00000000  00003d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000010  00000000  00000000  00004210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000020  00000000  00000000  00004220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 000003ee  00000000  00000000  00004240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000090  00000000  00000000  0000462e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000743  00000000  00000000  000046be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  00005c85  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  00005c88  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  00005c94  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  00005c95  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000006  00000000  00000000  00005c96  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000006  00000000  00000000  00005c9c  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000006  00000000  00000000  00005ca2  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000009  00000000  00000000  00005ca8  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000057  00000000  00000000  00005cb1  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000308a8  00000000  00000000  00005d08  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020020 l    d  .text	00000000 .text
0002046c l    d  .rodata	00000000 .rodata
00020484 l    d  .rwdata	00000000 .rwdata
00020cb4 l    d  .bss	00000000 .bss
00020cc4 l    d  .on_chip_mem	00000000 .on_chip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 crt0.o
00020058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcpy.c
000201d4 g     F .text	0000002c alt_main
0002089c g       *ABS*	00000000 __flash_rwdata_start
0002043c g     F .text	00000008 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00020cc0 g     O .bss	00000004 errno
00020000 g       *ABS*	00000000 __alt_mem_on_chip_mem
00020cb8 g     O .bss	00000004 alt_argv
00028894 g       *ABS*	00000000 _gp
00020444 g     F .text	00000028 memcpy
00020484 g     O .rwdata	00000010 PULSE_RESPONSE_VALS
00020cc4 g       *ABS*	00000000 __bss_end
00020434 g     F .text	00000004 alt_dcache_flush_all
0002089c g       *ABS*	00000000 __ram_rwdata_end
00020484 g       *ABS*	00000000 __ram_rodata_end
00020cc4 g       *ABS*	00000000 end
00020494 g     O .rwdata	00000400 SIGMA10
000203b0 g     F .text	00000084 altera_avalon_uart_write
00031800 g       *ABS*	00000000 __alt_stack_pointer
00020200 g     F .text	00000144 alt_printf
00020020 g     F .text	0000003c _start
000203ac g     F .text	00000004 alt_sys_init
00020484 g       *ABS*	00000000 __ram_rwdata_start
0002046c g       *ABS*	00000000 __ram_rodata_start
00020cc4 g       *ABS*	00000000 __alt_stack_base
00020cb4 g       *ABS*	00000000 __bss_start
0002005c g     F .text	000000f4 main
00020cb4 g     O .bss	00000004 alt_envp
00020894 g     O .rwdata	00000004 uart_0
00020898 g     O .rwdata	00000004 alt_errno
0002046c g       *ABS*	00000000 __flash_rodata_start
0002038c g     F .text	00000020 alt_irq_init
00020cbc g     O .bss	00000004 alt_argc
00020020 g       *ABS*	00000000 __ram_exceptions_start
0002089c g       *ABS*	00000000 _edata
00020cc4 g       *ABS*	00000000 _end
00020020 g       *ABS*	00000000 __ram_exceptions_end
00031800 g       *ABS*	00000000 __alt_data_end
0002000c g       .entry	00000000 _exit
00020344 g     F .text	00000048 alt_putchar
00020438 g     F .text	00000004 alt_icache_flush_all
00020150 g     F .text	00000084 alt_load



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08400814 	ori	at,at,32
    jmp r1
   20008:	0800683a 	jmp	at

0002000c <_exit>:
	...

Disassembly of section .text:

00020020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20020:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20024:	dec60014 	ori	sp,sp,6144
    movhi gp, %hi(_gp)
   20028:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   2002c:	d6a22514 	ori	gp,gp,34964
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20030:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20034:	10832d14 	ori	r2,r2,3252

    movhi r3, %hi(__bss_end)
   20038:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2003c:	18c33114 	ori	r3,r3,3268

    beq r2, r3, 1f
   20040:	10c00326 	beq	r2,r3,20050 <_start+0x30>

0:
    stw zero, (r2)
   20044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2004c:	10fffd36 	bltu	r2,r3,20044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20050:	00201500 	call	20150 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20054:	00201d40 	call	201d4 <alt_main>

00020058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20058:	003fff06 	br	20058 <alt_after_alt_main>

0002005c <main>:
		//0x00000000001a0008

};

int main()
{
   2005c:	defffa04 	addi	sp,sp,-24
  //printf("Hello from Nios II!\n");
	//assigning values to SIGMA6:


	volatile uint32_t * ocm_base = (uint32_t *) ON_CHIP_MEM_BASE;
	volatile uint32_t total_bits = 0;// = 0x1234DEAD;
   20060:	008000b4 	movhi	r2,2
	//*(ocm_base+2) = value;
	//*(ocm_base+3) = value;

	//writing sigma_6 values into ocm:
	for(int i = 0; i < 128; i = i + 1){ //this starts at 1C0;
		*(ocm_base+i*4+864) = (uint32_t)(SIGMA10[i] >> 32); //upper
   20064:	014000b4 	movhi	r5,2
{
   20068:	dfc00515 	stw	ra,20(sp)
	volatile uint32_t total_bits = 0;// = 0x1234DEAD;
   2006c:	d8000015 	stw	zero,0(sp)
   20070:	10836004 	addi	r2,r2,3456
	for(int i = 0; i < 128; i = i + 1){ //this starts at 1C0;
   20074:	0009883a 	mov	r4,zero
		*(ocm_base+i*4+864) = (uint32_t)(SIGMA10[i] >> 32); //upper
   20078:	29412504 	addi	r5,r5,1172
   2007c:	200690fa 	slli	r3,r4,3
	for(int i = 0; i < 128; i = i + 1){ //this starts at 1C0;
   20080:	21000044 	addi	r4,r4,1
   20084:	10800404 	addi	r2,r2,16
		*(ocm_base+i*4+864) = (uint32_t)(SIGMA10[i] >> 32); //upper
   20088:	28c7883a 	add	r3,r5,r3
   2008c:	19800017 	ldw	r6,0(r3)
   20090:	19800117 	ldw	r6,4(r3)
   20094:	11bffc15 	stw	r6,-16(r2)
		*(ocm_base+i*4+1+864) = (uint32_t)SIGMA10[i]; //lower //1c0
   20098:	19800017 	ldw	r6,0(r3)
   2009c:	18c00117 	ldw	r3,4(r3)
   200a0:	11bffd15 	stw	r6,-12(r2)
	for(int i = 0; i < 128; i = i + 1){ //this starts at 1C0;
   200a4:	20c02018 	cmpnei	r3,r4,128
   200a8:	183ff41e 	bne	r3,zero,2007c <main+0x20>
	}
	//writing channel: channel starting at 1580 and 1584:  1376:
	for(int i = 0; i < 2; i = i + 1){
		*(ocm_base+(i)*4+1376) = (uint32_t)(PULSE_RESPONSE_VALS[i] >> 32); //upper
   200ac:	008000b4 	movhi	r2,2
   200b0:	10812104 	addi	r2,r2,1156
   200b4:	00c000b4 	movhi	r3,2
   200b8:	18c12117 	ldw	r3,1156(r3)
   200bc:	11000117 	ldw	r4,4(r2)
   200c0:	00c000b4 	movhi	r3,2
   200c4:	19056015 	stw	r4,5504(r3)
		*(ocm_base+(i)*4+1+1376) = (uint32_t)PULSE_RESPONSE_VALS[i]; //lower //1c0
   200c8:	00c000b4 	movhi	r3,2
   200cc:	19012117 	ldw	r4,1156(r3)
   200d0:	10c00117 	ldw	r3,4(r2)
   200d4:	00c000b4 	movhi	r3,2
   200d8:	19056115 	stw	r4,5508(r3)
		*(ocm_base+(i)*4+1376) = (uint32_t)(PULSE_RESPONSE_VALS[i] >> 32); //upper
   200dc:	10c00217 	ldw	r3,8(r2)
   200e0:	11000317 	ldw	r4,12(r2)
   200e4:	00c000b4 	movhi	r3,2
   200e8:	19056415 	stw	r4,5520(r3)
		*(ocm_base+(i)*4+1+1376) = (uint32_t)PULSE_RESPONSE_VALS[i]; //lower //1c0
   200ec:	10c00217 	ldw	r3,8(r2)
   200f0:	10800317 	ldw	r2,12(r2)
//count = count + 2;
		//BER = ((double) total_bit_errors) / ((double) total_bits);
		//alt_printf("total bits: %x\n", total_bits);
		//alt_printf("total bit errors: %x\n", total_bit_errors);
	//}
	alt_printf("total bit errors: %x\n", total_bit_errors);
   200f4:	010000b4 	movhi	r4,2
		*(ocm_base+(i)*4+1+1376) = (uint32_t)PULSE_RESPONSE_VALS[i]; //lower //1c0
   200f8:	008000b4 	movhi	r2,2
   200fc:	10c56515 	stw	r3,5524(r2)
	volatile uint32_t total_bit_errors = 0;
   20100:	d8000115 	stw	zero,4(sp)
	volatile double BER = 0.0;
   20104:	d8000315 	stw	zero,12(sp)
   20108:	d8000415 	stw	zero,16(sp)
	volatile int count = 0; //should be at 144
   2010c:	d8000215 	stw	zero,8(sp)
		*(ocm_base+1440) = 0x1;
   20110:	00c00044 	movi	r3,1
   20114:	10c5a015 	stw	r3,5760(r2)
		*(ocm_base+1440) = 0x2;
   20118:	00c00084 	movi	r3,2
   2011c:	10c5a015 	stw	r3,5760(r2)
		total_bits = *(ocm_base+1408); //this is 12 //this is 2C0 in quartus total bits:
   20120:	10858017 	ldw	r2,5632(r2)
	alt_printf("total bit errors: %x\n", total_bit_errors);
   20124:	21011b04 	addi	r4,r4,1132
		total_bits = *(ocm_base+1408); //this is 12 //this is 2C0 in quartus total bits:
   20128:	d8800015 	stw	r2,0(sp)
		total_bit_errors = *(ocm_base+1412); // this is 14 1610
   2012c:	008000b4 	movhi	r2,2
   20130:	10858417 	ldw	r2,5648(r2)
   20134:	d8800115 	stw	r2,4(sp)
	alt_printf("total bit errors: %x\n", total_bit_errors);
   20138:	d9400117 	ldw	r5,4(sp)
   2013c:	00202000 	call	20200 <alt_printf>
  return 0;
}
   20140:	0005883a 	mov	r2,zero
   20144:	dfc00517 	ldw	ra,20(sp)
   20148:	dec00604 	addi	sp,sp,24
   2014c:	f800283a 	ret

00020150 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   20150:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   20154:	010000b4 	movhi	r4,2
   20158:	014000b4 	movhi	r5,2
   2015c:	dfc00015 	stw	ra,0(sp)
   20160:	21012104 	addi	r4,r4,1156
   20164:	29422704 	addi	r5,r5,2204
   20168:	21400426 	beq	r4,r5,2017c <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
   2016c:	018000b4 	movhi	r6,2
   20170:	31822704 	addi	r6,r6,2204
   20174:	310dc83a 	sub	r6,r6,r4
   20178:	00204440 	call	20444 <memcpy>
  if (to != from)
   2017c:	010000b4 	movhi	r4,2
   20180:	014000b4 	movhi	r5,2
   20184:	21000804 	addi	r4,r4,32
   20188:	29400804 	addi	r5,r5,32
   2018c:	21400426 	beq	r4,r5,201a0 <alt_load+0x50>
      *to++ = *from++;
   20190:	018000b4 	movhi	r6,2
   20194:	31800804 	addi	r6,r6,32
   20198:	310dc83a 	sub	r6,r6,r4
   2019c:	00204440 	call	20444 <memcpy>
  if (to != from)
   201a0:	010000b4 	movhi	r4,2
   201a4:	014000b4 	movhi	r5,2
   201a8:	21011b04 	addi	r4,r4,1132
   201ac:	29411b04 	addi	r5,r5,1132
   201b0:	21400426 	beq	r4,r5,201c4 <alt_load+0x74>
      *to++ = *from++;
   201b4:	018000b4 	movhi	r6,2
   201b8:	31812104 	addi	r6,r6,1156
   201bc:	310dc83a 	sub	r6,r6,r4
   201c0:	00204440 	call	20444 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   201c4:	00204340 	call	20434 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   201c8:	dfc00017 	ldw	ra,0(sp)
   201cc:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
   201d0:	00204381 	jmpi	20438 <alt_icache_flush_all>

000201d4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   201d4:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   201d8:	0009883a 	mov	r4,zero
{
   201dc:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
   201e0:	002038c0 	call	2038c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   201e4:	00203ac0 	call	203ac <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   201e8:	d1a10817 	ldw	r6,-31712(gp)
   201ec:	d1610917 	ldw	r5,-31708(gp)
   201f0:	d1210a17 	ldw	r4,-31704(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   201f4:	dfc00017 	ldw	ra,0(sp)
   201f8:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
   201fc:	002005c1 	jmpi	2005c <main>

00020200 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   20200:	defff704 	addi	sp,sp,-36
   20204:	dc400115 	stw	r17,4(sp)
   20208:	2023883a 	mov	r17,r4
   2020c:	dfc00515 	stw	ra,20(sp)
   20210:	dd000415 	stw	r20,16(sp)
   20214:	dcc00315 	stw	r19,12(sp)
   20218:	dc800215 	stw	r18,8(sp)
   2021c:	dc000015 	stw	r16,0(sp)
   20220:	d9400615 	stw	r5,24(sp)
   20224:	d9800715 	stw	r6,28(sp)
   20228:	d9c00815 	stw	r7,32(sp)
	va_list args;
	va_start(args, fmt);
   2022c:	dc000604 	addi	r16,sp,24
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   20230:	89000007 	ldb	r4,0(r17)
   20234:	2000081e 	bne	r4,zero,20258 <alt_printf+0x58>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   20238:	dfc00517 	ldw	ra,20(sp)
   2023c:	dd000417 	ldw	r20,16(sp)
   20240:	dcc00317 	ldw	r19,12(sp)
   20244:	dc800217 	ldw	r18,8(sp)
   20248:	dc400117 	ldw	r17,4(sp)
   2024c:	dc000017 	ldw	r16,0(sp)
   20250:	dec00904 	addi	sp,sp,36
   20254:	f800283a 	ret
        if (c != '%')
   20258:	20800960 	cmpeqi	r2,r4,37
   2025c:	1000031e 	bne	r2,zero,2026c <alt_printf+0x6c>
    while ((c = *w++) != 0)
   20260:	8c400044 	addi	r17,r17,1
            alt_putchar(c);
   20264:	00203440 	call	20344 <alt_putchar>
   20268:	003ff106 	br	20230 <alt_printf+0x30>
            if ((c = *w++) != 0)
   2026c:	88800047 	ldb	r2,1(r17)
   20270:	103ff126 	beq	r2,zero,20238 <alt_printf+0x38>
                if (c == '%')
   20274:	10c00958 	cmpnei	r3,r2,37
   20278:	1800031e 	bne	r3,zero,20288 <alt_printf+0x88>
                    alt_putchar(c);
   2027c:	01000944 	movi	r4,37
                        alt_putchar('0');
   20280:	00203440 	call	20344 <alt_putchar>
                        continue;
   20284:	00000606 	br	202a0 <alt_printf+0xa0>
                else if (c == 'c')
   20288:	10c018d8 	cmpnei	r3,r2,99
   2028c:	1800061e 	bne	r3,zero,202a8 <alt_printf+0xa8>
                    alt_putchar(v);
   20290:	81000017 	ldw	r4,0(r16)
                    int v = va_arg(args, int);
   20294:	84800104 	addi	r18,r16,4
   20298:	9021883a 	mov	r16,r18
                    alt_putchar(v);
   2029c:	00203440 	call	20344 <alt_putchar>
            if ((c = *w++) != 0)
   202a0:	8c400084 	addi	r17,r17,2
   202a4:	003fe206 	br	20230 <alt_printf+0x30>
                else if (c == 'x')
   202a8:	10c01e18 	cmpnei	r3,r2,120
   202ac:	18001c1e 	bne	r3,zero,20320 <alt_printf+0x120>
                    unsigned long v = va_arg(args, unsigned long);
   202b0:	84c00017 	ldw	r19,0(r16)
   202b4:	84000104 	addi	r16,r16,4
                    if (v == 0)
   202b8:	9800141e 	bne	r19,zero,2030c <alt_printf+0x10c>
                        alt_putchar('0');
   202bc:	01000c04 	movi	r4,48
   202c0:	003fef06 	br	20280 <alt_printf+0x80>
                        digit_shift -= 4;
   202c4:	94bfff04 	addi	r18,r18,-4
                    while (!(v & (0xF << digit_shift)))
   202c8:	1c84983a 	sll	r2,r3,r18
   202cc:	14c4703a 	and	r2,r2,r19
   202d0:	103ffc26 	beq	r2,zero,202c4 <alt_printf+0xc4>
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   202d4:	050003c4 	movi	r20,15
                    for (; digit_shift >= 0; digit_shift -= 4)
   202d8:	903ff116 	blt	r18,zero,202a0 <alt_printf+0xa0>
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   202dc:	a484983a 	sll	r2,r20,r18
   202e0:	14c4703a 	and	r2,r2,r19
   202e4:	1484d83a 	srl	r2,r2,r18
                        if (digit <= 9)
   202e8:	10c002a8 	cmpgeui	r3,r2,10
   202ec:	18000a1e 	bne	r3,zero,20318 <alt_printf+0x118>
                            c = '0' + digit;
   202f0:	10800c04 	addi	r2,r2,48
                        alt_putchar(c);
   202f4:	11003fcc 	andi	r4,r2,255
   202f8:	2100201c 	xori	r4,r4,128
   202fc:	213fe004 	addi	r4,r4,-128
   20300:	00203440 	call	20344 <alt_putchar>
                    for (; digit_shift >= 0; digit_shift -= 4)
   20304:	94bfff04 	addi	r18,r18,-4
   20308:	003ff306 	br	202d8 <alt_printf+0xd8>
                    digit_shift = 28;
   2030c:	04800704 	movi	r18,28
                    while (!(v & (0xF << digit_shift)))
   20310:	00c003c4 	movi	r3,15
   20314:	003fec06 	br	202c8 <alt_printf+0xc8>
                            c = 'a' + digit - 10;
   20318:	108015c4 	addi	r2,r2,87
   2031c:	003ff506 	br	202f4 <alt_printf+0xf4>
                else if (c == 's')
   20320:	10801ce0 	cmpeqi	r2,r2,115
   20324:	103fde26 	beq	r2,zero,202a0 <alt_printf+0xa0>
                    char *s = va_arg(args, char *);
   20328:	84800017 	ldw	r18,0(r16)
   2032c:	84000104 	addi	r16,r16,4
                    while(*s)
   20330:	91000007 	ldb	r4,0(r18)
   20334:	203fda26 	beq	r4,zero,202a0 <alt_printf+0xa0>
                      alt_putchar(*s++);
   20338:	94800044 	addi	r18,r18,1
   2033c:	00203440 	call	20344 <alt_putchar>
   20340:	003ffb06 	br	20330 <alt_printf+0x130>

00020344 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   20344:	defffd04 	addi	sp,sp,-12
   20348:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
   2034c:	d90000c5 	stb	r4,3(sp)
{
   20350:	2021883a 	mov	r16,r4

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   20354:	010000b4 	movhi	r4,2
   20358:	000f883a 	mov	r7,zero
   2035c:	01800044 	movi	r6,1
   20360:	d94000c4 	addi	r5,sp,3
   20364:	21022504 	addi	r4,r4,2196
{
   20368:	dfc00215 	stw	ra,8(sp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   2036c:	00203b00 	call	203b0 <altera_avalon_uart_write>
   20370:	10ffffe0 	cmpeqi	r3,r2,-1
   20374:	1800011e 	bne	r3,zero,2037c <alt_putchar+0x38>
        return -1;
    }
    return c;
   20378:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
   2037c:	dfc00217 	ldw	ra,8(sp)
   20380:	dc000117 	ldw	r16,4(sp)
   20384:	dec00304 	addi	sp,sp,12
   20388:	f800283a 	ret

0002038c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2038c:	deffff04 	addi	sp,sp,-4
   20390:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   20394:	002043c0 	call	2043c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   20398:	00800044 	movi	r2,1
   2039c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   203a0:	dfc00017 	ldw	ra,0(sp)
   203a4:	dec00104 	addi	sp,sp,4
   203a8:	f800283a 	ret

000203ac <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
}
   203ac:	f800283a 	ret

000203b0 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   203b0:	defffd04 	addi	sp,sp,-12
   203b4:	dc400115 	stw	r17,4(sp)
   203b8:	dc000015 	stw	r16,0(sp)
   203bc:	dfc00215 	stw	ra,8(sp)
   203c0:	3023883a 	mov	r17,r6
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
   203c4:	39d0000c 	andi	r7,r7,16384
  count = len;
   203c8:	3021883a 	mov	r16,r6

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   203cc:	20c00017 	ldw	r3,0(r4)
   203d0:	18800237 	ldwio	r2,8(r3)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
   203d4:	1080100c 	andi	r2,r2,64
   203d8:	10000526 	beq	r2,zero,203f0 <altera_avalon_uart_write+0x40>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
   203dc:	28800044 	addi	r2,r5,1
   203e0:	29400007 	ldb	r5,0(r5)
   203e4:	19400135 	stwio	r5,4(r3)
      count--;
   203e8:	843fffc4 	addi	r16,r16,-1
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
   203ec:	100b883a 	mov	r5,r2
    }
  }
  while (block && count);
   203f0:	3800071e 	bne	r7,zero,20410 <altera_avalon_uart_write+0x60>
   203f4:	803ff51e 	bne	r16,zero,203cc <altera_avalon_uart_write+0x1c>
  {
    ALT_ERRNO = EWOULDBLOCK;
  }

  return (len - count);
}
   203f8:	8c05c83a 	sub	r2,r17,r16
   203fc:	dfc00217 	ldw	ra,8(sp)
   20400:	dc400117 	ldw	r17,4(sp)
   20404:	dc000017 	ldw	r16,0(sp)
   20408:	dec00304 	addi	sp,sp,12
   2040c:	f800283a 	ret
  if (count)
   20410:	803ff926 	beq	r16,zero,203f8 <altera_avalon_uart_write+0x48>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   20414:	d0a00117 	ldw	r2,-32764(gp)
   20418:	10000426 	beq	r2,zero,2042c <altera_avalon_uart_write+0x7c>
   2041c:	103ee83a 	callr	r2
    ALT_ERRNO = EWOULDBLOCK;
   20420:	00c002c4 	movi	r3,11
   20424:	10c00015 	stw	r3,0(r2)
   20428:	003ff306 	br	203f8 <altera_avalon_uart_write+0x48>
   2042c:	d0a10b04 	addi	r2,gp,-31700
   20430:	003ffb06 	br	20420 <altera_avalon_uart_write+0x70>

00020434 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   20434:	f800283a 	ret

00020438 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   20438:	f800283a 	ret

0002043c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   2043c:	000170fa 	wrctl	ienable,zero
}
   20440:	f800283a 	ret

00020444 <memcpy>:
   20444:	2005883a 	mov	r2,r4
   20448:	0007883a 	mov	r3,zero
   2044c:	30c0011e 	bne	r6,r3,20454 <memcpy+0x10>
   20450:	f800283a 	ret
   20454:	28cf883a 	add	r7,r5,r3
   20458:	39c00003 	ldbu	r7,0(r7)
   2045c:	10c9883a 	add	r4,r2,r3
   20460:	18c00044 	addi	r3,r3,1
   20464:	21c00005 	stb	r7,0(r4)
   20468:	003ff806 	br	2044c <memcpy+0x8>
